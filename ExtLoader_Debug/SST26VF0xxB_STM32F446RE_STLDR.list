
SST26VF0xxB_STM32F446RE_STLDR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000003c0  20000004  20000004  00010004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  200003c4  200003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  200003cc  200003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  200003d0  200003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000e178  200003d4  200003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000010a4  2000e54c  2000e54c  0001e54c  2**2
                  ALLOC
  6 .text         0000a808  2000f5f0  2000f5f0  0001f5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .RamFunc      00000110  20019df8  20019df8  00029df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .Dev_info     000000c8  20019f08  20019f08  00039f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rodata       00000024  20019fd0  20019fd0  00029fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 ._user_heap_stack 00000600  20019ff4  20019ff4  00029ff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00039fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dedf  00000000  00000000  0003a000  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d32  00000000  00000000  00047edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0004ac18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00023929  00000000  00000000  0004b838  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000db4d  00000000  00000000  0006f161  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000c9d9a  00000000  00000000  0007ccae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00146a48  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000a38  00000000  00000000  00146ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00002ca0  00000000  00000000  00147500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

2000f5f0 <__do_global_dtors_aux>:
2000f5f0:	b510      	push	{r4, lr}
2000f5f2:	4c05      	ldr	r4, [pc, #20]	; (2000f608 <__bss_end__+0x18>)
2000f5f4:	7823      	ldrb	r3, [r4, #0]
2000f5f6:	b933      	cbnz	r3, 2000f606 <__do_global_dtors_aux+0x16>
2000f5f8:	4b04      	ldr	r3, [pc, #16]	; (2000f60c <__bss_end__+0x1c>)
2000f5fa:	b113      	cbz	r3, 2000f602 <__do_global_dtors_aux+0x12>
2000f5fc:	4804      	ldr	r0, [pc, #16]	; (2000f610 <__bss_end__+0x20>)
2000f5fe:	f3af 8000 	nop.w
2000f602:	2301      	movs	r3, #1
2000f604:	7023      	strb	r3, [r4, #0]
2000f606:	bd10      	pop	{r4, pc}
2000f608:	2000e54c 	.word	0x2000e54c
2000f60c:	00000000 	.word	0x00000000
2000f610:	20019ddc 	.word	0x20019ddc

2000f614 <frame_dummy>:
2000f614:	b508      	push	{r3, lr}
2000f616:	4b03      	ldr	r3, [pc, #12]	; (2000f624 <frame_dummy+0x10>)
2000f618:	b11b      	cbz	r3, 2000f622 <frame_dummy+0xe>
2000f61a:	4903      	ldr	r1, [pc, #12]	; (2000f628 <frame_dummy+0x14>)
2000f61c:	4803      	ldr	r0, [pc, #12]	; (2000f62c <frame_dummy+0x18>)
2000f61e:	f3af 8000 	nop.w
2000f622:	bd08      	pop	{r3, pc}
2000f624:	00000000 	.word	0x00000000
2000f628:	2000e550 	.word	0x2000e550
2000f62c:	20019ddc 	.word	0x20019ddc

2000f630 <_mainCRTStartup>:
2000f630:	4b15      	ldr	r3, [pc, #84]	; (2000f688 <_mainCRTStartup+0x58>)
2000f632:	2b00      	cmp	r3, #0
2000f634:	bf08      	it	eq
2000f636:	4b13      	ldreq	r3, [pc, #76]	; (2000f684 <_mainCRTStartup+0x54>)
2000f638:	469d      	mov	sp, r3
2000f63a:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
2000f63e:	2100      	movs	r1, #0
2000f640:	468b      	mov	fp, r1
2000f642:	460f      	mov	r7, r1
2000f644:	4813      	ldr	r0, [pc, #76]	; (2000f694 <_mainCRTStartup+0x64>)
2000f646:	4a14      	ldr	r2, [pc, #80]	; (2000f698 <_mainCRTStartup+0x68>)
2000f648:	1a12      	subs	r2, r2, r0
2000f64a:	f00a fbbf 	bl	20019dcc <memset>
2000f64e:	4b0f      	ldr	r3, [pc, #60]	; (2000f68c <_mainCRTStartup+0x5c>)
2000f650:	2b00      	cmp	r3, #0
2000f652:	d000      	beq.n	2000f656 <_mainCRTStartup+0x26>
2000f654:	4798      	blx	r3
2000f656:	4b0e      	ldr	r3, [pc, #56]	; (2000f690 <_mainCRTStartup+0x60>)
2000f658:	2b00      	cmp	r3, #0
2000f65a:	d000      	beq.n	2000f65e <_mainCRTStartup+0x2e>
2000f65c:	4798      	blx	r3
2000f65e:	2000      	movs	r0, #0
2000f660:	2100      	movs	r1, #0
2000f662:	0004      	movs	r4, r0
2000f664:	000d      	movs	r5, r1
2000f666:	480d      	ldr	r0, [pc, #52]	; (2000f69c <_mainCRTStartup+0x6c>)
2000f668:	2800      	cmp	r0, #0
2000f66a:	d002      	beq.n	2000f672 <_mainCRTStartup+0x42>
2000f66c:	480c      	ldr	r0, [pc, #48]	; (2000f6a0 <_mainCRTStartup+0x70>)
2000f66e:	f3af 8000 	nop.w
2000f672:	f00a fb87 	bl	20019d84 <__libc_init_array>
2000f676:	0020      	movs	r0, r4
2000f678:	0029      	movs	r1, r5
2000f67a:	f000 fbfb 	bl	2000fe74 <main>
2000f67e:	f00a fb6d 	bl	20019d5c <exit>
2000f682:	bf00      	nop
2000f684:	00080000 	.word	0x00080000
	...
2000f694:	2000e54c 	.word	0x2000e54c
2000f698:	2000f5f0 	.word	0x2000f5f0
	...
2000f6a4:	200003d4 	.word	0x200003d4
2000f6a8:	200003d4 	.word	0x200003d4
2000f6ac:	2000e54c 	.word	0x2000e54c
2000f6b0:	2000e54c 	.word	0x2000e54c
2000f6b4:	2000f5f0 	.word	0x2000f5f0

2000f6b8 <__aeabi_uldivmod>:
2000f6b8:	b953      	cbnz	r3, 2000f6d0 <__aeabi_uldivmod+0x18>
2000f6ba:	b94a      	cbnz	r2, 2000f6d0 <__aeabi_uldivmod+0x18>
2000f6bc:	2900      	cmp	r1, #0
2000f6be:	bf08      	it	eq
2000f6c0:	2800      	cmpeq	r0, #0
2000f6c2:	bf1c      	itt	ne
2000f6c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
2000f6c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
2000f6cc:	f000 b972 	b.w	2000f9b4 <__aeabi_idiv0>
2000f6d0:	f1ad 0c08 	sub.w	ip, sp, #8
2000f6d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
2000f6d8:	f000 f806 	bl	2000f6e8 <__udivmoddi4>
2000f6dc:	f8dd e004 	ldr.w	lr, [sp, #4]
2000f6e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000f6e4:	b004      	add	sp, #16
2000f6e6:	4770      	bx	lr

2000f6e8 <__udivmoddi4>:
2000f6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000f6ec:	9e08      	ldr	r6, [sp, #32]
2000f6ee:	4604      	mov	r4, r0
2000f6f0:	4688      	mov	r8, r1
2000f6f2:	2b00      	cmp	r3, #0
2000f6f4:	d14b      	bne.n	2000f78e <__udivmoddi4+0xa6>
2000f6f6:	428a      	cmp	r2, r1
2000f6f8:	4615      	mov	r5, r2
2000f6fa:	d967      	bls.n	2000f7cc <__udivmoddi4+0xe4>
2000f6fc:	fab2 f282 	clz	r2, r2
2000f700:	b14a      	cbz	r2, 2000f716 <__udivmoddi4+0x2e>
2000f702:	f1c2 0720 	rsb	r7, r2, #32
2000f706:	fa01 f302 	lsl.w	r3, r1, r2
2000f70a:	fa20 f707 	lsr.w	r7, r0, r7
2000f70e:	4095      	lsls	r5, r2
2000f710:	ea47 0803 	orr.w	r8, r7, r3
2000f714:	4094      	lsls	r4, r2
2000f716:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000f71a:	0c23      	lsrs	r3, r4, #16
2000f71c:	fbb8 f7fe 	udiv	r7, r8, lr
2000f720:	fa1f fc85 	uxth.w	ip, r5
2000f724:	fb0e 8817 	mls	r8, lr, r7, r8
2000f728:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
2000f72c:	fb07 f10c 	mul.w	r1, r7, ip
2000f730:	4299      	cmp	r1, r3
2000f732:	d909      	bls.n	2000f748 <__udivmoddi4+0x60>
2000f734:	18eb      	adds	r3, r5, r3
2000f736:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
2000f73a:	f080 811b 	bcs.w	2000f974 <__udivmoddi4+0x28c>
2000f73e:	4299      	cmp	r1, r3
2000f740:	f240 8118 	bls.w	2000f974 <__udivmoddi4+0x28c>
2000f744:	3f02      	subs	r7, #2
2000f746:	442b      	add	r3, r5
2000f748:	1a5b      	subs	r3, r3, r1
2000f74a:	b2a4      	uxth	r4, r4
2000f74c:	fbb3 f0fe 	udiv	r0, r3, lr
2000f750:	fb0e 3310 	mls	r3, lr, r0, r3
2000f754:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
2000f758:	fb00 fc0c 	mul.w	ip, r0, ip
2000f75c:	45a4      	cmp	ip, r4
2000f75e:	d909      	bls.n	2000f774 <__udivmoddi4+0x8c>
2000f760:	192c      	adds	r4, r5, r4
2000f762:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
2000f766:	f080 8107 	bcs.w	2000f978 <__udivmoddi4+0x290>
2000f76a:	45a4      	cmp	ip, r4
2000f76c:	f240 8104 	bls.w	2000f978 <__udivmoddi4+0x290>
2000f770:	3802      	subs	r0, #2
2000f772:	442c      	add	r4, r5
2000f774:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
2000f778:	eba4 040c 	sub.w	r4, r4, ip
2000f77c:	2700      	movs	r7, #0
2000f77e:	b11e      	cbz	r6, 2000f788 <__udivmoddi4+0xa0>
2000f780:	40d4      	lsrs	r4, r2
2000f782:	2300      	movs	r3, #0
2000f784:	e9c6 4300 	strd	r4, r3, [r6]
2000f788:	4639      	mov	r1, r7
2000f78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000f78e:	428b      	cmp	r3, r1
2000f790:	d909      	bls.n	2000f7a6 <__udivmoddi4+0xbe>
2000f792:	2e00      	cmp	r6, #0
2000f794:	f000 80eb 	beq.w	2000f96e <__udivmoddi4+0x286>
2000f798:	2700      	movs	r7, #0
2000f79a:	e9c6 0100 	strd	r0, r1, [r6]
2000f79e:	4638      	mov	r0, r7
2000f7a0:	4639      	mov	r1, r7
2000f7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000f7a6:	fab3 f783 	clz	r7, r3
2000f7aa:	2f00      	cmp	r7, #0
2000f7ac:	d147      	bne.n	2000f83e <__udivmoddi4+0x156>
2000f7ae:	428b      	cmp	r3, r1
2000f7b0:	d302      	bcc.n	2000f7b8 <__udivmoddi4+0xd0>
2000f7b2:	4282      	cmp	r2, r0
2000f7b4:	f200 80fa 	bhi.w	2000f9ac <__udivmoddi4+0x2c4>
2000f7b8:	1a84      	subs	r4, r0, r2
2000f7ba:	eb61 0303 	sbc.w	r3, r1, r3
2000f7be:	2001      	movs	r0, #1
2000f7c0:	4698      	mov	r8, r3
2000f7c2:	2e00      	cmp	r6, #0
2000f7c4:	d0e0      	beq.n	2000f788 <__udivmoddi4+0xa0>
2000f7c6:	e9c6 4800 	strd	r4, r8, [r6]
2000f7ca:	e7dd      	b.n	2000f788 <__udivmoddi4+0xa0>
2000f7cc:	b902      	cbnz	r2, 2000f7d0 <__udivmoddi4+0xe8>
2000f7ce:	deff      	udf	#255	; 0xff
2000f7d0:	fab2 f282 	clz	r2, r2
2000f7d4:	2a00      	cmp	r2, #0
2000f7d6:	f040 808f 	bne.w	2000f8f8 <__udivmoddi4+0x210>
2000f7da:	1b49      	subs	r1, r1, r5
2000f7dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000f7e0:	fa1f f885 	uxth.w	r8, r5
2000f7e4:	2701      	movs	r7, #1
2000f7e6:	fbb1 fcfe 	udiv	ip, r1, lr
2000f7ea:	0c23      	lsrs	r3, r4, #16
2000f7ec:	fb0e 111c 	mls	r1, lr, ip, r1
2000f7f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000f7f4:	fb08 f10c 	mul.w	r1, r8, ip
2000f7f8:	4299      	cmp	r1, r3
2000f7fa:	d907      	bls.n	2000f80c <__udivmoddi4+0x124>
2000f7fc:	18eb      	adds	r3, r5, r3
2000f7fe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
2000f802:	d202      	bcs.n	2000f80a <__udivmoddi4+0x122>
2000f804:	4299      	cmp	r1, r3
2000f806:	f200 80cd 	bhi.w	2000f9a4 <__udivmoddi4+0x2bc>
2000f80a:	4684      	mov	ip, r0
2000f80c:	1a59      	subs	r1, r3, r1
2000f80e:	b2a3      	uxth	r3, r4
2000f810:	fbb1 f0fe 	udiv	r0, r1, lr
2000f814:	fb0e 1410 	mls	r4, lr, r0, r1
2000f818:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
2000f81c:	fb08 f800 	mul.w	r8, r8, r0
2000f820:	45a0      	cmp	r8, r4
2000f822:	d907      	bls.n	2000f834 <__udivmoddi4+0x14c>
2000f824:	192c      	adds	r4, r5, r4
2000f826:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
2000f82a:	d202      	bcs.n	2000f832 <__udivmoddi4+0x14a>
2000f82c:	45a0      	cmp	r8, r4
2000f82e:	f200 80b6 	bhi.w	2000f99e <__udivmoddi4+0x2b6>
2000f832:	4618      	mov	r0, r3
2000f834:	eba4 0408 	sub.w	r4, r4, r8
2000f838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
2000f83c:	e79f      	b.n	2000f77e <__udivmoddi4+0x96>
2000f83e:	f1c7 0c20 	rsb	ip, r7, #32
2000f842:	40bb      	lsls	r3, r7
2000f844:	fa22 fe0c 	lsr.w	lr, r2, ip
2000f848:	ea4e 0e03 	orr.w	lr, lr, r3
2000f84c:	fa01 f407 	lsl.w	r4, r1, r7
2000f850:	fa20 f50c 	lsr.w	r5, r0, ip
2000f854:	fa21 f30c 	lsr.w	r3, r1, ip
2000f858:	ea4f 481e 	mov.w	r8, lr, lsr #16
2000f85c:	4325      	orrs	r5, r4
2000f85e:	fbb3 f9f8 	udiv	r9, r3, r8
2000f862:	0c2c      	lsrs	r4, r5, #16
2000f864:	fb08 3319 	mls	r3, r8, r9, r3
2000f868:	fa1f fa8e 	uxth.w	sl, lr
2000f86c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
2000f870:	fb09 f40a 	mul.w	r4, r9, sl
2000f874:	429c      	cmp	r4, r3
2000f876:	fa02 f207 	lsl.w	r2, r2, r7
2000f87a:	fa00 f107 	lsl.w	r1, r0, r7
2000f87e:	d90b      	bls.n	2000f898 <__udivmoddi4+0x1b0>
2000f880:	eb1e 0303 	adds.w	r3, lr, r3
2000f884:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
2000f888:	f080 8087 	bcs.w	2000f99a <__udivmoddi4+0x2b2>
2000f88c:	429c      	cmp	r4, r3
2000f88e:	f240 8084 	bls.w	2000f99a <__udivmoddi4+0x2b2>
2000f892:	f1a9 0902 	sub.w	r9, r9, #2
2000f896:	4473      	add	r3, lr
2000f898:	1b1b      	subs	r3, r3, r4
2000f89a:	b2ad      	uxth	r5, r5
2000f89c:	fbb3 f0f8 	udiv	r0, r3, r8
2000f8a0:	fb08 3310 	mls	r3, r8, r0, r3
2000f8a4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
2000f8a8:	fb00 fa0a 	mul.w	sl, r0, sl
2000f8ac:	45a2      	cmp	sl, r4
2000f8ae:	d908      	bls.n	2000f8c2 <__udivmoddi4+0x1da>
2000f8b0:	eb1e 0404 	adds.w	r4, lr, r4
2000f8b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
2000f8b8:	d26b      	bcs.n	2000f992 <__udivmoddi4+0x2aa>
2000f8ba:	45a2      	cmp	sl, r4
2000f8bc:	d969      	bls.n	2000f992 <__udivmoddi4+0x2aa>
2000f8be:	3802      	subs	r0, #2
2000f8c0:	4474      	add	r4, lr
2000f8c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
2000f8c6:	fba0 8902 	umull	r8, r9, r0, r2
2000f8ca:	eba4 040a 	sub.w	r4, r4, sl
2000f8ce:	454c      	cmp	r4, r9
2000f8d0:	46c2      	mov	sl, r8
2000f8d2:	464b      	mov	r3, r9
2000f8d4:	d354      	bcc.n	2000f980 <__udivmoddi4+0x298>
2000f8d6:	d051      	beq.n	2000f97c <__udivmoddi4+0x294>
2000f8d8:	2e00      	cmp	r6, #0
2000f8da:	d069      	beq.n	2000f9b0 <__udivmoddi4+0x2c8>
2000f8dc:	ebb1 050a 	subs.w	r5, r1, sl
2000f8e0:	eb64 0403 	sbc.w	r4, r4, r3
2000f8e4:	fa04 fc0c 	lsl.w	ip, r4, ip
2000f8e8:	40fd      	lsrs	r5, r7
2000f8ea:	40fc      	lsrs	r4, r7
2000f8ec:	ea4c 0505 	orr.w	r5, ip, r5
2000f8f0:	e9c6 5400 	strd	r5, r4, [r6]
2000f8f4:	2700      	movs	r7, #0
2000f8f6:	e747      	b.n	2000f788 <__udivmoddi4+0xa0>
2000f8f8:	f1c2 0320 	rsb	r3, r2, #32
2000f8fc:	fa20 f703 	lsr.w	r7, r0, r3
2000f900:	4095      	lsls	r5, r2
2000f902:	fa01 f002 	lsl.w	r0, r1, r2
2000f906:	fa21 f303 	lsr.w	r3, r1, r3
2000f90a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
2000f90e:	4338      	orrs	r0, r7
2000f910:	0c01      	lsrs	r1, r0, #16
2000f912:	fbb3 f7fe 	udiv	r7, r3, lr
2000f916:	fa1f f885 	uxth.w	r8, r5
2000f91a:	fb0e 3317 	mls	r3, lr, r7, r3
2000f91e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000f922:	fb07 f308 	mul.w	r3, r7, r8
2000f926:	428b      	cmp	r3, r1
2000f928:	fa04 f402 	lsl.w	r4, r4, r2
2000f92c:	d907      	bls.n	2000f93e <__udivmoddi4+0x256>
2000f92e:	1869      	adds	r1, r5, r1
2000f930:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
2000f934:	d22f      	bcs.n	2000f996 <__udivmoddi4+0x2ae>
2000f936:	428b      	cmp	r3, r1
2000f938:	d92d      	bls.n	2000f996 <__udivmoddi4+0x2ae>
2000f93a:	3f02      	subs	r7, #2
2000f93c:	4429      	add	r1, r5
2000f93e:	1acb      	subs	r3, r1, r3
2000f940:	b281      	uxth	r1, r0
2000f942:	fbb3 f0fe 	udiv	r0, r3, lr
2000f946:	fb0e 3310 	mls	r3, lr, r0, r3
2000f94a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000f94e:	fb00 f308 	mul.w	r3, r0, r8
2000f952:	428b      	cmp	r3, r1
2000f954:	d907      	bls.n	2000f966 <__udivmoddi4+0x27e>
2000f956:	1869      	adds	r1, r5, r1
2000f958:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
2000f95c:	d217      	bcs.n	2000f98e <__udivmoddi4+0x2a6>
2000f95e:	428b      	cmp	r3, r1
2000f960:	d915      	bls.n	2000f98e <__udivmoddi4+0x2a6>
2000f962:	3802      	subs	r0, #2
2000f964:	4429      	add	r1, r5
2000f966:	1ac9      	subs	r1, r1, r3
2000f968:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
2000f96c:	e73b      	b.n	2000f7e6 <__udivmoddi4+0xfe>
2000f96e:	4637      	mov	r7, r6
2000f970:	4630      	mov	r0, r6
2000f972:	e709      	b.n	2000f788 <__udivmoddi4+0xa0>
2000f974:	4607      	mov	r7, r0
2000f976:	e6e7      	b.n	2000f748 <__udivmoddi4+0x60>
2000f978:	4618      	mov	r0, r3
2000f97a:	e6fb      	b.n	2000f774 <__udivmoddi4+0x8c>
2000f97c:	4541      	cmp	r1, r8
2000f97e:	d2ab      	bcs.n	2000f8d8 <__udivmoddi4+0x1f0>
2000f980:	ebb8 0a02 	subs.w	sl, r8, r2
2000f984:	eb69 020e 	sbc.w	r2, r9, lr
2000f988:	3801      	subs	r0, #1
2000f98a:	4613      	mov	r3, r2
2000f98c:	e7a4      	b.n	2000f8d8 <__udivmoddi4+0x1f0>
2000f98e:	4660      	mov	r0, ip
2000f990:	e7e9      	b.n	2000f966 <__udivmoddi4+0x27e>
2000f992:	4618      	mov	r0, r3
2000f994:	e795      	b.n	2000f8c2 <__udivmoddi4+0x1da>
2000f996:	4667      	mov	r7, ip
2000f998:	e7d1      	b.n	2000f93e <__udivmoddi4+0x256>
2000f99a:	4681      	mov	r9, r0
2000f99c:	e77c      	b.n	2000f898 <__udivmoddi4+0x1b0>
2000f99e:	3802      	subs	r0, #2
2000f9a0:	442c      	add	r4, r5
2000f9a2:	e747      	b.n	2000f834 <__udivmoddi4+0x14c>
2000f9a4:	f1ac 0c02 	sub.w	ip, ip, #2
2000f9a8:	442b      	add	r3, r5
2000f9aa:	e72f      	b.n	2000f80c <__udivmoddi4+0x124>
2000f9ac:	4638      	mov	r0, r7
2000f9ae:	e708      	b.n	2000f7c2 <__udivmoddi4+0xda>
2000f9b0:	4637      	mov	r7, r6
2000f9b2:	e6e9      	b.n	2000f788 <__udivmoddi4+0xa0>

2000f9b4 <__aeabi_idiv0>:
2000f9b4:	4770      	bx	lr
2000f9b6:	bf00      	nop

2000f9b8 <Init>:
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Init(void)
{
2000f9b8:	b580      	push	{r7, lr}
2000f9ba:	b082      	sub	sp, #8
2000f9bc:	af00      	add	r7, sp, #0
    *(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
2000f9be:	4b0f      	ldr	r3, [pc, #60]	; (2000f9fc <Init+0x44>)
2000f9c0:	4a0f      	ldr	r2, [pc, #60]	; (2000fa00 <Init+0x48>)
2000f9c2:	601a      	str	r2, [r3, #0]


    SystemInit();
2000f9c4:	f000 ff94 	bl	200108f0 <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     * */

    SCB->VTOR = 0x20000000 | 0x200;
2000f9c8:	4b0e      	ldr	r3, [pc, #56]	; (2000fa04 <Init+0x4c>)
2000f9ca:	4a0f      	ldr	r2, [pc, #60]	; (2000fa08 <Init+0x50>)
2000f9cc:	609a      	str	r2, [r3, #8]
2000f9ce:	2300      	movs	r3, #0
2000f9d0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000f9d2:	683b      	ldr	r3, [r7, #0]
2000f9d4:	f383 8810 	msr	PRIMASK, r3

    __set_PRIMASK(0); //enable interrupts

    HAL_Init();
2000f9d8:	f001 f844 	bl	20010a64 <HAL_Init>

    SystemClock_Config();
2000f9dc:	f000 fad4 	bl	2000ff88 <SystemClock_Config>

    MX_GPIO_Init();
2000f9e0:	f000 f9ca 	bl	2000fd78 <MX_GPIO_Init>

    MX_SPI2_Init();
2000f9e4:	f000 fb4a 	bl	2001007c <MX_SPI2_Init>
2000f9e8:	2301      	movs	r3, #1
2000f9ea:	607b      	str	r3, [r7, #4]
2000f9ec:	687b      	ldr	r3, [r7, #4]
2000f9ee:	f383 8810 	msr	PRIMASK, r3

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
2000f9f2:	2301      	movs	r3, #1
}
2000f9f4:	4618      	mov	r0, r3
2000f9f6:	3708      	adds	r7, #8
2000f9f8:	46bd      	mov	sp, r7
2000f9fa:	bd80      	pop	{r7, pc}
2000f9fc:	e000edf0 	.word	0xe000edf0
2000fa00:	a05f0000 	.word	0xa05f0000
2000fa04:	e000ed00 	.word	0xe000ed00
2000fa08:	20000200 	.word	0x20000200

2000fa0c <Read>:
  *      R0             : "1" 			: Operation succeeded
  * 			  "0" 			: Operation failure
  * Note: Mandatory for all types except SRAM and PSRAM
  */
int Read (uint32_t Address, uint32_t Size, uint8_t* buffer)
{
2000fa0c:	b580      	push	{r7, lr}
2000fa0e:	b084      	sub	sp, #16
2000fa10:	af00      	add	r7, sp, #0
2000fa12:	60f8      	str	r0, [r7, #12]
2000fa14:	60b9      	str	r1, [r7, #8]
2000fa16:	607a      	str	r2, [r7, #4]
	sFLASH_ReadBuffer(buffer, Address, Size);
2000fa18:	68ba      	ldr	r2, [r7, #8]
2000fa1a:	68f9      	ldr	r1, [r7, #12]
2000fa1c:	6878      	ldr	r0, [r7, #4]
2000fa1e:	f000 fc81 	bl	20010324 <sFLASH_ReadBuffer>
	return 1;
2000fa22:	2301      	movs	r3, #1
}
2000fa24:	4618      	mov	r0, r3
2000fa26:	3710      	adds	r7, #16
2000fa28:	46bd      	mov	sp, r7
2000fa2a:	bd80      	pop	{r7, pc}

2000fa2c <Write>:
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Write(uint32_t Address, uint32_t Size, uint8_t* buffer)
{
2000fa2c:	b580      	push	{r7, lr}
2000fa2e:	b084      	sub	sp, #16
2000fa30:	af00      	add	r7, sp, #0
2000fa32:	60f8      	str	r0, [r7, #12]
2000fa34:	60b9      	str	r1, [r7, #8]
2000fa36:	607a      	str	r2, [r7, #4]
	sFLASH_WriteBuffer(buffer, Address, Size);
2000fa38:	68ba      	ldr	r2, [r7, #8]
2000fa3a:	68f9      	ldr	r1, [r7, #12]
2000fa3c:	6878      	ldr	r0, [r7, #4]
2000fa3e:	f000 fca9 	bl	20010394 <sFLASH_WriteBuffer>
	return LOADER_OK;
2000fa42:	2301      	movs	r3, #1
}
2000fa44:	4618      	mov	r0, r3
2000fa46:	3710      	adds	r7, #16
2000fa48:	46bd      	mov	sp, r7
2000fa4a:	bd80      	pop	{r7, pc}

2000fa4c <SectorErase>:
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
2000fa4c:	b580      	push	{r7, lr}
2000fa4e:	b082      	sub	sp, #8
2000fa50:	af00      	add	r7, sp, #0
2000fa52:	6078      	str	r0, [r7, #4]
2000fa54:	6039      	str	r1, [r7, #0]
	EraseStartAddress = EraseStartAddress -  EraseStartAddress % sFLASH_SPI_SECTOR_SIZE;
2000fa56:	687b      	ldr	r3, [r7, #4]
2000fa58:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
2000fa5c:	f023 030f 	bic.w	r3, r3, #15
2000fa60:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress)
2000fa62:	e006      	b.n	2000fa72 <SectorErase+0x26>
	{
		sFLASH_EraseSector(EraseStartAddress);
2000fa64:	6878      	ldr	r0, [r7, #4]
2000fa66:	f000 fbcb 	bl	20010200 <sFLASH_EraseSector>
		EraseStartAddress += sFLASH_SPI_SECTOR_SIZE;
2000fa6a:	687b      	ldr	r3, [r7, #4]
2000fa6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
2000fa70:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress)
2000fa72:	683a      	ldr	r2, [r7, #0]
2000fa74:	687b      	ldr	r3, [r7, #4]
2000fa76:	429a      	cmp	r2, r3
2000fa78:	d2f4      	bcs.n	2000fa64 <SectorErase+0x18>
	}

	return LOADER_OK;
2000fa7a:	2301      	movs	r3, #1
}
2000fa7c:	4618      	mov	r0, r3
2000fa7e:	3708      	adds	r7, #8
2000fa80:	46bd      	mov	sp, r7
2000fa82:	bd80      	pop	{r7, pc}

2000fa84 <MassErase>:
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int MassErase(void)
{
2000fa84:	b580      	push	{r7, lr}
2000fa86:	af00      	add	r7, sp, #0
	sFLASH_EraseChip();
2000fa88:	f000 fbec 	bl	20010264 <sFLASH_EraseChip>
    return LOADER_OK;
2000fa8c:	2301      	movs	r3, #1
}
2000fa8e:	4618      	mov	r0, r3
2000fa90:	bd80      	pop	{r7, pc}

2000fa92 <CheckSum>:
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal)
{
2000fa92:	b580      	push	{r7, lr}
2000fa94:	b088      	sub	sp, #32
2000fa96:	af00      	add	r7, sp, #0
2000fa98:	60f8      	str	r0, [r7, #12]
2000fa9a:	60b9      	str	r1, [r7, #8]
2000fa9c:	607a      	str	r2, [r7, #4]
	uint8_t missalignementAddress = StartAddress%4;
2000fa9e:	68fb      	ldr	r3, [r7, #12]
2000faa0:	b2db      	uxtb	r3, r3
2000faa2:	f003 0303 	and.w	r3, r3, #3
2000faa6:	77fb      	strb	r3, [r7, #31]
	uint8_t missalignementSize = Size ;
2000faa8:	68bb      	ldr	r3, [r7, #8]
2000faaa:	77bb      	strb	r3, [r7, #30]
	int cnt;
	uint32_t Val;
	uint8_t value;

	StartAddress-=StartAddress%4;
2000faac:	68fb      	ldr	r3, [r7, #12]
2000faae:	f023 0303 	bic.w	r3, r3, #3
2000fab2:	60fb      	str	r3, [r7, #12]
	Size += (Size%4==0)?0:4-(Size%4);
2000fab4:	68bb      	ldr	r3, [r7, #8]
2000fab6:	f003 0303 	and.w	r3, r3, #3
2000faba:	2b00      	cmp	r3, #0
2000fabc:	d005      	beq.n	2000faca <CheckSum+0x38>
2000fabe:	68bb      	ldr	r3, [r7, #8]
2000fac0:	f003 0303 	and.w	r3, r3, #3
2000fac4:	f1c3 0304 	rsb	r3, r3, #4
2000fac8:	e000      	b.n	2000facc <CheckSum+0x3a>
2000faca:	2300      	movs	r3, #0
2000facc:	68ba      	ldr	r2, [r7, #8]
2000face:	4413      	add	r3, r2
2000fad0:	60bb      	str	r3, [r7, #8]

	for(cnt=0; cnt<Size ; cnt+=4)
2000fad2:	2300      	movs	r3, #0
2000fad4:	61bb      	str	r3, [r7, #24]
2000fad6:	e0df      	b.n	2000fc98 <CheckSum+0x206>
	{
		sFLASH_ReadBuffer(&value, StartAddress ,1);
2000fad8:	f107 0313 	add.w	r3, r7, #19
2000fadc:	2201      	movs	r2, #1
2000fade:	68f9      	ldr	r1, [r7, #12]
2000fae0:	4618      	mov	r0, r3
2000fae2:	f000 fc1f 	bl	20010324 <sFLASH_ReadBuffer>
		Val = value;
2000fae6:	7cfb      	ldrb	r3, [r7, #19]
2000fae8:	617b      	str	r3, [r7, #20]
		sFLASH_ReadBuffer(&value, StartAddress + 1,1);
2000faea:	68fb      	ldr	r3, [r7, #12]
2000faec:	1c59      	adds	r1, r3, #1
2000faee:	f107 0313 	add.w	r3, r7, #19
2000faf2:	2201      	movs	r2, #1
2000faf4:	4618      	mov	r0, r3
2000faf6:	f000 fc15 	bl	20010324 <sFLASH_ReadBuffer>
		Val+= value<<8;
2000fafa:	7cfb      	ldrb	r3, [r7, #19]
2000fafc:	021b      	lsls	r3, r3, #8
2000fafe:	461a      	mov	r2, r3
2000fb00:	697b      	ldr	r3, [r7, #20]
2000fb02:	4413      	add	r3, r2
2000fb04:	617b      	str	r3, [r7, #20]
		sFLASH_ReadBuffer(&value, StartAddress + 2,1);
2000fb06:	68fb      	ldr	r3, [r7, #12]
2000fb08:	1c99      	adds	r1, r3, #2
2000fb0a:	f107 0313 	add.w	r3, r7, #19
2000fb0e:	2201      	movs	r2, #1
2000fb10:	4618      	mov	r0, r3
2000fb12:	f000 fc07 	bl	20010324 <sFLASH_ReadBuffer>
		Val+= value<<16;
2000fb16:	7cfb      	ldrb	r3, [r7, #19]
2000fb18:	041b      	lsls	r3, r3, #16
2000fb1a:	461a      	mov	r2, r3
2000fb1c:	697b      	ldr	r3, [r7, #20]
2000fb1e:	4413      	add	r3, r2
2000fb20:	617b      	str	r3, [r7, #20]
		sFLASH_ReadBuffer(&value, StartAddress + 3,1);
2000fb22:	68fb      	ldr	r3, [r7, #12]
2000fb24:	1cd9      	adds	r1, r3, #3
2000fb26:	f107 0313 	add.w	r3, r7, #19
2000fb2a:	2201      	movs	r2, #1
2000fb2c:	4618      	mov	r0, r3
2000fb2e:	f000 fbf9 	bl	20010324 <sFLASH_ReadBuffer>
		Val+= value<<24;
2000fb32:	7cfb      	ldrb	r3, [r7, #19]
2000fb34:	061b      	lsls	r3, r3, #24
2000fb36:	461a      	mov	r2, r3
2000fb38:	697b      	ldr	r3, [r7, #20]
2000fb3a:	4413      	add	r3, r2
2000fb3c:	617b      	str	r3, [r7, #20]
		if(missalignementAddress)
2000fb3e:	7ffb      	ldrb	r3, [r7, #31]
2000fb40:	2b00      	cmp	r3, #0
2000fb42:	d03e      	beq.n	2000fbc2 <CheckSum+0x130>
		{
			switch (missalignementAddress)
2000fb44:	7ffb      	ldrb	r3, [r7, #31]
2000fb46:	2b02      	cmp	r3, #2
2000fb48:	d01d      	beq.n	2000fb86 <CheckSum+0xf4>
2000fb4a:	2b03      	cmp	r3, #3
2000fb4c:	d02d      	beq.n	2000fbaa <CheckSum+0x118>
2000fb4e:	2b01      	cmp	r3, #1
2000fb50:	f040 809c 	bne.w	2000fc8c <CheckSum+0x1fa>
			{
				case 1:
					InitVal += (uint8_t) (Val>>8 & 0xff);
2000fb54:	697b      	ldr	r3, [r7, #20]
2000fb56:	0a1b      	lsrs	r3, r3, #8
2000fb58:	b2db      	uxtb	r3, r3
2000fb5a:	461a      	mov	r2, r3
2000fb5c:	687b      	ldr	r3, [r7, #4]
2000fb5e:	4413      	add	r3, r2
2000fb60:	607b      	str	r3, [r7, #4]
					InitVal += (uint8_t) (Val>>16 & 0xff);
2000fb62:	697b      	ldr	r3, [r7, #20]
2000fb64:	0c1b      	lsrs	r3, r3, #16
2000fb66:	b2db      	uxtb	r3, r3
2000fb68:	461a      	mov	r2, r3
2000fb6a:	687b      	ldr	r3, [r7, #4]
2000fb6c:	4413      	add	r3, r2
2000fb6e:	607b      	str	r3, [r7, #4]
					InitVal += (uint8_t) (Val>>24 & 0xff);
2000fb70:	697b      	ldr	r3, [r7, #20]
2000fb72:	0e1b      	lsrs	r3, r3, #24
2000fb74:	b2db      	uxtb	r3, r3
2000fb76:	461a      	mov	r2, r3
2000fb78:	687b      	ldr	r3, [r7, #4]
2000fb7a:	4413      	add	r3, r2
2000fb7c:	607b      	str	r3, [r7, #4]
					missalignementAddress-=1;
2000fb7e:	7ffb      	ldrb	r3, [r7, #31]
2000fb80:	3b01      	subs	r3, #1
2000fb82:	77fb      	strb	r3, [r7, #31]
				break;
2000fb84:	e082      	b.n	2000fc8c <CheckSum+0x1fa>
				case 2:
					InitVal += (uint8_t) (Val>>16 & 0xff);
2000fb86:	697b      	ldr	r3, [r7, #20]
2000fb88:	0c1b      	lsrs	r3, r3, #16
2000fb8a:	b2db      	uxtb	r3, r3
2000fb8c:	461a      	mov	r2, r3
2000fb8e:	687b      	ldr	r3, [r7, #4]
2000fb90:	4413      	add	r3, r2
2000fb92:	607b      	str	r3, [r7, #4]
					InitVal += (uint8_t) (Val>>24 & 0xff);
2000fb94:	697b      	ldr	r3, [r7, #20]
2000fb96:	0e1b      	lsrs	r3, r3, #24
2000fb98:	b2db      	uxtb	r3, r3
2000fb9a:	461a      	mov	r2, r3
2000fb9c:	687b      	ldr	r3, [r7, #4]
2000fb9e:	4413      	add	r3, r2
2000fba0:	607b      	str	r3, [r7, #4]
					missalignementAddress-=2;
2000fba2:	7ffb      	ldrb	r3, [r7, #31]
2000fba4:	3b02      	subs	r3, #2
2000fba6:	77fb      	strb	r3, [r7, #31]
				break;
2000fba8:	e070      	b.n	2000fc8c <CheckSum+0x1fa>
				case 3:
					InitVal += (uint8_t) (Val>>24 & 0xff);
2000fbaa:	697b      	ldr	r3, [r7, #20]
2000fbac:	0e1b      	lsrs	r3, r3, #24
2000fbae:	b2db      	uxtb	r3, r3
2000fbb0:	461a      	mov	r2, r3
2000fbb2:	687b      	ldr	r3, [r7, #4]
2000fbb4:	4413      	add	r3, r2
2000fbb6:	607b      	str	r3, [r7, #4]
					missalignementAddress-=3;
2000fbb8:	7ffb      	ldrb	r3, [r7, #31]
2000fbba:	3b03      	subs	r3, #3
2000fbbc:	77fb      	strb	r3, [r7, #31]
				break;
2000fbbe:	bf00      	nop
2000fbc0:	e064      	b.n	2000fc8c <CheckSum+0x1fa>
			}
		}
		else if((Size-missalignementSize)%4 && (Size-cnt) <=4)
2000fbc2:	7fbb      	ldrb	r3, [r7, #30]
2000fbc4:	68ba      	ldr	r2, [r7, #8]
2000fbc6:	1ad3      	subs	r3, r2, r3
2000fbc8:	f003 0303 	and.w	r3, r3, #3
2000fbcc:	2b00      	cmp	r3, #0
2000fbce:	d042      	beq.n	2000fc56 <CheckSum+0x1c4>
2000fbd0:	69bb      	ldr	r3, [r7, #24]
2000fbd2:	68ba      	ldr	r2, [r7, #8]
2000fbd4:	1ad3      	subs	r3, r2, r3
2000fbd6:	2b04      	cmp	r3, #4
2000fbd8:	d83d      	bhi.n	2000fc56 <CheckSum+0x1c4>
		{
			switch (Size-missalignementSize)
2000fbda:	7fbb      	ldrb	r3, [r7, #30]
2000fbdc:	68ba      	ldr	r2, [r7, #8]
2000fbde:	1ad3      	subs	r3, r2, r3
2000fbe0:	2b02      	cmp	r3, #2
2000fbe2:	d01c      	beq.n	2000fc1e <CheckSum+0x18c>
2000fbe4:	2b03      	cmp	r3, #3
2000fbe6:	d02b      	beq.n	2000fc40 <CheckSum+0x1ae>
2000fbe8:	2b01      	cmp	r3, #1
2000fbea:	d000      	beq.n	2000fbee <CheckSum+0x15c>
			case 3:
				InitVal += (uint8_t) Val;
				missalignementSize-=3;
				break;
			}
		}
2000fbec:	e04e      	b.n	2000fc8c <CheckSum+0x1fa>
				InitVal += (uint8_t) Val;
2000fbee:	697b      	ldr	r3, [r7, #20]
2000fbf0:	b2db      	uxtb	r3, r3
2000fbf2:	461a      	mov	r2, r3
2000fbf4:	687b      	ldr	r3, [r7, #4]
2000fbf6:	4413      	add	r3, r2
2000fbf8:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val>>8 & 0xff);
2000fbfa:	697b      	ldr	r3, [r7, #20]
2000fbfc:	0a1b      	lsrs	r3, r3, #8
2000fbfe:	b2db      	uxtb	r3, r3
2000fc00:	461a      	mov	r2, r3
2000fc02:	687b      	ldr	r3, [r7, #4]
2000fc04:	4413      	add	r3, r2
2000fc06:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val>>16 & 0xff);
2000fc08:	697b      	ldr	r3, [r7, #20]
2000fc0a:	0c1b      	lsrs	r3, r3, #16
2000fc0c:	b2db      	uxtb	r3, r3
2000fc0e:	461a      	mov	r2, r3
2000fc10:	687b      	ldr	r3, [r7, #4]
2000fc12:	4413      	add	r3, r2
2000fc14:	607b      	str	r3, [r7, #4]
				missalignementSize-=1;
2000fc16:	7fbb      	ldrb	r3, [r7, #30]
2000fc18:	3b01      	subs	r3, #1
2000fc1a:	77bb      	strb	r3, [r7, #30]
			break;
2000fc1c:	e01a      	b.n	2000fc54 <CheckSum+0x1c2>
				InitVal += (uint8_t) Val;
2000fc1e:	697b      	ldr	r3, [r7, #20]
2000fc20:	b2db      	uxtb	r3, r3
2000fc22:	461a      	mov	r2, r3
2000fc24:	687b      	ldr	r3, [r7, #4]
2000fc26:	4413      	add	r3, r2
2000fc28:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val>>8 & 0xff);
2000fc2a:	697b      	ldr	r3, [r7, #20]
2000fc2c:	0a1b      	lsrs	r3, r3, #8
2000fc2e:	b2db      	uxtb	r3, r3
2000fc30:	461a      	mov	r2, r3
2000fc32:	687b      	ldr	r3, [r7, #4]
2000fc34:	4413      	add	r3, r2
2000fc36:	607b      	str	r3, [r7, #4]
				missalignementSize-=2;
2000fc38:	7fbb      	ldrb	r3, [r7, #30]
2000fc3a:	3b02      	subs	r3, #2
2000fc3c:	77bb      	strb	r3, [r7, #30]
			break;
2000fc3e:	e009      	b.n	2000fc54 <CheckSum+0x1c2>
				InitVal += (uint8_t) Val;
2000fc40:	697b      	ldr	r3, [r7, #20]
2000fc42:	b2db      	uxtb	r3, r3
2000fc44:	461a      	mov	r2, r3
2000fc46:	687b      	ldr	r3, [r7, #4]
2000fc48:	4413      	add	r3, r2
2000fc4a:	607b      	str	r3, [r7, #4]
				missalignementSize-=3;
2000fc4c:	7fbb      	ldrb	r3, [r7, #30]
2000fc4e:	3b03      	subs	r3, #3
2000fc50:	77bb      	strb	r3, [r7, #30]
				break;
2000fc52:	bf00      	nop
		}
2000fc54:	e01a      	b.n	2000fc8c <CheckSum+0x1fa>
		else
		{
			InitVal += (uint8_t) Val;
2000fc56:	697b      	ldr	r3, [r7, #20]
2000fc58:	b2db      	uxtb	r3, r3
2000fc5a:	461a      	mov	r2, r3
2000fc5c:	687b      	ldr	r3, [r7, #4]
2000fc5e:	4413      	add	r3, r2
2000fc60:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val>>8 & 0xff);
2000fc62:	697b      	ldr	r3, [r7, #20]
2000fc64:	0a1b      	lsrs	r3, r3, #8
2000fc66:	b2db      	uxtb	r3, r3
2000fc68:	461a      	mov	r2, r3
2000fc6a:	687b      	ldr	r3, [r7, #4]
2000fc6c:	4413      	add	r3, r2
2000fc6e:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val>>16 & 0xff);
2000fc70:	697b      	ldr	r3, [r7, #20]
2000fc72:	0c1b      	lsrs	r3, r3, #16
2000fc74:	b2db      	uxtb	r3, r3
2000fc76:	461a      	mov	r2, r3
2000fc78:	687b      	ldr	r3, [r7, #4]
2000fc7a:	4413      	add	r3, r2
2000fc7c:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val>>24 & 0xff);
2000fc7e:	697b      	ldr	r3, [r7, #20]
2000fc80:	0e1b      	lsrs	r3, r3, #24
2000fc82:	b2db      	uxtb	r3, r3
2000fc84:	461a      	mov	r2, r3
2000fc86:	687b      	ldr	r3, [r7, #4]
2000fc88:	4413      	add	r3, r2
2000fc8a:	607b      	str	r3, [r7, #4]
		}
		StartAddress+=4;
2000fc8c:	68fb      	ldr	r3, [r7, #12]
2000fc8e:	3304      	adds	r3, #4
2000fc90:	60fb      	str	r3, [r7, #12]
	for(cnt=0; cnt<Size ; cnt+=4)
2000fc92:	69bb      	ldr	r3, [r7, #24]
2000fc94:	3304      	adds	r3, #4
2000fc96:	61bb      	str	r3, [r7, #24]
2000fc98:	69bb      	ldr	r3, [r7, #24]
2000fc9a:	68ba      	ldr	r2, [r7, #8]
2000fc9c:	429a      	cmp	r2, r3
2000fc9e:	f63f af1b 	bhi.w	2000fad8 <CheckSum+0x46>
	}

	return (InitVal);
2000fca2:	687b      	ldr	r3, [r7, #4]
}
2000fca4:	4618      	mov	r0, r3
2000fca6:	3720      	adds	r7, #32
2000fca8:	46bd      	mov	sp, r7
2000fcaa:	bd80      	pop	{r7, pc}

2000fcac <Verify>:
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement)
{
2000fcac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
2000fcb0:	b08a      	sub	sp, #40	; 0x28
2000fcb2:	af00      	add	r7, sp, #0
2000fcb4:	60f8      	str	r0, [r7, #12]
2000fcb6:	60b9      	str	r1, [r7, #8]
2000fcb8:	607a      	str	r2, [r7, #4]
2000fcba:	603b      	str	r3, [r7, #0]
	uint32_t InitVal = 0;
2000fcbc:	2300      	movs	r3, #0
2000fcbe:	623b      	str	r3, [r7, #32]
	uint32_t VerifiedData = 0;
2000fcc0:	2300      	movs	r3, #0
2000fcc2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t TmpBuffer = 0x00;
2000fcc4:	2300      	movs	r3, #0
2000fcc6:	75fb      	strb	r3, [r7, #23]
	uint64_t checksum;
	Size*=4;
2000fcc8:	687b      	ldr	r3, [r7, #4]
2000fcca:	009b      	lsls	r3, r3, #2
2000fccc:	607b      	str	r3, [r7, #4]

	checksum = CheckSum((uint32_t)MemoryAddr + (missalignement & 0xf), Size - ((missalignement >> 16) & 0xF), InitVal);
2000fcce:	683b      	ldr	r3, [r7, #0]
2000fcd0:	f003 020f 	and.w	r2, r3, #15
2000fcd4:	68fb      	ldr	r3, [r7, #12]
2000fcd6:	18d0      	adds	r0, r2, r3
2000fcd8:	683b      	ldr	r3, [r7, #0]
2000fcda:	0c1b      	lsrs	r3, r3, #16
2000fcdc:	f003 030f 	and.w	r3, r3, #15
2000fce0:	687a      	ldr	r2, [r7, #4]
2000fce2:	1ad3      	subs	r3, r2, r3
2000fce4:	6a3a      	ldr	r2, [r7, #32]
2000fce6:	4619      	mov	r1, r3
2000fce8:	f7ff fed3 	bl	2000fa92 <CheckSum>
2000fcec:	4603      	mov	r3, r0
2000fcee:	f04f 0400 	mov.w	r4, #0
2000fcf2:	e9c7 3406 	strd	r3, r4, [r7, #24]

	while (Size>VerifiedData)
2000fcf6:	e02a      	b.n	2000fd4e <Verify+0xa2>
	{
		sFLASH_ReadBuffer(&TmpBuffer, MemoryAddr+VerifiedData, 1);
2000fcf8:	68fa      	ldr	r2, [r7, #12]
2000fcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000fcfc:	18d1      	adds	r1, r2, r3
2000fcfe:	f107 0317 	add.w	r3, r7, #23
2000fd02:	2201      	movs	r2, #1
2000fd04:	4618      	mov	r0, r3
2000fd06:	f000 fb0d 	bl	20010324 <sFLASH_ReadBuffer>

		if (TmpBuffer != *((uint8_t*)RAMBufferAddr+VerifiedData))
2000fd0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000fd0c:	68bb      	ldr	r3, [r7, #8]
2000fd0e:	4413      	add	r3, r2
2000fd10:	781a      	ldrb	r2, [r3, #0]
2000fd12:	7dfb      	ldrb	r3, [r7, #23]
2000fd14:	429a      	cmp	r2, r3
2000fd16:	d017      	beq.n	2000fd48 <Verify+0x9c>
			return ((checksum<<32) + MemoryAddr+VerifiedData);
2000fd18:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
2000fd1c:	f04f 0300 	mov.w	r3, #0
2000fd20:	f04f 0400 	mov.w	r4, #0
2000fd24:	000c      	movs	r4, r1
2000fd26:	2300      	movs	r3, #0
2000fd28:	68fa      	ldr	r2, [r7, #12]
2000fd2a:	4693      	mov	fp, r2
2000fd2c:	f04f 0c00 	mov.w	ip, #0
2000fd30:	eb1b 0103 	adds.w	r1, fp, r3
2000fd34:	eb4c 0204 	adc.w	r2, ip, r4
2000fd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000fd3a:	f04f 0400 	mov.w	r4, #0
2000fd3e:	eb13 0b01 	adds.w	fp, r3, r1
2000fd42:	eb44 0c02 	adc.w	ip, r4, r2
2000fd46:	e00f      	b.n	2000fd68 <Verify+0xbc>

		VerifiedData++;
2000fd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000fd4a:	3301      	adds	r3, #1
2000fd4c:	627b      	str	r3, [r7, #36]	; 0x24
	while (Size>VerifiedData)
2000fd4e:	687a      	ldr	r2, [r7, #4]
2000fd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000fd52:	429a      	cmp	r2, r3
2000fd54:	d8d0      	bhi.n	2000fcf8 <Verify+0x4c>
	}

	return (checksum<<32);
2000fd56:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
2000fd5a:	f04f 0b00 	mov.w	fp, #0
2000fd5e:	f04f 0c00 	mov.w	ip, #0
2000fd62:	468c      	mov	ip, r1
2000fd64:	f04f 0b00 	mov.w	fp, #0
2000fd68:	465b      	mov	r3, fp
2000fd6a:	4664      	mov	r4, ip
}
2000fd6c:	4618      	mov	r0, r3
2000fd6e:	4621      	mov	r1, r4
2000fd70:	3728      	adds	r7, #40	; 0x28
2000fd72:	46bd      	mov	sp, r7
2000fd74:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

2000fd78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
2000fd78:	b580      	push	{r7, lr}
2000fd7a:	b088      	sub	sp, #32
2000fd7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000fd7e:	f107 030c 	add.w	r3, r7, #12
2000fd82:	2200      	movs	r2, #0
2000fd84:	601a      	str	r2, [r3, #0]
2000fd86:	605a      	str	r2, [r3, #4]
2000fd88:	609a      	str	r2, [r3, #8]
2000fd8a:	60da      	str	r2, [r3, #12]
2000fd8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
2000fd8e:	2300      	movs	r3, #0
2000fd90:	60bb      	str	r3, [r7, #8]
2000fd92:	4b20      	ldr	r3, [pc, #128]	; (2000fe14 <MX_GPIO_Init+0x9c>)
2000fd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000fd96:	4a1f      	ldr	r2, [pc, #124]	; (2000fe14 <MX_GPIO_Init+0x9c>)
2000fd98:	f043 0304 	orr.w	r3, r3, #4
2000fd9c:	6313      	str	r3, [r2, #48]	; 0x30
2000fd9e:	4b1d      	ldr	r3, [pc, #116]	; (2000fe14 <MX_GPIO_Init+0x9c>)
2000fda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000fda2:	f003 0304 	and.w	r3, r3, #4
2000fda6:	60bb      	str	r3, [r7, #8]
2000fda8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2000fdaa:	2300      	movs	r3, #0
2000fdac:	607b      	str	r3, [r7, #4]
2000fdae:	4b19      	ldr	r3, [pc, #100]	; (2000fe14 <MX_GPIO_Init+0x9c>)
2000fdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000fdb2:	4a18      	ldr	r2, [pc, #96]	; (2000fe14 <MX_GPIO_Init+0x9c>)
2000fdb4:	f043 0302 	orr.w	r3, r3, #2
2000fdb8:	6313      	str	r3, [r2, #48]	; 0x30
2000fdba:	4b16      	ldr	r3, [pc, #88]	; (2000fe14 <MX_GPIO_Init+0x9c>)
2000fdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000fdbe:	f003 0302 	and.w	r3, r3, #2
2000fdc2:	607b      	str	r3, [r7, #4]
2000fdc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
2000fdc6:	2300      	movs	r3, #0
2000fdc8:	603b      	str	r3, [r7, #0]
2000fdca:	4b12      	ldr	r3, [pc, #72]	; (2000fe14 <MX_GPIO_Init+0x9c>)
2000fdcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000fdce:	4a11      	ldr	r2, [pc, #68]	; (2000fe14 <MX_GPIO_Init+0x9c>)
2000fdd0:	f043 0301 	orr.w	r3, r3, #1
2000fdd4:	6313      	str	r3, [r2, #48]	; 0x30
2000fdd6:	4b0f      	ldr	r3, [pc, #60]	; (2000fe14 <MX_GPIO_Init+0x9c>)
2000fdd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000fdda:	f003 0301 	and.w	r3, r3, #1
2000fdde:	603b      	str	r3, [r7, #0]
2000fde0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
2000fde2:	2201      	movs	r2, #1
2000fde4:	f44f 7100 	mov.w	r1, #512	; 0x200
2000fde8:	480b      	ldr	r0, [pc, #44]	; (2000fe18 <MX_GPIO_Init+0xa0>)
2000fdea:	f004 ff03 	bl	20014bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
2000fdee:	f44f 7300 	mov.w	r3, #512	; 0x200
2000fdf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000fdf4:	2301      	movs	r3, #1
2000fdf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000fdf8:	2300      	movs	r3, #0
2000fdfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000fdfc:	2303      	movs	r3, #3
2000fdfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
2000fe00:	f107 030c 	add.w	r3, r7, #12
2000fe04:	4619      	mov	r1, r3
2000fe06:	4804      	ldr	r0, [pc, #16]	; (2000fe18 <MX_GPIO_Init+0xa0>)
2000fe08:	f004 fc58 	bl	200146bc <HAL_GPIO_Init>

}
2000fe0c:	bf00      	nop
2000fe0e:	3720      	adds	r7, #32
2000fe10:	46bd      	mov	sp, r7
2000fe12:	bd80      	pop	{r7, pc}
2000fe14:	40023800 	.word	0x40023800
2000fe18:	40020400 	.word	0x40020400

2000fe1c <my_memcmp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int	my_memcmp(void *dest, void *src, int size)
{
2000fe1c:	b480      	push	{r7}
2000fe1e:	b087      	sub	sp, #28
2000fe20:	af00      	add	r7, sp, #0
2000fe22:	60f8      	str	r0, [r7, #12]
2000fe24:	60b9      	str	r1, [r7, #8]
2000fe26:	607a      	str	r2, [r7, #4]
    unsigned char *p = dest;
2000fe28:	68fb      	ldr	r3, [r7, #12]
2000fe2a:	617b      	str	r3, [r7, #20]
    unsigned char *q = src;
2000fe2c:	68bb      	ldr	r3, [r7, #8]
2000fe2e:	613b      	str	r3, [r7, #16]

    while (size > 0)
2000fe30:	e015      	b.n	2000fe5e <my_memcmp+0x42>
    {
        if (*p != *q)
2000fe32:	697b      	ldr	r3, [r7, #20]
2000fe34:	781a      	ldrb	r2, [r3, #0]
2000fe36:	693b      	ldr	r3, [r7, #16]
2000fe38:	781b      	ldrb	r3, [r3, #0]
2000fe3a:	429a      	cmp	r2, r3
2000fe3c:	d006      	beq.n	2000fe4c <my_memcmp+0x30>
        {
            return (*p - *q);
2000fe3e:	697b      	ldr	r3, [r7, #20]
2000fe40:	781b      	ldrb	r3, [r3, #0]
2000fe42:	461a      	mov	r2, r3
2000fe44:	693b      	ldr	r3, [r7, #16]
2000fe46:	781b      	ldrb	r3, [r3, #0]
2000fe48:	1ad3      	subs	r3, r2, r3
2000fe4a:	e00c      	b.n	2000fe66 <my_memcmp+0x4a>
        }
        size--;
2000fe4c:	687b      	ldr	r3, [r7, #4]
2000fe4e:	3b01      	subs	r3, #1
2000fe50:	607b      	str	r3, [r7, #4]
        p++;
2000fe52:	697b      	ldr	r3, [r7, #20]
2000fe54:	3301      	adds	r3, #1
2000fe56:	617b      	str	r3, [r7, #20]
        q++;
2000fe58:	693b      	ldr	r3, [r7, #16]
2000fe5a:	3301      	adds	r3, #1
2000fe5c:	613b      	str	r3, [r7, #16]
    while (size > 0)
2000fe5e:	687b      	ldr	r3, [r7, #4]
2000fe60:	2b00      	cmp	r3, #0
2000fe62:	dce6      	bgt.n	2000fe32 <my_memcmp+0x16>
    }
    return 0;
2000fe64:	2300      	movs	r3, #0
}
2000fe66:	4618      	mov	r0, r3
2000fe68:	371c      	adds	r7, #28
2000fe6a:	46bd      	mov	sp, r7
2000fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fe70:	4770      	bx	lr
	...

2000fe74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2000fe74:	b580      	push	{r7, lr}
2000fe76:	b084      	sub	sp, #16
2000fe78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint32_t sectorsNeeded = 0;
2000fe7a:	2300      	movs	r3, #0
2000fe7c:	60bb      	str	r3, [r7, #8]
  uint32_t currentSector = 0;
2000fe7e:	2300      	movs	r3, #0
2000fe80:	60fb      	str	r3, [r7, #12]
  uint32_t remainingBytes = 0;
2000fe82:	2300      	movs	r3, #0
2000fe84:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
2000fe86:	f000 fded 	bl	20010a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000fe8a:	f000 f87d 	bl	2000ff88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
2000fe8e:	f7ff ff73 	bl	2000fd78 <MX_GPIO_Init>
  MX_SPI2_Init();
2000fe92:	f000 f8f3 	bl	2001007c <MX_SPI2_Init>

  /*
   * In this part the flash management primitives is verified
   */
  /* 1 - Verify that the identifier is correctly read */
  if(sFLASH_MX25L6433F_ID != sFLASH_ReadID())
2000fe96:	f000 fb1b 	bl	200104d0 <sFLASH_ReadID>
2000fe9a:	4602      	mov	r2, r0
2000fe9c:	4b37      	ldr	r3, [pc, #220]	; (2000ff7c <main+0x108>)
2000fe9e:	429a      	cmp	r2, r3
2000fea0:	d001      	beq.n	2000fea6 <main+0x32>
  {
    Error_Handler();
2000fea2:	f000 f8e3 	bl	2001006c <Error_Handler>
  }

  /* 2 - determines how many sectors are needed to write the test image */
  sectorsNeeded = sizeof(image_test) / sFLASH_SPI_SECTOR_SIZE;
2000fea6:	230e      	movs	r3, #14
2000fea8:	60bb      	str	r3, [r7, #8]
  remainingBytes = (sizeof(image_test) % sFLASH_SPI_SECTOR_SIZE);
2000feaa:	f44f 7380 	mov.w	r3, #256	; 0x100
2000feae:	607b      	str	r3, [r7, #4]

  /* 3 - erases and writes the needed sectors */
  for (currentSector = 0; currentSector < sectorsNeeded; currentSector++)
2000feb0:	2300      	movs	r3, #0
2000feb2:	60fb      	str	r3, [r7, #12]
2000feb4:	e012      	b.n	2000fedc <main+0x68>
  {
    /* 3.1 - erases current sector */
  	sFLASH_EraseSector(currentSector * sFLASH_SPI_SECTOR_SIZE);
2000feb6:	68fb      	ldr	r3, [r7, #12]
2000feb8:	031b      	lsls	r3, r3, #12
2000feba:	4618      	mov	r0, r3
2000febc:	f000 f9a0 	bl	20010200 <sFLASH_EraseSector>
  	/* 3.2 - writes current sector */
  	sFLASH_WriteBuffer(&image_test[currentSector * sFLASH_SPI_SECTOR_SIZE], currentSector * sFLASH_SPI_SECTOR_SIZE, sFLASH_SPI_SECTOR_SIZE);
2000fec0:	68fb      	ldr	r3, [r7, #12]
2000fec2:	031b      	lsls	r3, r3, #12
2000fec4:	4a2e      	ldr	r2, [pc, #184]	; (2000ff80 <main+0x10c>)
2000fec6:	1898      	adds	r0, r3, r2
2000fec8:	68fb      	ldr	r3, [r7, #12]
2000feca:	031b      	lsls	r3, r3, #12
2000fecc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2000fed0:	4619      	mov	r1, r3
2000fed2:	f000 fa5f 	bl	20010394 <sFLASH_WriteBuffer>
  for (currentSector = 0; currentSector < sectorsNeeded; currentSector++)
2000fed6:	68fb      	ldr	r3, [r7, #12]
2000fed8:	3301      	adds	r3, #1
2000feda:	60fb      	str	r3, [r7, #12]
2000fedc:	68fa      	ldr	r2, [r7, #12]
2000fede:	68bb      	ldr	r3, [r7, #8]
2000fee0:	429a      	cmp	r2, r3
2000fee2:	d3e8      	bcc.n	2000feb6 <main+0x42>
  }
  if(remainingBytes != 0)
2000fee4:	687b      	ldr	r3, [r7, #4]
2000fee6:	2b00      	cmp	r3, #0
2000fee8:	d00e      	beq.n	2000ff08 <main+0x94>
  {
  	/* 3.3 - erases last sector for the remaining bytes */
  	sFLASH_EraseSector(currentSector * sFLASH_SPI_SECTOR_SIZE);
2000feea:	68fb      	ldr	r3, [r7, #12]
2000feec:	031b      	lsls	r3, r3, #12
2000feee:	4618      	mov	r0, r3
2000fef0:	f000 f986 	bl	20010200 <sFLASH_EraseSector>
  	/* 3.4 - writes for the remaining bytes */
  	sFLASH_WriteBuffer(&image_test[currentSector * sFLASH_SPI_SECTOR_SIZE], currentSector * sFLASH_SPI_SECTOR_SIZE, remainingBytes);
2000fef4:	68fb      	ldr	r3, [r7, #12]
2000fef6:	031b      	lsls	r3, r3, #12
2000fef8:	4a21      	ldr	r2, [pc, #132]	; (2000ff80 <main+0x10c>)
2000fefa:	1898      	adds	r0, r3, r2
2000fefc:	68fb      	ldr	r3, [r7, #12]
2000fefe:	031b      	lsls	r3, r3, #12
2000ff00:	687a      	ldr	r2, [r7, #4]
2000ff02:	4619      	mov	r1, r3
2000ff04:	f000 fa46 	bl	20010394 <sFLASH_WriteBuffer>
  }

    /* 4 - reads and checks the selected sectors */
  for (currentSector = 0; currentSector < sectorsNeeded; currentSector++)
2000ff08:	2300      	movs	r3, #0
2000ff0a:	60fb      	str	r3, [r7, #12]
2000ff0c:	e019      	b.n	2000ff42 <main+0xce>
  {
  	/* 4.1 - reads current sector */
  	sFLASH_ReadBuffer(sector_data, currentSector * sFLASH_SPI_SECTOR_SIZE, sFLASH_SPI_SECTOR_SIZE);
2000ff0e:	68fb      	ldr	r3, [r7, #12]
2000ff10:	031b      	lsls	r3, r3, #12
2000ff12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2000ff16:	4619      	mov	r1, r3
2000ff18:	481a      	ldr	r0, [pc, #104]	; (2000ff84 <main+0x110>)
2000ff1a:	f000 fa03 	bl	20010324 <sFLASH_ReadBuffer>
  	/* 4.2 - checks current sector */
  	if(my_memcmp((void *)sector_data, (void *)&image_test[currentSector * sFLASH_SPI_SECTOR_SIZE], sFLASH_SPI_SECTOR_SIZE) != 0)
2000ff1e:	68fb      	ldr	r3, [r7, #12]
2000ff20:	031b      	lsls	r3, r3, #12
2000ff22:	4a17      	ldr	r2, [pc, #92]	; (2000ff80 <main+0x10c>)
2000ff24:	4413      	add	r3, r2
2000ff26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2000ff2a:	4619      	mov	r1, r3
2000ff2c:	4815      	ldr	r0, [pc, #84]	; (2000ff84 <main+0x110>)
2000ff2e:	f7ff ff75 	bl	2000fe1c <my_memcmp>
2000ff32:	4603      	mov	r3, r0
2000ff34:	2b00      	cmp	r3, #0
2000ff36:	d001      	beq.n	2000ff3c <main+0xc8>
  	//if(memcmp(buffer_read, buffer_test, sFLASH_SPI_SECTOR_SIZE) != 0)
  	{
  		Error_Handler();
2000ff38:	f000 f898 	bl	2001006c <Error_Handler>
  for (currentSector = 0; currentSector < sectorsNeeded; currentSector++)
2000ff3c:	68fb      	ldr	r3, [r7, #12]
2000ff3e:	3301      	adds	r3, #1
2000ff40:	60fb      	str	r3, [r7, #12]
2000ff42:	68fa      	ldr	r2, [r7, #12]
2000ff44:	68bb      	ldr	r3, [r7, #8]
2000ff46:	429a      	cmp	r2, r3
2000ff48:	d3e1      	bcc.n	2000ff0e <main+0x9a>
  	}
  }
  if(remainingBytes != 0)
2000ff4a:	687b      	ldr	r3, [r7, #4]
2000ff4c:	2b00      	cmp	r3, #0
2000ff4e:	d014      	beq.n	2000ff7a <main+0x106>
  {
    /* 4.3 - reads current sector */
  	sFLASH_ReadBuffer(sector_data, currentSector * sFLASH_SPI_SECTOR_SIZE, remainingBytes);
2000ff50:	68fb      	ldr	r3, [r7, #12]
2000ff52:	031b      	lsls	r3, r3, #12
2000ff54:	687a      	ldr	r2, [r7, #4]
2000ff56:	4619      	mov	r1, r3
2000ff58:	480a      	ldr	r0, [pc, #40]	; (2000ff84 <main+0x110>)
2000ff5a:	f000 f9e3 	bl	20010324 <sFLASH_ReadBuffer>
  	/* 4.4 - checks current sector */
  	if(my_memcmp((void *)sector_data, (void *)&image_test[currentSector * sFLASH_SPI_SECTOR_SIZE], remainingBytes) != 0)
2000ff5e:	68fb      	ldr	r3, [r7, #12]
2000ff60:	031b      	lsls	r3, r3, #12
2000ff62:	4a07      	ldr	r2, [pc, #28]	; (2000ff80 <main+0x10c>)
2000ff64:	4413      	add	r3, r2
2000ff66:	687a      	ldr	r2, [r7, #4]
2000ff68:	4619      	mov	r1, r3
2000ff6a:	4806      	ldr	r0, [pc, #24]	; (2000ff84 <main+0x110>)
2000ff6c:	f7ff ff56 	bl	2000fe1c <my_memcmp>
2000ff70:	4603      	mov	r3, r0
2000ff72:	2b00      	cmp	r3, #0
2000ff74:	d001      	beq.n	2000ff7a <main+0x106>
  	{
      Error_Handler();
2000ff76:	f000 f879 	bl	2001006c <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
2000ff7a:	e7fe      	b.n	2000ff7a <main+0x106>
2000ff7c:	00c22017 	.word	0x00c22017
2000ff80:	200003d8 	.word	0x200003d8
2000ff84:	2000e570 	.word	0x2000e570

2000ff88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2000ff88:	b580      	push	{r7, lr}
2000ff8a:	b094      	sub	sp, #80	; 0x50
2000ff8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2000ff8e:	f107 031c 	add.w	r3, r7, #28
2000ff92:	2234      	movs	r2, #52	; 0x34
2000ff94:	2100      	movs	r1, #0
2000ff96:	4618      	mov	r0, r3
2000ff98:	f009 ff18 	bl	20019dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2000ff9c:	f107 0308 	add.w	r3, r7, #8
2000ffa0:	2200      	movs	r2, #0
2000ffa2:	601a      	str	r2, [r3, #0]
2000ffa4:	605a      	str	r2, [r3, #4]
2000ffa6:	609a      	str	r2, [r3, #8]
2000ffa8:	60da      	str	r2, [r3, #12]
2000ffaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
2000ffac:	2300      	movs	r3, #0
2000ffae:	607b      	str	r3, [r7, #4]
2000ffb0:	4b2c      	ldr	r3, [pc, #176]	; (20010064 <SystemClock_Config+0xdc>)
2000ffb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000ffb4:	4a2b      	ldr	r2, [pc, #172]	; (20010064 <SystemClock_Config+0xdc>)
2000ffb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000ffba:	6413      	str	r3, [r2, #64]	; 0x40
2000ffbc:	4b29      	ldr	r3, [pc, #164]	; (20010064 <SystemClock_Config+0xdc>)
2000ffbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000ffc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000ffc4:	607b      	str	r3, [r7, #4]
2000ffc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000ffc8:	2300      	movs	r3, #0
2000ffca:	603b      	str	r3, [r7, #0]
2000ffcc:	4b26      	ldr	r3, [pc, #152]	; (20010068 <SystemClock_Config+0xe0>)
2000ffce:	681b      	ldr	r3, [r3, #0]
2000ffd0:	4a25      	ldr	r2, [pc, #148]	; (20010068 <SystemClock_Config+0xe0>)
2000ffd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
2000ffd6:	6013      	str	r3, [r2, #0]
2000ffd8:	4b23      	ldr	r3, [pc, #140]	; (20010068 <SystemClock_Config+0xe0>)
2000ffda:	681b      	ldr	r3, [r3, #0]
2000ffdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
2000ffe0:	603b      	str	r3, [r7, #0]
2000ffe2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
2000ffe4:	2302      	movs	r3, #2
2000ffe6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
2000ffe8:	2301      	movs	r3, #1
2000ffea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
2000ffec:	2310      	movs	r3, #16
2000ffee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2000fff0:	2302      	movs	r3, #2
2000fff2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
2000fff4:	2300      	movs	r3, #0
2000fff6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
2000fff8:	2308      	movs	r3, #8
2000fffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
2000fffc:	23b4      	movs	r3, #180	; 0xb4
2000fffe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20010000:	2302      	movs	r3, #2
20010002:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
20010004:	2302      	movs	r3, #2
20010006:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
20010008:	2302      	movs	r3, #2
2001000a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2001000c:	f107 031c 	add.w	r3, r7, #28
20010010:	4618      	mov	r0, r3
20010012:	f007 f947 	bl	200172a4 <HAL_RCC_OscConfig>
20010016:	4603      	mov	r3, r0
20010018:	2b00      	cmp	r3, #0
2001001a:	d001      	beq.n	20010020 <SystemClock_Config+0x98>
  {
    Error_Handler();
2001001c:	f000 f826 	bl	2001006c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
20010020:	f005 f8da 	bl	200151d8 <HAL_PWREx_EnableOverDrive>
20010024:	4603      	mov	r3, r0
20010026:	2b00      	cmp	r3, #0
20010028:	d001      	beq.n	2001002e <SystemClock_Config+0xa6>
  {
    Error_Handler();
2001002a:	f000 f81f 	bl	2001006c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2001002e:	230f      	movs	r3, #15
20010030:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20010032:	2302      	movs	r3, #2
20010034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20010036:	2300      	movs	r3, #0
20010038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
2001003a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
2001003e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20010040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20010044:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
20010046:	f107 0308 	add.w	r3, r7, #8
2001004a:	2105      	movs	r1, #5
2001004c:	4618      	mov	r0, r3
2001004e:	f005 fc2d 	bl	200158ac <HAL_RCC_ClockConfig>
20010052:	4603      	mov	r3, r0
20010054:	2b00      	cmp	r3, #0
20010056:	d001      	beq.n	2001005c <SystemClock_Config+0xd4>
  {
    Error_Handler();
20010058:	f000 f808 	bl	2001006c <Error_Handler>
  }
}
2001005c:	bf00      	nop
2001005e:	3750      	adds	r7, #80	; 0x50
20010060:	46bd      	mov	sp, r7
20010062:	bd80      	pop	{r7, pc}
20010064:	40023800 	.word	0x40023800
20010068:	40007000 	.word	0x40007000

2001006c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
2001006c:	b480      	push	{r7}
2001006e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
20010070:	bf00      	nop
20010072:	46bd      	mov	sp, r7
20010074:	f85d 7b04 	ldr.w	r7, [sp], #4
20010078:	4770      	bx	lr
	...

2001007c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
2001007c:	b580      	push	{r7, lr}
2001007e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
20010080:	4b17      	ldr	r3, [pc, #92]	; (200100e0 <MX_SPI2_Init+0x64>)
20010082:	4a18      	ldr	r2, [pc, #96]	; (200100e4 <MX_SPI2_Init+0x68>)
20010084:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
20010086:	4b16      	ldr	r3, [pc, #88]	; (200100e0 <MX_SPI2_Init+0x64>)
20010088:	f44f 7282 	mov.w	r2, #260	; 0x104
2001008c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
2001008e:	4b14      	ldr	r3, [pc, #80]	; (200100e0 <MX_SPI2_Init+0x64>)
20010090:	2200      	movs	r2, #0
20010092:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
20010094:	4b12      	ldr	r3, [pc, #72]	; (200100e0 <MX_SPI2_Init+0x64>)
20010096:	2200      	movs	r2, #0
20010098:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
2001009a:	4b11      	ldr	r3, [pc, #68]	; (200100e0 <MX_SPI2_Init+0x64>)
2001009c:	2200      	movs	r2, #0
2001009e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
200100a0:	4b0f      	ldr	r3, [pc, #60]	; (200100e0 <MX_SPI2_Init+0x64>)
200100a2:	2200      	movs	r2, #0
200100a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
200100a6:	4b0e      	ldr	r3, [pc, #56]	; (200100e0 <MX_SPI2_Init+0x64>)
200100a8:	f44f 7200 	mov.w	r2, #512	; 0x200
200100ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
200100ae:	4b0c      	ldr	r3, [pc, #48]	; (200100e0 <MX_SPI2_Init+0x64>)
200100b0:	2200      	movs	r2, #0
200100b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
200100b4:	4b0a      	ldr	r3, [pc, #40]	; (200100e0 <MX_SPI2_Init+0x64>)
200100b6:	2200      	movs	r2, #0
200100b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
200100ba:	4b09      	ldr	r3, [pc, #36]	; (200100e0 <MX_SPI2_Init+0x64>)
200100bc:	2200      	movs	r2, #0
200100be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200100c0:	4b07      	ldr	r3, [pc, #28]	; (200100e0 <MX_SPI2_Init+0x64>)
200100c2:	2200      	movs	r2, #0
200100c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
200100c6:	4b06      	ldr	r3, [pc, #24]	; (200100e0 <MX_SPI2_Init+0x64>)
200100c8:	220a      	movs	r2, #10
200100ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
200100cc:	4804      	ldr	r0, [pc, #16]	; (200100e0 <MX_SPI2_Init+0x64>)
200100ce:	f007 fbdf 	bl	20017890 <HAL_SPI_Init>
200100d2:	4603      	mov	r3, r0
200100d4:	2b00      	cmp	r3, #0
200100d6:	d001      	beq.n	200100dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
200100d8:	f7ff ffc8 	bl	2001006c <Error_Handler>
  }

}
200100dc:	bf00      	nop
200100de:	bd80      	pop	{r7, pc}
200100e0:	2000f574 	.word	0x2000f574
200100e4:	40003800 	.word	0x40003800

200100e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
200100e8:	b580      	push	{r7, lr}
200100ea:	b08a      	sub	sp, #40	; 0x28
200100ec:	af00      	add	r7, sp, #0
200100ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
200100f0:	f107 0314 	add.w	r3, r7, #20
200100f4:	2200      	movs	r2, #0
200100f6:	601a      	str	r2, [r3, #0]
200100f8:	605a      	str	r2, [r3, #4]
200100fa:	609a      	str	r2, [r3, #8]
200100fc:	60da      	str	r2, [r3, #12]
200100fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
20010100:	687b      	ldr	r3, [r7, #4]
20010102:	681b      	ldr	r3, [r3, #0]
20010104:	4a28      	ldr	r2, [pc, #160]	; (200101a8 <HAL_SPI_MspInit+0xc0>)
20010106:	4293      	cmp	r3, r2
20010108:	d14a      	bne.n	200101a0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
2001010a:	2300      	movs	r3, #0
2001010c:	613b      	str	r3, [r7, #16]
2001010e:	4b27      	ldr	r3, [pc, #156]	; (200101ac <HAL_SPI_MspInit+0xc4>)
20010110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20010112:	4a26      	ldr	r2, [pc, #152]	; (200101ac <HAL_SPI_MspInit+0xc4>)
20010114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20010118:	6413      	str	r3, [r2, #64]	; 0x40
2001011a:	4b24      	ldr	r3, [pc, #144]	; (200101ac <HAL_SPI_MspInit+0xc4>)
2001011c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2001011e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20010122:	613b      	str	r3, [r7, #16]
20010124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
20010126:	2300      	movs	r3, #0
20010128:	60fb      	str	r3, [r7, #12]
2001012a:	4b20      	ldr	r3, [pc, #128]	; (200101ac <HAL_SPI_MspInit+0xc4>)
2001012c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2001012e:	4a1f      	ldr	r2, [pc, #124]	; (200101ac <HAL_SPI_MspInit+0xc4>)
20010130:	f043 0304 	orr.w	r3, r3, #4
20010134:	6313      	str	r3, [r2, #48]	; 0x30
20010136:	4b1d      	ldr	r3, [pc, #116]	; (200101ac <HAL_SPI_MspInit+0xc4>)
20010138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2001013a:	f003 0304 	and.w	r3, r3, #4
2001013e:	60fb      	str	r3, [r7, #12]
20010140:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20010142:	2300      	movs	r3, #0
20010144:	60bb      	str	r3, [r7, #8]
20010146:	4b19      	ldr	r3, [pc, #100]	; (200101ac <HAL_SPI_MspInit+0xc4>)
20010148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2001014a:	4a18      	ldr	r2, [pc, #96]	; (200101ac <HAL_SPI_MspInit+0xc4>)
2001014c:	f043 0302 	orr.w	r3, r3, #2
20010150:	6313      	str	r3, [r2, #48]	; 0x30
20010152:	4b16      	ldr	r3, [pc, #88]	; (200101ac <HAL_SPI_MspInit+0xc4>)
20010154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20010156:	f003 0302 	and.w	r3, r3, #2
2001015a:	60bb      	str	r3, [r7, #8]
2001015c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = FLASH_MISO_Pin|FLASH_MOSI_Pin;
2001015e:	230c      	movs	r3, #12
20010160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20010162:	2302      	movs	r3, #2
20010164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
20010166:	2302      	movs	r3, #2
20010168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2001016a:	2303      	movs	r3, #3
2001016c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
2001016e:	2305      	movs	r3, #5
20010170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20010172:	f107 0314 	add.w	r3, r7, #20
20010176:	4619      	mov	r1, r3
20010178:	480d      	ldr	r0, [pc, #52]	; (200101b0 <HAL_SPI_MspInit+0xc8>)
2001017a:	f004 fa9f 	bl	200146bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_SCK_Pin;
2001017e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
20010182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20010184:	2302      	movs	r3, #2
20010186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
20010188:	2302      	movs	r3, #2
2001018a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2001018c:	2303      	movs	r3, #3
2001018e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
20010190:	2305      	movs	r3, #5
20010192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FLASH_SCK_GPIO_Port, &GPIO_InitStruct);
20010194:	f107 0314 	add.w	r3, r7, #20
20010198:	4619      	mov	r1, r3
2001019a:	4806      	ldr	r0, [pc, #24]	; (200101b4 <HAL_SPI_MspInit+0xcc>)
2001019c:	f004 fa8e 	bl	200146bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
200101a0:	bf00      	nop
200101a2:	3728      	adds	r7, #40	; 0x28
200101a4:	46bd      	mov	sp, r7
200101a6:	bd80      	pop	{r7, pc}
200101a8:	40003800 	.word	0x40003800
200101ac:	40023800 	.word	0x40023800
200101b0:	40020800 	.word	0x40020800
200101b4:	40020400 	.word	0x40020400

200101b8 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
200101b8:	b580      	push	{r7, lr}
200101ba:	b082      	sub	sp, #8
200101bc:	af00      	add	r7, sp, #0
200101be:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI2)
200101c0:	687b      	ldr	r3, [r7, #4]
200101c2:	681b      	ldr	r3, [r3, #0]
200101c4:	4a0a      	ldr	r2, [pc, #40]	; (200101f0 <HAL_SPI_MspDeInit+0x38>)
200101c6:	4293      	cmp	r3, r2
200101c8:	d10e      	bne.n	200101e8 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
200101ca:	4b0a      	ldr	r3, [pc, #40]	; (200101f4 <HAL_SPI_MspDeInit+0x3c>)
200101cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200101ce:	4a09      	ldr	r2, [pc, #36]	; (200101f4 <HAL_SPI_MspDeInit+0x3c>)
200101d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
200101d4:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(GPIOC, FLASH_MISO_Pin|FLASH_MOSI_Pin);
200101d6:	210c      	movs	r1, #12
200101d8:	4807      	ldr	r0, [pc, #28]	; (200101f8 <HAL_SPI_MspDeInit+0x40>)
200101da:	f004 fc01 	bl	200149e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(FLASH_SCK_GPIO_Port, FLASH_SCK_Pin);
200101de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200101e2:	4806      	ldr	r0, [pc, #24]	; (200101fc <HAL_SPI_MspDeInit+0x44>)
200101e4:	f004 fbfc 	bl	200149e0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
200101e8:	bf00      	nop
200101ea:	3708      	adds	r7, #8
200101ec:	46bd      	mov	sp, r7
200101ee:	bd80      	pop	{r7, pc}
200101f0:	40003800 	.word	0x40003800
200101f4:	40023800 	.word	0x40023800
200101f8:	40020800 	.word	0x40020800
200101fc:	40020400 	.word	0x40020400

20010200 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
20010200:	b580      	push	{r7, lr}
20010202:	b084      	sub	sp, #16
20010204:	af00      	add	r7, sp, #0
20010206:	6078      	str	r0, [r7, #4]
	uint8_t txData[4];

	txData[0] = FLASH_CMD_SE;
20010208:	2320      	movs	r3, #32
2001020a:	733b      	strb	r3, [r7, #12]
	txData[1] = (SectorAddr & 0xFF0000) >> 16;	/* high nibble address byte to write to */
2001020c:	687b      	ldr	r3, [r7, #4]
2001020e:	0c1b      	lsrs	r3, r3, #16
20010210:	b2db      	uxtb	r3, r3
20010212:	737b      	strb	r3, [r7, #13]
	txData[2] = (SectorAddr & 0xFF00) >> 8;		/* medium nibble address byte to write to */
20010214:	687b      	ldr	r3, [r7, #4]
20010216:	0a1b      	lsrs	r3, r3, #8
20010218:	b2db      	uxtb	r3, r3
2001021a:	73bb      	strb	r3, [r7, #14]
	txData[3] = SectorAddr & 0xFF;				/* low nibble address byte to write to */
2001021c:	687b      	ldr	r3, [r7, #4]
2001021e:	b2db      	uxtb	r3, r3
20010220:	73fb      	strb	r3, [r7, #15]

	/* Send write enable instruction */
	sFLASH_WriteEnable();
20010222:	f000 f983 	bl	2001052c <sFLASH_WriteEnable>

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20010226:	2200      	movs	r2, #0
20010228:	f44f 7100 	mov.w	r1, #512	; 0x200
2001022c:	480b      	ldr	r0, [pc, #44]	; (2001025c <sFLASH_EraseSector+0x5c>)
2001022e:	f004 fce1 	bl	20014bf4 <HAL_GPIO_WritePin>

	/* Send Sector Erase instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20010232:	f107 010c 	add.w	r1, r7, #12
20010236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2001023a:	2204      	movs	r2, #4
2001023c:	4808      	ldr	r0, [pc, #32]	; (20010260 <sFLASH_EraseSector+0x60>)
2001023e:	f007 fbc7 	bl	200179d0 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20010242:	2201      	movs	r2, #1
20010244:	f44f 7100 	mov.w	r1, #512	; 0x200
20010248:	4804      	ldr	r0, [pc, #16]	; (2001025c <sFLASH_EraseSector+0x5c>)
2001024a:	f004 fcd3 	bl	20014bf4 <HAL_GPIO_WritePin>

	/*!< Wait the end of Flash writing */
	sFLASH_WaitForWriteEnd();
2001024e:	f000 f98d 	bl	2001056c <sFLASH_WaitForWriteEnd>
}
20010252:	bf00      	nop
20010254:	3710      	adds	r7, #16
20010256:	46bd      	mov	sp, r7
20010258:	bd80      	pop	{r7, pc}
2001025a:	bf00      	nop
2001025c:	40020400 	.word	0x40020400
20010260:	2000f574 	.word	0x2000f574

20010264 <sFLASH_EraseChip>:
  * @brief  Erases the entire FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_EraseChip(void)
{
20010264:	b580      	push	{r7, lr}
20010266:	b082      	sub	sp, #8
20010268:	af00      	add	r7, sp, #0
	uint8_t txData[1];

	txData[0] = FLASH_CMD_CE;
2001026a:	2360      	movs	r3, #96	; 0x60
2001026c:	713b      	strb	r3, [r7, #4]

	/* Send write enable instruction */
	sFLASH_WriteEnable();
2001026e:	f000 f95d 	bl	2001052c <sFLASH_WriteEnable>

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20010272:	2200      	movs	r2, #0
20010274:	f44f 7100 	mov.w	r1, #512	; 0x200
20010278:	480a      	ldr	r0, [pc, #40]	; (200102a4 <sFLASH_EraseChip+0x40>)
2001027a:	f004 fcbb 	bl	20014bf4 <HAL_GPIO_WritePin>

	/* Send Bulk Erase instruction  */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
2001027e:	1d39      	adds	r1, r7, #4
20010280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20010284:	2201      	movs	r2, #1
20010286:	4808      	ldr	r0, [pc, #32]	; (200102a8 <sFLASH_EraseChip+0x44>)
20010288:	f007 fba2 	bl	200179d0 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
2001028c:	2201      	movs	r2, #1
2001028e:	f44f 7100 	mov.w	r1, #512	; 0x200
20010292:	4804      	ldr	r0, [pc, #16]	; (200102a4 <sFLASH_EraseChip+0x40>)
20010294:	f004 fcae 	bl	20014bf4 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	sFLASH_WaitForWriteEnd();
20010298:	f000 f968 	bl	2001056c <sFLASH_WaitForWriteEnd>
}
2001029c:	bf00      	nop
2001029e:	3708      	adds	r7, #8
200102a0:	46bd      	mov	sp, r7
200102a2:	bd80      	pop	{r7, pc}
200102a4:	40020400 	.word	0x40020400
200102a8:	2000f574 	.word	0x2000f574

200102ac <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint32_t NumByteToWrite)
{
200102ac:	b580      	push	{r7, lr}
200102ae:	b086      	sub	sp, #24
200102b0:	af00      	add	r7, sp, #0
200102b2:	60f8      	str	r0, [r7, #12]
200102b4:	60b9      	str	r1, [r7, #8]
200102b6:	607a      	str	r2, [r7, #4]
	uint8_t txData[4];

	txData[0] = FLASH_CMD_PP;
200102b8:	2302      	movs	r3, #2
200102ba:	753b      	strb	r3, [r7, #20]
	txData[1] = (WriteAddr & 0xFF0000) >> 16;	/* high nibble address byte to write to */
200102bc:	68bb      	ldr	r3, [r7, #8]
200102be:	0c1b      	lsrs	r3, r3, #16
200102c0:	b2db      	uxtb	r3, r3
200102c2:	757b      	strb	r3, [r7, #21]
	txData[2] = (WriteAddr & 0xFF00) >> 8;		/* medium nibble address byte to write to */
200102c4:	68bb      	ldr	r3, [r7, #8]
200102c6:	0a1b      	lsrs	r3, r3, #8
200102c8:	b2db      	uxtb	r3, r3
200102ca:	75bb      	strb	r3, [r7, #22]
	txData[3] = WriteAddr & 0xFF;				/* low nibble address byte to write to */
200102cc:	68bb      	ldr	r3, [r7, #8]
200102ce:	b2db      	uxtb	r3, r3
200102d0:	75fb      	strb	r3, [r7, #23]

	/* Enable the write access to the FLASH */
	sFLASH_WriteEnable();
200102d2:	f000 f92b 	bl	2001052c <sFLASH_WriteEnable>

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
200102d6:	2200      	movs	r2, #0
200102d8:	f44f 7100 	mov.w	r1, #512	; 0x200
200102dc:	480f      	ldr	r0, [pc, #60]	; (2001031c <sFLASH_WritePage+0x70>)
200102de:	f004 fc89 	bl	20014bf4 <HAL_GPIO_WritePin>

	/* Send "Write to Memory " instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
200102e2:	f107 0114 	add.w	r1, r7, #20
200102e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200102ea:	2204      	movs	r2, #4
200102ec:	480c      	ldr	r0, [pc, #48]	; (20010320 <sFLASH_WritePage+0x74>)
200102ee:	f007 fb6f 	bl	200179d0 <HAL_SPI_Transmit>

	/* Send data */
	HAL_SPI_Transmit(&hspi2, pBuffer, NumByteToWrite, HAL_MAX_DELAY);
200102f2:	687b      	ldr	r3, [r7, #4]
200102f4:	b29a      	uxth	r2, r3
200102f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200102fa:	68f9      	ldr	r1, [r7, #12]
200102fc:	4808      	ldr	r0, [pc, #32]	; (20010320 <sFLASH_WritePage+0x74>)
200102fe:	f007 fb67 	bl	200179d0 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20010302:	2201      	movs	r2, #1
20010304:	f44f 7100 	mov.w	r1, #512	; 0x200
20010308:	4804      	ldr	r0, [pc, #16]	; (2001031c <sFLASH_WritePage+0x70>)
2001030a:	f004 fc73 	bl	20014bf4 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	sFLASH_WaitForWriteEnd();
2001030e:	f000 f92d 	bl	2001056c <sFLASH_WaitForWriteEnd>
}
20010312:	bf00      	nop
20010314:	3718      	adds	r7, #24
20010316:	46bd      	mov	sp, r7
20010318:	bd80      	pop	{r7, pc}
2001031a:	bf00      	nop
2001031c:	40020400 	.word	0x40020400
20010320:	2000f574 	.word	0x2000f574

20010324 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
20010324:	b580      	push	{r7, lr}
20010326:	b086      	sub	sp, #24
20010328:	af00      	add	r7, sp, #0
2001032a:	60f8      	str	r0, [r7, #12]
2001032c:	60b9      	str	r1, [r7, #8]
2001032e:	607a      	str	r2, [r7, #4]
	uint8_t txData[4];

	txData[0] = FLASH_CMD_READ;
20010330:	2303      	movs	r3, #3
20010332:	753b      	strb	r3, [r7, #20]
	txData[1] = (ReadAddr & 0xFF0000) >> 16;	/* high nibble address byte to write to */
20010334:	68bb      	ldr	r3, [r7, #8]
20010336:	0c1b      	lsrs	r3, r3, #16
20010338:	b2db      	uxtb	r3, r3
2001033a:	757b      	strb	r3, [r7, #21]
	txData[2] = (ReadAddr & 0xFF00) >> 8;		/* medium nibble address byte to write to */
2001033c:	68bb      	ldr	r3, [r7, #8]
2001033e:	0a1b      	lsrs	r3, r3, #8
20010340:	b2db      	uxtb	r3, r3
20010342:	75bb      	strb	r3, [r7, #22]
	txData[3] = ReadAddr & 0xFF;				/* low nibble address byte to write to */
20010344:	68bb      	ldr	r3, [r7, #8]
20010346:	b2db      	uxtb	r3, r3
20010348:	75fb      	strb	r3, [r7, #23]

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
2001034a:	2200      	movs	r2, #0
2001034c:	f44f 7100 	mov.w	r1, #512	; 0x200
20010350:	480e      	ldr	r0, [pc, #56]	; (2001038c <sFLASH_ReadBuffer+0x68>)
20010352:	f004 fc4f 	bl	20014bf4 <HAL_GPIO_WritePin>

	/* Send "Read from Memory " instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20010356:	f107 0114 	add.w	r1, r7, #20
2001035a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2001035e:	2204      	movs	r2, #4
20010360:	480b      	ldr	r0, [pc, #44]	; (20010390 <sFLASH_ReadBuffer+0x6c>)
20010362:	f007 fb35 	bl	200179d0 <HAL_SPI_Transmit>

	/* Read data from the FLASH */
	HAL_SPI_Receive(&hspi2, pBuffer, NumByteToRead, HAL_MAX_DELAY);
20010366:	687b      	ldr	r3, [r7, #4]
20010368:	b29a      	uxth	r2, r3
2001036a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2001036e:	68f9      	ldr	r1, [r7, #12]
20010370:	4807      	ldr	r0, [pc, #28]	; (20010390 <sFLASH_ReadBuffer+0x6c>)
20010372:	f007 fc61 	bl	20017c38 <HAL_SPI_Receive>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20010376:	2201      	movs	r2, #1
20010378:	f44f 7100 	mov.w	r1, #512	; 0x200
2001037c:	4803      	ldr	r0, [pc, #12]	; (2001038c <sFLASH_ReadBuffer+0x68>)
2001037e:	f004 fc39 	bl	20014bf4 <HAL_GPIO_WritePin>
}
20010382:	bf00      	nop
20010384:	3718      	adds	r7, #24
20010386:	46bd      	mov	sp, r7
20010388:	bd80      	pop	{r7, pc}
2001038a:	bf00      	nop
2001038c:	40020400 	.word	0x40020400
20010390:	2000f574 	.word	0x2000f574

20010394 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint32_t NumByteToWrite)
{
20010394:	b580      	push	{r7, lr}
20010396:	b08a      	sub	sp, #40	; 0x28
20010398:	af00      	add	r7, sp, #0
2001039a:	60f8      	str	r0, [r7, #12]
2001039c:	60b9      	str	r1, [r7, #8]
2001039e:	607a      	str	r2, [r7, #4]
	uint32_t NumOfPage = 0;
200103a0:	2300      	movs	r3, #0
200103a2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t NumOfSingle = 0;
200103a4:	2300      	movs	r3, #0
200103a6:	623b      	str	r3, [r7, #32]
	uint32_t Addr = 0;
200103a8:	2300      	movs	r3, #0
200103aa:	61fb      	str	r3, [r7, #28]
	uint32_t count = 0;
200103ac:	2300      	movs	r3, #0
200103ae:	61bb      	str	r3, [r7, #24]
	uint32_t temp = 0;
200103b0:	2300      	movs	r3, #0
200103b2:	617b      	str	r3, [r7, #20]

	Addr = WriteAddr % sFLASH_SPI_PAGE_SIZE;
200103b4:	68bb      	ldr	r3, [r7, #8]
200103b6:	b2db      	uxtb	r3, r3
200103b8:	61fb      	str	r3, [r7, #28]
	count = sFLASH_SPI_PAGE_SIZE - Addr;
200103ba:	69fb      	ldr	r3, [r7, #28]
200103bc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
200103c0:	61bb      	str	r3, [r7, #24]
	NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGE_SIZE;
200103c2:	687b      	ldr	r3, [r7, #4]
200103c4:	0a1b      	lsrs	r3, r3, #8
200103c6:	627b      	str	r3, [r7, #36]	; 0x24
	NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGE_SIZE;
200103c8:	687b      	ldr	r3, [r7, #4]
200103ca:	b2db      	uxtb	r3, r3
200103cc:	623b      	str	r3, [r7, #32]

	if (Addr == 0) /* WriteAddr is sFLASH_PAGESIZE aligned  */
200103ce:	69fb      	ldr	r3, [r7, #28]
200103d0:	2b00      	cmp	r3, #0
200103d2:	d121      	bne.n	20010418 <sFLASH_WriteBuffer+0x84>
	{
		if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
200103d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200103d6:	2b00      	cmp	r3, #0
200103d8:	d113      	bne.n	20010402 <sFLASH_WriteBuffer+0x6e>
		{
			sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
200103da:	687a      	ldr	r2, [r7, #4]
200103dc:	68b9      	ldr	r1, [r7, #8]
200103de:	68f8      	ldr	r0, [r7, #12]
200103e0:	f7ff ff64 	bl	200102ac <sFLASH_WritePage>
			{
				sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
			}
		}
	}
}
200103e4:	e06f      	b.n	200104c6 <sFLASH_WriteBuffer+0x132>
				sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGE_SIZE);
200103e6:	f44f 7280 	mov.w	r2, #256	; 0x100
200103ea:	68b9      	ldr	r1, [r7, #8]
200103ec:	68f8      	ldr	r0, [r7, #12]
200103ee:	f7ff ff5d 	bl	200102ac <sFLASH_WritePage>
				WriteAddr +=  sFLASH_SPI_PAGE_SIZE;
200103f2:	68bb      	ldr	r3, [r7, #8]
200103f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
200103f8:	60bb      	str	r3, [r7, #8]
				pBuffer += sFLASH_SPI_PAGE_SIZE;
200103fa:	68fb      	ldr	r3, [r7, #12]
200103fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
20010400:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
20010402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20010404:	1e5a      	subs	r2, r3, #1
20010406:	627a      	str	r2, [r7, #36]	; 0x24
20010408:	2b00      	cmp	r3, #0
2001040a:	d1ec      	bne.n	200103e6 <sFLASH_WriteBuffer+0x52>
			sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
2001040c:	6a3a      	ldr	r2, [r7, #32]
2001040e:	68b9      	ldr	r1, [r7, #8]
20010410:	68f8      	ldr	r0, [r7, #12]
20010412:	f7ff ff4b 	bl	200102ac <sFLASH_WritePage>
}
20010416:	e056      	b.n	200104c6 <sFLASH_WriteBuffer+0x132>
		if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
20010418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2001041a:	2b00      	cmp	r3, #0
2001041c:	d120      	bne.n	20010460 <sFLASH_WriteBuffer+0xcc>
			if (NumOfSingle > count) /* (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
2001041e:	6a3a      	ldr	r2, [r7, #32]
20010420:	69bb      	ldr	r3, [r7, #24]
20010422:	429a      	cmp	r2, r3
20010424:	d916      	bls.n	20010454 <sFLASH_WriteBuffer+0xc0>
				temp = NumOfSingle - count;
20010426:	6a3a      	ldr	r2, [r7, #32]
20010428:	69bb      	ldr	r3, [r7, #24]
2001042a:	1ad3      	subs	r3, r2, r3
2001042c:	617b      	str	r3, [r7, #20]
				sFLASH_WritePage(pBuffer, WriteAddr, count);
2001042e:	69ba      	ldr	r2, [r7, #24]
20010430:	68b9      	ldr	r1, [r7, #8]
20010432:	68f8      	ldr	r0, [r7, #12]
20010434:	f7ff ff3a 	bl	200102ac <sFLASH_WritePage>
				WriteAddr +=  count;
20010438:	68ba      	ldr	r2, [r7, #8]
2001043a:	69bb      	ldr	r3, [r7, #24]
2001043c:	4413      	add	r3, r2
2001043e:	60bb      	str	r3, [r7, #8]
				pBuffer += count;
20010440:	68fa      	ldr	r2, [r7, #12]
20010442:	69bb      	ldr	r3, [r7, #24]
20010444:	4413      	add	r3, r2
20010446:	60fb      	str	r3, [r7, #12]
				sFLASH_WritePage(pBuffer, WriteAddr, temp);
20010448:	697a      	ldr	r2, [r7, #20]
2001044a:	68b9      	ldr	r1, [r7, #8]
2001044c:	68f8      	ldr	r0, [r7, #12]
2001044e:	f7ff ff2d 	bl	200102ac <sFLASH_WritePage>
}
20010452:	e038      	b.n	200104c6 <sFLASH_WriteBuffer+0x132>
				sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
20010454:	687a      	ldr	r2, [r7, #4]
20010456:	68b9      	ldr	r1, [r7, #8]
20010458:	68f8      	ldr	r0, [r7, #12]
2001045a:	f7ff ff27 	bl	200102ac <sFLASH_WritePage>
}
2001045e:	e032      	b.n	200104c6 <sFLASH_WriteBuffer+0x132>
			NumByteToWrite -= count;
20010460:	687a      	ldr	r2, [r7, #4]
20010462:	69bb      	ldr	r3, [r7, #24]
20010464:	1ad3      	subs	r3, r2, r3
20010466:	607b      	str	r3, [r7, #4]
			NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGE_SIZE;
20010468:	687b      	ldr	r3, [r7, #4]
2001046a:	0a1b      	lsrs	r3, r3, #8
2001046c:	627b      	str	r3, [r7, #36]	; 0x24
			NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGE_SIZE;
2001046e:	687b      	ldr	r3, [r7, #4]
20010470:	b2db      	uxtb	r3, r3
20010472:	623b      	str	r3, [r7, #32]
			sFLASH_WritePage(pBuffer, WriteAddr, count);
20010474:	69ba      	ldr	r2, [r7, #24]
20010476:	68b9      	ldr	r1, [r7, #8]
20010478:	68f8      	ldr	r0, [r7, #12]
2001047a:	f7ff ff17 	bl	200102ac <sFLASH_WritePage>
			WriteAddr +=  count;
2001047e:	68ba      	ldr	r2, [r7, #8]
20010480:	69bb      	ldr	r3, [r7, #24]
20010482:	4413      	add	r3, r2
20010484:	60bb      	str	r3, [r7, #8]
			pBuffer += count;
20010486:	68fa      	ldr	r2, [r7, #12]
20010488:	69bb      	ldr	r3, [r7, #24]
2001048a:	4413      	add	r3, r2
2001048c:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
2001048e:	e00d      	b.n	200104ac <sFLASH_WriteBuffer+0x118>
				sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGE_SIZE);
20010490:	f44f 7280 	mov.w	r2, #256	; 0x100
20010494:	68b9      	ldr	r1, [r7, #8]
20010496:	68f8      	ldr	r0, [r7, #12]
20010498:	f7ff ff08 	bl	200102ac <sFLASH_WritePage>
				WriteAddr +=  sFLASH_SPI_PAGE_SIZE;
2001049c:	68bb      	ldr	r3, [r7, #8]
2001049e:	f503 7380 	add.w	r3, r3, #256	; 0x100
200104a2:	60bb      	str	r3, [r7, #8]
				pBuffer += sFLASH_SPI_PAGE_SIZE;
200104a4:	68fb      	ldr	r3, [r7, #12]
200104a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
200104aa:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
200104ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200104ae:	1e5a      	subs	r2, r3, #1
200104b0:	627a      	str	r2, [r7, #36]	; 0x24
200104b2:	2b00      	cmp	r3, #0
200104b4:	d1ec      	bne.n	20010490 <sFLASH_WriteBuffer+0xfc>
			if (NumOfSingle != 0)
200104b6:	6a3b      	ldr	r3, [r7, #32]
200104b8:	2b00      	cmp	r3, #0
200104ba:	d004      	beq.n	200104c6 <sFLASH_WriteBuffer+0x132>
				sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
200104bc:	6a3a      	ldr	r2, [r7, #32]
200104be:	68b9      	ldr	r1, [r7, #8]
200104c0:	68f8      	ldr	r0, [r7, #12]
200104c2:	f7ff fef3 	bl	200102ac <sFLASH_WritePage>
}
200104c6:	bf00      	nop
200104c8:	3728      	adds	r7, #40	; 0x28
200104ca:	46bd      	mov	sp, r7
200104cc:	bd80      	pop	{r7, pc}
	...

200104d0 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
200104d0:	b580      	push	{r7, lr}
200104d2:	b082      	sub	sp, #8
200104d4:	af00      	add	r7, sp, #0
	uint8_t txData[1];
	uint8_t rxData[3];

	txData[0] = FLASH_CMD_RDID;
200104d6:	239f      	movs	r3, #159	; 0x9f
200104d8:	713b      	strb	r3, [r7, #4]

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
200104da:	2200      	movs	r2, #0
200104dc:	f44f 7100 	mov.w	r1, #512	; 0x200
200104e0:	4810      	ldr	r0, [pc, #64]	; (20010524 <sFLASH_ReadID+0x54>)
200104e2:	f004 fb87 	bl	20014bf4 <HAL_GPIO_WritePin>

	/* Send "RDID " instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
200104e6:	1d39      	adds	r1, r7, #4
200104e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200104ec:	2201      	movs	r2, #1
200104ee:	480e      	ldr	r0, [pc, #56]	; (20010528 <sFLASH_ReadID+0x58>)
200104f0:	f007 fa6e 	bl	200179d0 <HAL_SPI_Transmit>
	/* Receive ID value */
	HAL_SPI_Receive(&hspi2, rxData, sizeof(rxData), HAL_MAX_DELAY);
200104f4:	4639      	mov	r1, r7
200104f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200104fa:	2203      	movs	r2, #3
200104fc:	480a      	ldr	r0, [pc, #40]	; (20010528 <sFLASH_ReadID+0x58>)
200104fe:	f007 fb9b 	bl	20017c38 <HAL_SPI_Receive>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20010502:	2201      	movs	r2, #1
20010504:	f44f 7100 	mov.w	r1, #512	; 0x200
20010508:	4806      	ldr	r0, [pc, #24]	; (20010524 <sFLASH_ReadID+0x54>)
2001050a:	f004 fb73 	bl	20014bf4 <HAL_GPIO_WritePin>

	return (rxData[0] << 16) | (rxData[1] << 8) | rxData[2];
2001050e:	783b      	ldrb	r3, [r7, #0]
20010510:	041a      	lsls	r2, r3, #16
20010512:	787b      	ldrb	r3, [r7, #1]
20010514:	021b      	lsls	r3, r3, #8
20010516:	4313      	orrs	r3, r2
20010518:	78ba      	ldrb	r2, [r7, #2]
2001051a:	4313      	orrs	r3, r2
}
2001051c:	4618      	mov	r0, r3
2001051e:	3708      	adds	r7, #8
20010520:	46bd      	mov	sp, r7
20010522:	bd80      	pop	{r7, pc}
20010524:	40020400 	.word	0x40020400
20010528:	2000f574 	.word	0x2000f574

2001052c <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
2001052c:	b580      	push	{r7, lr}
2001052e:	b082      	sub	sp, #8
20010530:	af00      	add	r7, sp, #0
	uint8_t txData[1];

	txData[0] = FLASH_CMD_WREN;
20010532:	2306      	movs	r3, #6
20010534:	713b      	strb	r3, [r7, #4]

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20010536:	2200      	movs	r2, #0
20010538:	f44f 7100 	mov.w	r1, #512	; 0x200
2001053c:	4809      	ldr	r0, [pc, #36]	; (20010564 <sFLASH_WriteEnable+0x38>)
2001053e:	f004 fb59 	bl	20014bf4 <HAL_GPIO_WritePin>

	/* Send "Write Enable" instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20010542:	1d39      	adds	r1, r7, #4
20010544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20010548:	2201      	movs	r2, #1
2001054a:	4807      	ldr	r0, [pc, #28]	; (20010568 <sFLASH_WriteEnable+0x3c>)
2001054c:	f007 fa40 	bl	200179d0 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20010550:	2201      	movs	r2, #1
20010552:	f44f 7100 	mov.w	r1, #512	; 0x200
20010556:	4803      	ldr	r0, [pc, #12]	; (20010564 <sFLASH_WriteEnable+0x38>)
20010558:	f004 fb4c 	bl	20014bf4 <HAL_GPIO_WritePin>
}
2001055c:	bf00      	nop
2001055e:	3708      	adds	r7, #8
20010560:	46bd      	mov	sp, r7
20010562:	bd80      	pop	{r7, pc}
20010564:	40020400 	.word	0x40020400
20010568:	2000f574 	.word	0x2000f574

2001056c <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write operation has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
2001056c:	b580      	push	{r7, lr}
2001056e:	b082      	sub	sp, #8
20010570:	af00      	add	r7, sp, #0
	uint8_t txData[1];
	uint8_t rxData[1];

	txData[0] = FLASH_CMD_RDSR;
20010572:	2305      	movs	r3, #5
20010574:	713b      	strb	r3, [r7, #4]

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20010576:	2200      	movs	r2, #0
20010578:	f44f 7100 	mov.w	r1, #512	; 0x200
2001057c:	480f      	ldr	r0, [pc, #60]	; (200105bc <sFLASH_WaitForWriteEnd+0x50>)
2001057e:	f004 fb39 	bl	20014bf4 <HAL_GPIO_WritePin>

	/* Send "Read Status Register" instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20010582:	1d39      	adds	r1, r7, #4
20010584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20010588:	2201      	movs	r2, #1
2001058a:	480d      	ldr	r0, [pc, #52]	; (200105c0 <sFLASH_WaitForWriteEnd+0x54>)
2001058c:	f007 fa20 	bl	200179d0 <HAL_SPI_Transmit>

	/* Loop as long as the memory is busy with a write cycle */
	do
	{
		/* Receive "Read Status Register" value */
		HAL_SPI_Receive(&hspi2, rxData, sizeof(rxData), HAL_MAX_DELAY);
20010590:	4639      	mov	r1, r7
20010592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20010596:	2201      	movs	r2, #1
20010598:	4809      	ldr	r0, [pc, #36]	; (200105c0 <sFLASH_WaitForWriteEnd+0x54>)
2001059a:	f007 fb4d 	bl	20017c38 <HAL_SPI_Receive>
	}
	while ((rxData[0] & FLASH_WIP_MASK) == FLASH_WIP_MASK); /* Write in progress */
2001059e:	783b      	ldrb	r3, [r7, #0]
200105a0:	f003 0301 	and.w	r3, r3, #1
200105a4:	2b00      	cmp	r3, #0
200105a6:	d1f3      	bne.n	20010590 <sFLASH_WaitForWriteEnd+0x24>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
200105a8:	2201      	movs	r2, #1
200105aa:	f44f 7100 	mov.w	r1, #512	; 0x200
200105ae:	4803      	ldr	r0, [pc, #12]	; (200105bc <sFLASH_WaitForWriteEnd+0x50>)
200105b0:	f004 fb20 	bl	20014bf4 <HAL_GPIO_WritePin>
}
200105b4:	bf00      	nop
200105b6:	3708      	adds	r7, #8
200105b8:	46bd      	mov	sp, r7
200105ba:	bd80      	pop	{r7, pc}
200105bc:	40020400 	.word	0x40020400
200105c0:	2000f574 	.word	0x2000f574

200105c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
200105c4:	b580      	push	{r7, lr}
200105c6:	b082      	sub	sp, #8
200105c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
200105ca:	2300      	movs	r3, #0
200105cc:	607b      	str	r3, [r7, #4]
200105ce:	4b10      	ldr	r3, [pc, #64]	; (20010610 <HAL_MspInit+0x4c>)
200105d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200105d2:	4a0f      	ldr	r2, [pc, #60]	; (20010610 <HAL_MspInit+0x4c>)
200105d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
200105d8:	6453      	str	r3, [r2, #68]	; 0x44
200105da:	4b0d      	ldr	r3, [pc, #52]	; (20010610 <HAL_MspInit+0x4c>)
200105dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200105de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
200105e2:	607b      	str	r3, [r7, #4]
200105e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
200105e6:	2300      	movs	r3, #0
200105e8:	603b      	str	r3, [r7, #0]
200105ea:	4b09      	ldr	r3, [pc, #36]	; (20010610 <HAL_MspInit+0x4c>)
200105ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200105ee:	4a08      	ldr	r2, [pc, #32]	; (20010610 <HAL_MspInit+0x4c>)
200105f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200105f4:	6413      	str	r3, [r2, #64]	; 0x40
200105f6:	4b06      	ldr	r3, [pc, #24]	; (20010610 <HAL_MspInit+0x4c>)
200105f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200105fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200105fe:	603b      	str	r3, [r7, #0]
20010600:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
20010602:	2007      	movs	r0, #7
20010604:	f000 fe00 	bl	20011208 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
20010608:	bf00      	nop
2001060a:	3708      	adds	r7, #8
2001060c:	46bd      	mov	sp, r7
2001060e:	bd80      	pop	{r7, pc}
20010610:	40023800 	.word	0x40023800

20010614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20010614:	b480      	push	{r7}
20010616:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
20010618:	bf00      	nop
2001061a:	46bd      	mov	sp, r7
2001061c:	f85d 7b04 	ldr.w	r7, [sp], #4
20010620:	4770      	bx	lr

20010622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20010622:	b480      	push	{r7}
20010624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20010626:	e7fe      	b.n	20010626 <HardFault_Handler+0x4>

20010628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20010628:	b480      	push	{r7}
2001062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2001062c:	e7fe      	b.n	2001062c <MemManage_Handler+0x4>

2001062e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2001062e:	b480      	push	{r7}
20010630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20010632:	e7fe      	b.n	20010632 <BusFault_Handler+0x4>

20010634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20010634:	b480      	push	{r7}
20010636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20010638:	e7fe      	b.n	20010638 <UsageFault_Handler+0x4>

2001063a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2001063a:	b480      	push	{r7}
2001063c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2001063e:	bf00      	nop
20010640:	46bd      	mov	sp, r7
20010642:	f85d 7b04 	ldr.w	r7, [sp], #4
20010646:	4770      	bx	lr

20010648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20010648:	b480      	push	{r7}
2001064a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2001064c:	bf00      	nop
2001064e:	46bd      	mov	sp, r7
20010650:	f85d 7b04 	ldr.w	r7, [sp], #4
20010654:	4770      	bx	lr

20010656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20010656:	b480      	push	{r7}
20010658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2001065a:	bf00      	nop
2001065c:	46bd      	mov	sp, r7
2001065e:	f85d 7b04 	ldr.w	r7, [sp], #4
20010662:	4770      	bx	lr

20010664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20010664:	b580      	push	{r7, lr}
20010666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20010668:	f000 fa88 	bl	20010b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2001066c:	bf00      	nop
2001066e:	bd80      	pop	{r7, pc}

20010670 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
20010670:	b480      	push	{r7}
20010672:	af00      	add	r7, sp, #0
}
20010674:	bf00      	nop
20010676:	46bd      	mov	sp, r7
20010678:	f85d 7b04 	ldr.w	r7, [sp], #4
2001067c:	4770      	bx	lr

2001067e <_getpid>:

int _getpid(void)
{
2001067e:	b480      	push	{r7}
20010680:	af00      	add	r7, sp, #0
	return 1;
20010682:	2301      	movs	r3, #1
}
20010684:	4618      	mov	r0, r3
20010686:	46bd      	mov	sp, r7
20010688:	f85d 7b04 	ldr.w	r7, [sp], #4
2001068c:	4770      	bx	lr

2001068e <_kill>:

int _kill(int pid, int sig)
{
2001068e:	b580      	push	{r7, lr}
20010690:	b082      	sub	sp, #8
20010692:	af00      	add	r7, sp, #0
20010694:	6078      	str	r0, [r7, #4]
20010696:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
20010698:	f009 fb5a 	bl	20019d50 <__errno>
2001069c:	4602      	mov	r2, r0
2001069e:	2316      	movs	r3, #22
200106a0:	6013      	str	r3, [r2, #0]
	return -1;
200106a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
200106a6:	4618      	mov	r0, r3
200106a8:	3708      	adds	r7, #8
200106aa:	46bd      	mov	sp, r7
200106ac:	bd80      	pop	{r7, pc}

200106ae <_exit>:

void _exit (int status)
{
200106ae:	b580      	push	{r7, lr}
200106b0:	b082      	sub	sp, #8
200106b2:	af00      	add	r7, sp, #0
200106b4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
200106b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
200106ba:	6878      	ldr	r0, [r7, #4]
200106bc:	f7ff ffe7 	bl	2001068e <_kill>
	while (1) {}		/* Make sure we hang here */
200106c0:	e7fe      	b.n	200106c0 <_exit+0x12>

200106c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
200106c2:	b580      	push	{r7, lr}
200106c4:	b086      	sub	sp, #24
200106c6:	af00      	add	r7, sp, #0
200106c8:	60f8      	str	r0, [r7, #12]
200106ca:	60b9      	str	r1, [r7, #8]
200106cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
200106ce:	2300      	movs	r3, #0
200106d0:	617b      	str	r3, [r7, #20]
200106d2:	e00a      	b.n	200106ea <_read+0x28>
	{
		*ptr++ = __io_getchar();
200106d4:	f3af 8000 	nop.w
200106d8:	4601      	mov	r1, r0
200106da:	68bb      	ldr	r3, [r7, #8]
200106dc:	1c5a      	adds	r2, r3, #1
200106de:	60ba      	str	r2, [r7, #8]
200106e0:	b2ca      	uxtb	r2, r1
200106e2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
200106e4:	697b      	ldr	r3, [r7, #20]
200106e6:	3301      	adds	r3, #1
200106e8:	617b      	str	r3, [r7, #20]
200106ea:	697a      	ldr	r2, [r7, #20]
200106ec:	687b      	ldr	r3, [r7, #4]
200106ee:	429a      	cmp	r2, r3
200106f0:	dbf0      	blt.n	200106d4 <_read+0x12>
	}

return len;
200106f2:	687b      	ldr	r3, [r7, #4]
}
200106f4:	4618      	mov	r0, r3
200106f6:	3718      	adds	r7, #24
200106f8:	46bd      	mov	sp, r7
200106fa:	bd80      	pop	{r7, pc}

200106fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
200106fc:	b580      	push	{r7, lr}
200106fe:	b086      	sub	sp, #24
20010700:	af00      	add	r7, sp, #0
20010702:	60f8      	str	r0, [r7, #12]
20010704:	60b9      	str	r1, [r7, #8]
20010706:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
20010708:	2300      	movs	r3, #0
2001070a:	617b      	str	r3, [r7, #20]
2001070c:	e009      	b.n	20010722 <_write+0x26>
	{
		__io_putchar(*ptr++);
2001070e:	68bb      	ldr	r3, [r7, #8]
20010710:	1c5a      	adds	r2, r3, #1
20010712:	60ba      	str	r2, [r7, #8]
20010714:	781b      	ldrb	r3, [r3, #0]
20010716:	4618      	mov	r0, r3
20010718:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
2001071c:	697b      	ldr	r3, [r7, #20]
2001071e:	3301      	adds	r3, #1
20010720:	617b      	str	r3, [r7, #20]
20010722:	697a      	ldr	r2, [r7, #20]
20010724:	687b      	ldr	r3, [r7, #4]
20010726:	429a      	cmp	r2, r3
20010728:	dbf1      	blt.n	2001070e <_write+0x12>
	}
	return len;
2001072a:	687b      	ldr	r3, [r7, #4]
}
2001072c:	4618      	mov	r0, r3
2001072e:	3718      	adds	r7, #24
20010730:	46bd      	mov	sp, r7
20010732:	bd80      	pop	{r7, pc}

20010734 <_close>:

int _close(int file)
{
20010734:	b480      	push	{r7}
20010736:	b083      	sub	sp, #12
20010738:	af00      	add	r7, sp, #0
2001073a:	6078      	str	r0, [r7, #4]
	return -1;
2001073c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
20010740:	4618      	mov	r0, r3
20010742:	370c      	adds	r7, #12
20010744:	46bd      	mov	sp, r7
20010746:	f85d 7b04 	ldr.w	r7, [sp], #4
2001074a:	4770      	bx	lr

2001074c <_fstat>:


int _fstat(int file, struct stat *st)
{
2001074c:	b480      	push	{r7}
2001074e:	b083      	sub	sp, #12
20010750:	af00      	add	r7, sp, #0
20010752:	6078      	str	r0, [r7, #4]
20010754:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
20010756:	683b      	ldr	r3, [r7, #0]
20010758:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2001075c:	605a      	str	r2, [r3, #4]
	return 0;
2001075e:	2300      	movs	r3, #0
}
20010760:	4618      	mov	r0, r3
20010762:	370c      	adds	r7, #12
20010764:	46bd      	mov	sp, r7
20010766:	f85d 7b04 	ldr.w	r7, [sp], #4
2001076a:	4770      	bx	lr

2001076c <_isatty>:

int _isatty(int file)
{
2001076c:	b480      	push	{r7}
2001076e:	b083      	sub	sp, #12
20010770:	af00      	add	r7, sp, #0
20010772:	6078      	str	r0, [r7, #4]
	return 1;
20010774:	2301      	movs	r3, #1
}
20010776:	4618      	mov	r0, r3
20010778:	370c      	adds	r7, #12
2001077a:	46bd      	mov	sp, r7
2001077c:	f85d 7b04 	ldr.w	r7, [sp], #4
20010780:	4770      	bx	lr

20010782 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
20010782:	b480      	push	{r7}
20010784:	b085      	sub	sp, #20
20010786:	af00      	add	r7, sp, #0
20010788:	60f8      	str	r0, [r7, #12]
2001078a:	60b9      	str	r1, [r7, #8]
2001078c:	607a      	str	r2, [r7, #4]
	return 0;
2001078e:	2300      	movs	r3, #0
}
20010790:	4618      	mov	r0, r3
20010792:	3714      	adds	r7, #20
20010794:	46bd      	mov	sp, r7
20010796:	f85d 7b04 	ldr.w	r7, [sp], #4
2001079a:	4770      	bx	lr

2001079c <_open>:

int _open(char *path, int flags, ...)
{
2001079c:	b40e      	push	{r1, r2, r3}
2001079e:	b480      	push	{r7}
200107a0:	b082      	sub	sp, #8
200107a2:	af00      	add	r7, sp, #0
200107a4:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
200107a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
200107aa:	4618      	mov	r0, r3
200107ac:	3708      	adds	r7, #8
200107ae:	46bd      	mov	sp, r7
200107b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200107b4:	b003      	add	sp, #12
200107b6:	4770      	bx	lr

200107b8 <_wait>:

int _wait(int *status)
{
200107b8:	b580      	push	{r7, lr}
200107ba:	b082      	sub	sp, #8
200107bc:	af00      	add	r7, sp, #0
200107be:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
200107c0:	f009 fac6 	bl	20019d50 <__errno>
200107c4:	4602      	mov	r2, r0
200107c6:	230a      	movs	r3, #10
200107c8:	6013      	str	r3, [r2, #0]
	return -1;
200107ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
200107ce:	4618      	mov	r0, r3
200107d0:	3708      	adds	r7, #8
200107d2:	46bd      	mov	sp, r7
200107d4:	bd80      	pop	{r7, pc}

200107d6 <_unlink>:

int _unlink(char *name)
{
200107d6:	b580      	push	{r7, lr}
200107d8:	b082      	sub	sp, #8
200107da:	af00      	add	r7, sp, #0
200107dc:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
200107de:	f009 fab7 	bl	20019d50 <__errno>
200107e2:	4602      	mov	r2, r0
200107e4:	2302      	movs	r3, #2
200107e6:	6013      	str	r3, [r2, #0]
	return -1;
200107e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
200107ec:	4618      	mov	r0, r3
200107ee:	3708      	adds	r7, #8
200107f0:	46bd      	mov	sp, r7
200107f2:	bd80      	pop	{r7, pc}

200107f4 <_times>:

int _times(struct tms *buf)
{
200107f4:	b480      	push	{r7}
200107f6:	b083      	sub	sp, #12
200107f8:	af00      	add	r7, sp, #0
200107fa:	6078      	str	r0, [r7, #4]
	return -1;
200107fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
20010800:	4618      	mov	r0, r3
20010802:	370c      	adds	r7, #12
20010804:	46bd      	mov	sp, r7
20010806:	f85d 7b04 	ldr.w	r7, [sp], #4
2001080a:	4770      	bx	lr

2001080c <_stat>:

int _stat(char *file, struct stat *st)
{
2001080c:	b480      	push	{r7}
2001080e:	b083      	sub	sp, #12
20010810:	af00      	add	r7, sp, #0
20010812:	6078      	str	r0, [r7, #4]
20010814:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
20010816:	683b      	ldr	r3, [r7, #0]
20010818:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2001081c:	605a      	str	r2, [r3, #4]
	return 0;
2001081e:	2300      	movs	r3, #0
}
20010820:	4618      	mov	r0, r3
20010822:	370c      	adds	r7, #12
20010824:	46bd      	mov	sp, r7
20010826:	f85d 7b04 	ldr.w	r7, [sp], #4
2001082a:	4770      	bx	lr

2001082c <_link>:

int _link(char *old, char *new)
{
2001082c:	b580      	push	{r7, lr}
2001082e:	b082      	sub	sp, #8
20010830:	af00      	add	r7, sp, #0
20010832:	6078      	str	r0, [r7, #4]
20010834:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
20010836:	f009 fa8b 	bl	20019d50 <__errno>
2001083a:	4602      	mov	r2, r0
2001083c:	231f      	movs	r3, #31
2001083e:	6013      	str	r3, [r2, #0]
	return -1;
20010840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
20010844:	4618      	mov	r0, r3
20010846:	3708      	adds	r7, #8
20010848:	46bd      	mov	sp, r7
2001084a:	bd80      	pop	{r7, pc}

2001084c <_fork>:

int _fork(void)
{
2001084c:	b580      	push	{r7, lr}
2001084e:	af00      	add	r7, sp, #0
	errno = EAGAIN;
20010850:	f009 fa7e 	bl	20019d50 <__errno>
20010854:	4602      	mov	r2, r0
20010856:	230b      	movs	r3, #11
20010858:	6013      	str	r3, [r2, #0]
	return -1;
2001085a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2001085e:	4618      	mov	r0, r3
20010860:	bd80      	pop	{r7, pc}

20010862 <_execve>:

int _execve(char *name, char **argv, char **env)
{
20010862:	b580      	push	{r7, lr}
20010864:	b084      	sub	sp, #16
20010866:	af00      	add	r7, sp, #0
20010868:	60f8      	str	r0, [r7, #12]
2001086a:	60b9      	str	r1, [r7, #8]
2001086c:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
2001086e:	f009 fa6f 	bl	20019d50 <__errno>
20010872:	4602      	mov	r2, r0
20010874:	230c      	movs	r3, #12
20010876:	6013      	str	r3, [r2, #0]
	return -1;
20010878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2001087c:	4618      	mov	r0, r3
2001087e:	3710      	adds	r7, #16
20010880:	46bd      	mov	sp, r7
20010882:	bd80      	pop	{r7, pc}

20010884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
20010884:	b580      	push	{r7, lr}
20010886:	b086      	sub	sp, #24
20010888:	af00      	add	r7, sp, #0
2001088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
2001088c:	4a14      	ldr	r2, [pc, #80]	; (200108e0 <_sbrk+0x5c>)
2001088e:	4b15      	ldr	r3, [pc, #84]	; (200108e4 <_sbrk+0x60>)
20010890:	1ad3      	subs	r3, r2, r3
20010892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
20010894:	697b      	ldr	r3, [r7, #20]
20010896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
20010898:	4b13      	ldr	r3, [pc, #76]	; (200108e8 <_sbrk+0x64>)
2001089a:	681b      	ldr	r3, [r3, #0]
2001089c:	2b00      	cmp	r3, #0
2001089e:	d102      	bne.n	200108a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
200108a0:	4b11      	ldr	r3, [pc, #68]	; (200108e8 <_sbrk+0x64>)
200108a2:	4a12      	ldr	r2, [pc, #72]	; (200108ec <_sbrk+0x68>)
200108a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
200108a6:	4b10      	ldr	r3, [pc, #64]	; (200108e8 <_sbrk+0x64>)
200108a8:	681a      	ldr	r2, [r3, #0]
200108aa:	687b      	ldr	r3, [r7, #4]
200108ac:	4413      	add	r3, r2
200108ae:	693a      	ldr	r2, [r7, #16]
200108b0:	429a      	cmp	r2, r3
200108b2:	d207      	bcs.n	200108c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
200108b4:	f009 fa4c 	bl	20019d50 <__errno>
200108b8:	4602      	mov	r2, r0
200108ba:	230c      	movs	r3, #12
200108bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
200108be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200108c2:	e009      	b.n	200108d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
200108c4:	4b08      	ldr	r3, [pc, #32]	; (200108e8 <_sbrk+0x64>)
200108c6:	681b      	ldr	r3, [r3, #0]
200108c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
200108ca:	4b07      	ldr	r3, [pc, #28]	; (200108e8 <_sbrk+0x64>)
200108cc:	681a      	ldr	r2, [r3, #0]
200108ce:	687b      	ldr	r3, [r7, #4]
200108d0:	4413      	add	r3, r2
200108d2:	4a05      	ldr	r2, [pc, #20]	; (200108e8 <_sbrk+0x64>)
200108d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
200108d6:	68fb      	ldr	r3, [r7, #12]
}
200108d8:	4618      	mov	r0, r3
200108da:	3718      	adds	r7, #24
200108dc:	46bd      	mov	sp, r7
200108de:	bd80      	pop	{r7, pc}
200108e0:	20020004 	.word	0x20020004
200108e4:	00000400 	.word	0x00000400
200108e8:	2000e56c 	.word	0x2000e56c
200108ec:	20019ff4 	.word	0x20019ff4

200108f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
200108f0:	b480      	push	{r7}
200108f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
200108f4:	4b08      	ldr	r3, [pc, #32]	; (20010918 <SystemInit+0x28>)
200108f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
200108fa:	4a07      	ldr	r2, [pc, #28]	; (20010918 <SystemInit+0x28>)
200108fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20010900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
20010904:	4b04      	ldr	r3, [pc, #16]	; (20010918 <SystemInit+0x28>)
20010906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
2001090a:	609a      	str	r2, [r3, #8]
#endif
}
2001090c:	bf00      	nop
2001090e:	46bd      	mov	sp, r7
20010910:	f85d 7b04 	ldr.w	r7, [sp], #4
20010914:	4770      	bx	lr
20010916:	bf00      	nop
20010918:	e000ed00 	.word	0xe000ed00

2001091c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
2001091c:	b480      	push	{r7}
2001091e:	b087      	sub	sp, #28
20010920:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20010922:	2300      	movs	r3, #0
20010924:	613b      	str	r3, [r7, #16]
20010926:	2300      	movs	r3, #0
20010928:	617b      	str	r3, [r7, #20]
2001092a:	2302      	movs	r3, #2
2001092c:	60fb      	str	r3, [r7, #12]
2001092e:	2300      	movs	r3, #0
20010930:	60bb      	str	r3, [r7, #8]
20010932:	2302      	movs	r3, #2
20010934:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20010936:	4b31      	ldr	r3, [pc, #196]	; (200109fc <SystemCoreClockUpdate+0xe0>)
20010938:	689b      	ldr	r3, [r3, #8]
2001093a:	f003 030c 	and.w	r3, r3, #12
2001093e:	613b      	str	r3, [r7, #16]

  switch (tmp)
20010940:	693b      	ldr	r3, [r7, #16]
20010942:	2b04      	cmp	r3, #4
20010944:	d007      	beq.n	20010956 <SystemCoreClockUpdate+0x3a>
20010946:	2b08      	cmp	r3, #8
20010948:	d009      	beq.n	2001095e <SystemCoreClockUpdate+0x42>
2001094a:	2b00      	cmp	r3, #0
2001094c:	d13d      	bne.n	200109ca <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
2001094e:	4b2c      	ldr	r3, [pc, #176]	; (20010a00 <SystemCoreClockUpdate+0xe4>)
20010950:	4a2c      	ldr	r2, [pc, #176]	; (20010a04 <SystemCoreClockUpdate+0xe8>)
20010952:	601a      	str	r2, [r3, #0]
      break;
20010954:	e03d      	b.n	200109d2 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
20010956:	4b2a      	ldr	r3, [pc, #168]	; (20010a00 <SystemCoreClockUpdate+0xe4>)
20010958:	4a2b      	ldr	r2, [pc, #172]	; (20010a08 <SystemCoreClockUpdate+0xec>)
2001095a:	601a      	str	r2, [r3, #0]
      break;
2001095c:	e039      	b.n	200109d2 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
2001095e:	4b27      	ldr	r3, [pc, #156]	; (200109fc <SystemCoreClockUpdate+0xe0>)
20010960:	685b      	ldr	r3, [r3, #4]
20010962:	0d9b      	lsrs	r3, r3, #22
20010964:	f003 0301 	and.w	r3, r3, #1
20010968:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2001096a:	4b24      	ldr	r3, [pc, #144]	; (200109fc <SystemCoreClockUpdate+0xe0>)
2001096c:	685b      	ldr	r3, [r3, #4]
2001096e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20010972:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
20010974:	68bb      	ldr	r3, [r7, #8]
20010976:	2b00      	cmp	r3, #0
20010978:	d00c      	beq.n	20010994 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2001097a:	4a23      	ldr	r2, [pc, #140]	; (20010a08 <SystemCoreClockUpdate+0xec>)
2001097c:	687b      	ldr	r3, [r7, #4]
2001097e:	fbb2 f3f3 	udiv	r3, r2, r3
20010982:	4a1e      	ldr	r2, [pc, #120]	; (200109fc <SystemCoreClockUpdate+0xe0>)
20010984:	6852      	ldr	r2, [r2, #4]
20010986:	0992      	lsrs	r2, r2, #6
20010988:	f3c2 0208 	ubfx	r2, r2, #0, #9
2001098c:	fb02 f303 	mul.w	r3, r2, r3
20010990:	617b      	str	r3, [r7, #20]
20010992:	e00b      	b.n	200109ac <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20010994:	4a1b      	ldr	r2, [pc, #108]	; (20010a04 <SystemCoreClockUpdate+0xe8>)
20010996:	687b      	ldr	r3, [r7, #4]
20010998:	fbb2 f3f3 	udiv	r3, r2, r3
2001099c:	4a17      	ldr	r2, [pc, #92]	; (200109fc <SystemCoreClockUpdate+0xe0>)
2001099e:	6852      	ldr	r2, [r2, #4]
200109a0:	0992      	lsrs	r2, r2, #6
200109a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
200109a6:	fb02 f303 	mul.w	r3, r2, r3
200109aa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
200109ac:	4b13      	ldr	r3, [pc, #76]	; (200109fc <SystemCoreClockUpdate+0xe0>)
200109ae:	685b      	ldr	r3, [r3, #4]
200109b0:	0c1b      	lsrs	r3, r3, #16
200109b2:	f003 0303 	and.w	r3, r3, #3
200109b6:	3301      	adds	r3, #1
200109b8:	005b      	lsls	r3, r3, #1
200109ba:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
200109bc:	697a      	ldr	r2, [r7, #20]
200109be:	68fb      	ldr	r3, [r7, #12]
200109c0:	fbb2 f3f3 	udiv	r3, r2, r3
200109c4:	4a0e      	ldr	r2, [pc, #56]	; (20010a00 <SystemCoreClockUpdate+0xe4>)
200109c6:	6013      	str	r3, [r2, #0]
      break;
200109c8:	e003      	b.n	200109d2 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
200109ca:	4b0d      	ldr	r3, [pc, #52]	; (20010a00 <SystemCoreClockUpdate+0xe4>)
200109cc:	4a0d      	ldr	r2, [pc, #52]	; (20010a04 <SystemCoreClockUpdate+0xe8>)
200109ce:	601a      	str	r2, [r3, #0]
      break;
200109d0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
200109d2:	4b0a      	ldr	r3, [pc, #40]	; (200109fc <SystemCoreClockUpdate+0xe0>)
200109d4:	689b      	ldr	r3, [r3, #8]
200109d6:	091b      	lsrs	r3, r3, #4
200109d8:	f003 030f 	and.w	r3, r3, #15
200109dc:	4a0b      	ldr	r2, [pc, #44]	; (20010a0c <SystemCoreClockUpdate+0xf0>)
200109de:	5cd3      	ldrb	r3, [r2, r3]
200109e0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
200109e2:	4b07      	ldr	r3, [pc, #28]	; (20010a00 <SystemCoreClockUpdate+0xe4>)
200109e4:	681a      	ldr	r2, [r3, #0]
200109e6:	693b      	ldr	r3, [r7, #16]
200109e8:	fa22 f303 	lsr.w	r3, r2, r3
200109ec:	4a04      	ldr	r2, [pc, #16]	; (20010a00 <SystemCoreClockUpdate+0xe4>)
200109ee:	6013      	str	r3, [r2, #0]
}
200109f0:	bf00      	nop
200109f2:	371c      	adds	r7, #28
200109f4:	46bd      	mov	sp, r7
200109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200109fa:	4770      	bx	lr
200109fc:	40023800 	.word	0x40023800
20010a00:	2000e4dc 	.word	0x2000e4dc
20010a04:	00f42400 	.word	0x00f42400
20010a08:	007a1200 	.word	0x007a1200
20010a0c:	20019fd0 	.word	0x20019fd0

20010a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
20010a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 20010a48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
20010a14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
20010a16:	e003      	b.n	20010a20 <LoopCopyDataInit>

20010a18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
20010a18:	4b0c      	ldr	r3, [pc, #48]	; (20010a4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
20010a1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
20010a1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
20010a1e:	3104      	adds	r1, #4

20010a20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
20010a20:	480b      	ldr	r0, [pc, #44]	; (20010a50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
20010a22:	4b0c      	ldr	r3, [pc, #48]	; (20010a54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
20010a24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
20010a26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
20010a28:	d3f6      	bcc.n	20010a18 <CopyDataInit>
  ldr  r2, =_sbss
20010a2a:	4a0b      	ldr	r2, [pc, #44]	; (20010a58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
20010a2c:	e002      	b.n	20010a34 <LoopFillZerobss>

20010a2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
20010a2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
20010a30:	f842 3b04 	str.w	r3, [r2], #4

20010a34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
20010a34:	4b09      	ldr	r3, [pc, #36]	; (20010a5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
20010a36:	429a      	cmp	r2, r3
  bcc  FillZerobss
20010a38:	d3f9      	bcc.n	20010a2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
20010a3a:	f7ff ff59 	bl	200108f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20010a3e:	f009 f9a1 	bl	20019d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20010a42:	f7ff fa17 	bl	2000fe74 <main>
  bx  lr    
20010a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
20010a48:	20020004 	.word	0x20020004
  ldr  r3, =_sidata
20010a4c:	200003d4 	.word	0x200003d4
  ldr  r0, =_sdata
20010a50:	200003d4 	.word	0x200003d4
  ldr  r3, =_edata
20010a54:	2000e54c 	.word	0x2000e54c
  ldr  r2, =_sbss
20010a58:	2000e54c 	.word	0x2000e54c
  ldr  r3, = _ebss
20010a5c:	2000f5f0 	.word	0x2000f5f0

20010a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20010a60:	e7fe      	b.n	20010a60 <ADC_IRQHandler>
	...

20010a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20010a64:	b580      	push	{r7, lr}
20010a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20010a68:	4b0e      	ldr	r3, [pc, #56]	; (20010aa4 <HAL_Init+0x40>)
20010a6a:	681b      	ldr	r3, [r3, #0]
20010a6c:	4a0d      	ldr	r2, [pc, #52]	; (20010aa4 <HAL_Init+0x40>)
20010a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20010a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
20010a74:	4b0b      	ldr	r3, [pc, #44]	; (20010aa4 <HAL_Init+0x40>)
20010a76:	681b      	ldr	r3, [r3, #0]
20010a78:	4a0a      	ldr	r2, [pc, #40]	; (20010aa4 <HAL_Init+0x40>)
20010a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20010a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20010a80:	4b08      	ldr	r3, [pc, #32]	; (20010aa4 <HAL_Init+0x40>)
20010a82:	681b      	ldr	r3, [r3, #0]
20010a84:	4a07      	ldr	r2, [pc, #28]	; (20010aa4 <HAL_Init+0x40>)
20010a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20010a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20010a8c:	2003      	movs	r0, #3
20010a8e:	f000 fbbb 	bl	20011208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20010a92:	2000      	movs	r0, #0
20010a94:	f000 f842 	bl	20010b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20010a98:	f7ff fd94 	bl	200105c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20010a9c:	2300      	movs	r3, #0
}
20010a9e:	4618      	mov	r0, r3
20010aa0:	bd80      	pop	{r7, pc}
20010aa2:	bf00      	nop
20010aa4:	40023c00 	.word	0x40023c00

20010aa8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
20010aa8:	b580      	push	{r7, lr}
20010aaa:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
20010aac:	4b13      	ldr	r3, [pc, #76]	; (20010afc <HAL_DeInit+0x54>)
20010aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20010ab2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
20010ab4:	4b11      	ldr	r3, [pc, #68]	; (20010afc <HAL_DeInit+0x54>)
20010ab6:	2200      	movs	r2, #0
20010ab8:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
20010aba:	4b10      	ldr	r3, [pc, #64]	; (20010afc <HAL_DeInit+0x54>)
20010abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20010ac0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
20010ac2:	4b0e      	ldr	r3, [pc, #56]	; (20010afc <HAL_DeInit+0x54>)
20010ac4:	2200      	movs	r2, #0
20010ac6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
20010ac8:	4b0c      	ldr	r3, [pc, #48]	; (20010afc <HAL_DeInit+0x54>)
20010aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20010ace:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
20010ad0:	4b0a      	ldr	r3, [pc, #40]	; (20010afc <HAL_DeInit+0x54>)
20010ad2:	2200      	movs	r2, #0
20010ad4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
20010ad6:	4b09      	ldr	r3, [pc, #36]	; (20010afc <HAL_DeInit+0x54>)
20010ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20010adc:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
20010ade:	4b07      	ldr	r3, [pc, #28]	; (20010afc <HAL_DeInit+0x54>)
20010ae0:	2200      	movs	r2, #0
20010ae2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
20010ae4:	4b05      	ldr	r3, [pc, #20]	; (20010afc <HAL_DeInit+0x54>)
20010ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20010aea:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
20010aec:	4b03      	ldr	r3, [pc, #12]	; (20010afc <HAL_DeInit+0x54>)
20010aee:	2200      	movs	r2, #0
20010af0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
20010af2:	f000 f80c 	bl	20010b0e <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
20010af6:	2300      	movs	r3, #0
}
20010af8:	4618      	mov	r0, r3
20010afa:	bd80      	pop	{r7, pc}
20010afc:	40023800 	.word	0x40023800
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
20010b00:	b480      	push	{r7}
20010b02:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
20010b04:	bf00      	nop
20010b06:	46bd      	mov	sp, r7
20010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
20010b0c:	4770      	bx	lr

20010b0e <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
20010b0e:	b480      	push	{r7}
20010b10:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
20010b12:	bf00      	nop
20010b14:	46bd      	mov	sp, r7
20010b16:	f85d 7b04 	ldr.w	r7, [sp], #4
20010b1a:	4770      	bx	lr

20010b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20010b1c:	b580      	push	{r7, lr}
20010b1e:	b082      	sub	sp, #8
20010b20:	af00      	add	r7, sp, #0
20010b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20010b24:	4b12      	ldr	r3, [pc, #72]	; (20010b70 <HAL_InitTick+0x54>)
20010b26:	681a      	ldr	r2, [r3, #0]
20010b28:	4b12      	ldr	r3, [pc, #72]	; (20010b74 <HAL_InitTick+0x58>)
20010b2a:	781b      	ldrb	r3, [r3, #0]
20010b2c:	4619      	mov	r1, r3
20010b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20010b32:	fbb3 f3f1 	udiv	r3, r3, r1
20010b36:	fbb2 f3f3 	udiv	r3, r2, r3
20010b3a:	4618      	mov	r0, r3
20010b3c:	f000 fbab 	bl	20011296 <HAL_SYSTICK_Config>
20010b40:	4603      	mov	r3, r0
20010b42:	2b00      	cmp	r3, #0
20010b44:	d001      	beq.n	20010b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
20010b46:	2301      	movs	r3, #1
20010b48:	e00e      	b.n	20010b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20010b4a:	687b      	ldr	r3, [r7, #4]
20010b4c:	2b0f      	cmp	r3, #15
20010b4e:	d80a      	bhi.n	20010b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20010b50:	2200      	movs	r2, #0
20010b52:	6879      	ldr	r1, [r7, #4]
20010b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
20010b58:	f000 fb61 	bl	2001121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20010b5c:	4a06      	ldr	r2, [pc, #24]	; (20010b78 <HAL_InitTick+0x5c>)
20010b5e:	687b      	ldr	r3, [r7, #4]
20010b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20010b62:	2300      	movs	r3, #0
20010b64:	e000      	b.n	20010b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
20010b66:	2301      	movs	r3, #1
}
20010b68:	4618      	mov	r0, r3
20010b6a:	3708      	adds	r7, #8
20010b6c:	46bd      	mov	sp, r7
20010b6e:	bd80      	pop	{r7, pc}
20010b70:	2000e4dc 	.word	0x2000e4dc
20010b74:	2000e4e4 	.word	0x2000e4e4
20010b78:	2000e4e0 	.word	0x2000e4e0

20010b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20010b7c:	b480      	push	{r7}
20010b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20010b80:	4b06      	ldr	r3, [pc, #24]	; (20010b9c <HAL_IncTick+0x20>)
20010b82:	781b      	ldrb	r3, [r3, #0]
20010b84:	461a      	mov	r2, r3
20010b86:	4b06      	ldr	r3, [pc, #24]	; (20010ba0 <HAL_IncTick+0x24>)
20010b88:	681b      	ldr	r3, [r3, #0]
20010b8a:	4413      	add	r3, r2
20010b8c:	4a04      	ldr	r2, [pc, #16]	; (20010ba0 <HAL_IncTick+0x24>)
20010b8e:	6013      	str	r3, [r2, #0]
}
20010b90:	bf00      	nop
20010b92:	46bd      	mov	sp, r7
20010b94:	f85d 7b04 	ldr.w	r7, [sp], #4
20010b98:	4770      	bx	lr
20010b9a:	bf00      	nop
20010b9c:	2000e4e4 	.word	0x2000e4e4
20010ba0:	2000f5cc 	.word	0x2000f5cc

20010ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20010ba4:	b480      	push	{r7}
20010ba6:	af00      	add	r7, sp, #0
  return uwTick;
20010ba8:	4b03      	ldr	r3, [pc, #12]	; (20010bb8 <HAL_GetTick+0x14>)
20010baa:	681b      	ldr	r3, [r3, #0]
}
20010bac:	4618      	mov	r0, r3
20010bae:	46bd      	mov	sp, r7
20010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
20010bb4:	4770      	bx	lr
20010bb6:	bf00      	nop
20010bb8:	2000f5cc 	.word	0x2000f5cc

20010bbc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
20010bbc:	b480      	push	{r7}
20010bbe:	af00      	add	r7, sp, #0
  return uwTickPrio;
20010bc0:	4b03      	ldr	r3, [pc, #12]	; (20010bd0 <HAL_GetTickPrio+0x14>)
20010bc2:	681b      	ldr	r3, [r3, #0]
}
20010bc4:	4618      	mov	r0, r3
20010bc6:	46bd      	mov	sp, r7
20010bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
20010bcc:	4770      	bx	lr
20010bce:	bf00      	nop
20010bd0:	2000e4e0 	.word	0x2000e4e0

20010bd4 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
20010bd4:	b580      	push	{r7, lr}
20010bd6:	b084      	sub	sp, #16
20010bd8:	af00      	add	r7, sp, #0
20010bda:	4603      	mov	r3, r0
20010bdc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
20010bde:	2300      	movs	r3, #0
20010be0:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
20010be2:	4b0e      	ldr	r3, [pc, #56]	; (20010c1c <HAL_SetTickFreq+0x48>)
20010be4:	781b      	ldrb	r3, [r3, #0]
20010be6:	79fa      	ldrb	r2, [r7, #7]
20010be8:	429a      	cmp	r2, r3
20010bea:	d012      	beq.n	20010c12 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
20010bec:	4b0b      	ldr	r3, [pc, #44]	; (20010c1c <HAL_SetTickFreq+0x48>)
20010bee:	781b      	ldrb	r3, [r3, #0]
20010bf0:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
20010bf2:	4a0a      	ldr	r2, [pc, #40]	; (20010c1c <HAL_SetTickFreq+0x48>)
20010bf4:	79fb      	ldrb	r3, [r7, #7]
20010bf6:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
20010bf8:	4b09      	ldr	r3, [pc, #36]	; (20010c20 <HAL_SetTickFreq+0x4c>)
20010bfa:	681b      	ldr	r3, [r3, #0]
20010bfc:	4618      	mov	r0, r3
20010bfe:	f7ff ff8d 	bl	20010b1c <HAL_InitTick>
20010c02:	4603      	mov	r3, r0
20010c04:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
20010c06:	7bfb      	ldrb	r3, [r7, #15]
20010c08:	2b00      	cmp	r3, #0
20010c0a:	d002      	beq.n	20010c12 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
20010c0c:	4a03      	ldr	r2, [pc, #12]	; (20010c1c <HAL_SetTickFreq+0x48>)
20010c0e:	7bbb      	ldrb	r3, [r7, #14]
20010c10:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
20010c12:	7bfb      	ldrb	r3, [r7, #15]
}
20010c14:	4618      	mov	r0, r3
20010c16:	3710      	adds	r7, #16
20010c18:	46bd      	mov	sp, r7
20010c1a:	bd80      	pop	{r7, pc}
20010c1c:	2000e4e4 	.word	0x2000e4e4
20010c20:	2000e4e0 	.word	0x2000e4e0

20010c24 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
20010c24:	b480      	push	{r7}
20010c26:	af00      	add	r7, sp, #0
  return uwTickFreq;
20010c28:	4b03      	ldr	r3, [pc, #12]	; (20010c38 <HAL_GetTickFreq+0x14>)
20010c2a:	781b      	ldrb	r3, [r3, #0]
}
20010c2c:	4618      	mov	r0, r3
20010c2e:	46bd      	mov	sp, r7
20010c30:	f85d 7b04 	ldr.w	r7, [sp], #4
20010c34:	4770      	bx	lr
20010c36:	bf00      	nop
20010c38:	2000e4e4 	.word	0x2000e4e4

20010c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20010c3c:	b580      	push	{r7, lr}
20010c3e:	b084      	sub	sp, #16
20010c40:	af00      	add	r7, sp, #0
20010c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20010c44:	f7ff ffae 	bl	20010ba4 <HAL_GetTick>
20010c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20010c4a:	687b      	ldr	r3, [r7, #4]
20010c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20010c4e:	68fb      	ldr	r3, [r7, #12]
20010c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20010c54:	d005      	beq.n	20010c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
20010c56:	4b09      	ldr	r3, [pc, #36]	; (20010c7c <HAL_Delay+0x40>)
20010c58:	781b      	ldrb	r3, [r3, #0]
20010c5a:	461a      	mov	r2, r3
20010c5c:	68fb      	ldr	r3, [r7, #12]
20010c5e:	4413      	add	r3, r2
20010c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
20010c62:	bf00      	nop
20010c64:	f7ff ff9e 	bl	20010ba4 <HAL_GetTick>
20010c68:	4602      	mov	r2, r0
20010c6a:	68bb      	ldr	r3, [r7, #8]
20010c6c:	1ad3      	subs	r3, r2, r3
20010c6e:	68fa      	ldr	r2, [r7, #12]
20010c70:	429a      	cmp	r2, r3
20010c72:	d8f7      	bhi.n	20010c64 <HAL_Delay+0x28>
  {
  }
}
20010c74:	bf00      	nop
20010c76:	3710      	adds	r7, #16
20010c78:	46bd      	mov	sp, r7
20010c7a:	bd80      	pop	{r7, pc}
20010c7c:	2000e4e4 	.word	0x2000e4e4

20010c80 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
20010c80:	b480      	push	{r7}
20010c82:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
20010c84:	4b05      	ldr	r3, [pc, #20]	; (20010c9c <HAL_SuspendTick+0x1c>)
20010c86:	681b      	ldr	r3, [r3, #0]
20010c88:	4a04      	ldr	r2, [pc, #16]	; (20010c9c <HAL_SuspendTick+0x1c>)
20010c8a:	f023 0302 	bic.w	r3, r3, #2
20010c8e:	6013      	str	r3, [r2, #0]
}
20010c90:	bf00      	nop
20010c92:	46bd      	mov	sp, r7
20010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
20010c98:	4770      	bx	lr
20010c9a:	bf00      	nop
20010c9c:	e000e010 	.word	0xe000e010

20010ca0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
20010ca0:	b480      	push	{r7}
20010ca2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
20010ca4:	4b05      	ldr	r3, [pc, #20]	; (20010cbc <HAL_ResumeTick+0x1c>)
20010ca6:	681b      	ldr	r3, [r3, #0]
20010ca8:	4a04      	ldr	r2, [pc, #16]	; (20010cbc <HAL_ResumeTick+0x1c>)
20010caa:	f043 0302 	orr.w	r3, r3, #2
20010cae:	6013      	str	r3, [r2, #0]
}
20010cb0:	bf00      	nop
20010cb2:	46bd      	mov	sp, r7
20010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
20010cb8:	4770      	bx	lr
20010cba:	bf00      	nop
20010cbc:	e000e010 	.word	0xe000e010

20010cc0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
20010cc0:	b480      	push	{r7}
20010cc2:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
20010cc4:	4b02      	ldr	r3, [pc, #8]	; (20010cd0 <HAL_GetHalVersion+0x10>)
}
20010cc6:	4618      	mov	r0, r3
20010cc8:	46bd      	mov	sp, r7
20010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
20010cce:	4770      	bx	lr
20010cd0:	01070a00 	.word	0x01070a00

20010cd4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
20010cd4:	b480      	push	{r7}
20010cd6:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
20010cd8:	4b03      	ldr	r3, [pc, #12]	; (20010ce8 <HAL_GetREVID+0x14>)
20010cda:	681b      	ldr	r3, [r3, #0]
20010cdc:	0c1b      	lsrs	r3, r3, #16
}
20010cde:	4618      	mov	r0, r3
20010ce0:	46bd      	mov	sp, r7
20010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
20010ce6:	4770      	bx	lr
20010ce8:	e0042000 	.word	0xe0042000

20010cec <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
20010cec:	b480      	push	{r7}
20010cee:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
20010cf0:	4b04      	ldr	r3, [pc, #16]	; (20010d04 <HAL_GetDEVID+0x18>)
20010cf2:	681b      	ldr	r3, [r3, #0]
20010cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
20010cf8:	4618      	mov	r0, r3
20010cfa:	46bd      	mov	sp, r7
20010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
20010d00:	4770      	bx	lr
20010d02:	bf00      	nop
20010d04:	e0042000 	.word	0xe0042000

20010d08 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
20010d08:	b480      	push	{r7}
20010d0a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20010d0c:	4b05      	ldr	r3, [pc, #20]	; (20010d24 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20010d0e:	685b      	ldr	r3, [r3, #4]
20010d10:	4a04      	ldr	r2, [pc, #16]	; (20010d24 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20010d12:	f043 0301 	orr.w	r3, r3, #1
20010d16:	6053      	str	r3, [r2, #4]
}
20010d18:	bf00      	nop
20010d1a:	46bd      	mov	sp, r7
20010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
20010d20:	4770      	bx	lr
20010d22:	bf00      	nop
20010d24:	e0042000 	.word	0xe0042000

20010d28 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
20010d28:	b480      	push	{r7}
20010d2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20010d2c:	4b05      	ldr	r3, [pc, #20]	; (20010d44 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20010d2e:	685b      	ldr	r3, [r3, #4]
20010d30:	4a04      	ldr	r2, [pc, #16]	; (20010d44 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20010d32:	f023 0301 	bic.w	r3, r3, #1
20010d36:	6053      	str	r3, [r2, #4]
}
20010d38:	bf00      	nop
20010d3a:	46bd      	mov	sp, r7
20010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
20010d40:	4770      	bx	lr
20010d42:	bf00      	nop
20010d44:	e0042000 	.word	0xe0042000

20010d48 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
20010d48:	b480      	push	{r7}
20010d4a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20010d4c:	4b05      	ldr	r3, [pc, #20]	; (20010d64 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20010d4e:	685b      	ldr	r3, [r3, #4]
20010d50:	4a04      	ldr	r2, [pc, #16]	; (20010d64 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20010d52:	f043 0302 	orr.w	r3, r3, #2
20010d56:	6053      	str	r3, [r2, #4]
}
20010d58:	bf00      	nop
20010d5a:	46bd      	mov	sp, r7
20010d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
20010d60:	4770      	bx	lr
20010d62:	bf00      	nop
20010d64:	e0042000 	.word	0xe0042000

20010d68 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
20010d68:	b480      	push	{r7}
20010d6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20010d6c:	4b05      	ldr	r3, [pc, #20]	; (20010d84 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20010d6e:	685b      	ldr	r3, [r3, #4]
20010d70:	4a04      	ldr	r2, [pc, #16]	; (20010d84 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20010d72:	f023 0302 	bic.w	r3, r3, #2
20010d76:	6053      	str	r3, [r2, #4]
}
20010d78:	bf00      	nop
20010d7a:	46bd      	mov	sp, r7
20010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
20010d80:	4770      	bx	lr
20010d82:	bf00      	nop
20010d84:	e0042000 	.word	0xe0042000

20010d88 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
20010d88:	b480      	push	{r7}
20010d8a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20010d8c:	4b05      	ldr	r3, [pc, #20]	; (20010da4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20010d8e:	685b      	ldr	r3, [r3, #4]
20010d90:	4a04      	ldr	r2, [pc, #16]	; (20010da4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20010d92:	f043 0304 	orr.w	r3, r3, #4
20010d96:	6053      	str	r3, [r2, #4]
}
20010d98:	bf00      	nop
20010d9a:	46bd      	mov	sp, r7
20010d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
20010da0:	4770      	bx	lr
20010da2:	bf00      	nop
20010da4:	e0042000 	.word	0xe0042000

20010da8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
20010da8:	b480      	push	{r7}
20010daa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20010dac:	4b05      	ldr	r3, [pc, #20]	; (20010dc4 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20010dae:	685b      	ldr	r3, [r3, #4]
20010db0:	4a04      	ldr	r2, [pc, #16]	; (20010dc4 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20010db2:	f023 0304 	bic.w	r3, r3, #4
20010db6:	6053      	str	r3, [r2, #4]
}
20010db8:	bf00      	nop
20010dba:	46bd      	mov	sp, r7
20010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
20010dc0:	4770      	bx	lr
20010dc2:	bf00      	nop
20010dc4:	e0042000 	.word	0xe0042000

20010dc8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
20010dc8:	b480      	push	{r7}
20010dca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
20010dcc:	4b03      	ldr	r3, [pc, #12]	; (20010ddc <HAL_EnableCompensationCell+0x14>)
20010dce:	2201      	movs	r2, #1
20010dd0:	601a      	str	r2, [r3, #0]
}
20010dd2:	bf00      	nop
20010dd4:	46bd      	mov	sp, r7
20010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
20010dda:	4770      	bx	lr
20010ddc:	42270400 	.word	0x42270400

20010de0 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
20010de0:	b480      	push	{r7}
20010de2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
20010de4:	4b03      	ldr	r3, [pc, #12]	; (20010df4 <HAL_DisableCompensationCell+0x14>)
20010de6:	2200      	movs	r2, #0
20010de8:	601a      	str	r2, [r3, #0]
}
20010dea:	bf00      	nop
20010dec:	46bd      	mov	sp, r7
20010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
20010df2:	4770      	bx	lr
20010df4:	42270400 	.word	0x42270400

20010df8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
20010df8:	b480      	push	{r7}
20010dfa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
20010dfc:	4b03      	ldr	r3, [pc, #12]	; (20010e0c <HAL_GetUIDw0+0x14>)
20010dfe:	681b      	ldr	r3, [r3, #0]
}
20010e00:	4618      	mov	r0, r3
20010e02:	46bd      	mov	sp, r7
20010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
20010e08:	4770      	bx	lr
20010e0a:	bf00      	nop
20010e0c:	1fff7a10 	.word	0x1fff7a10

20010e10 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
20010e10:	b480      	push	{r7}
20010e12:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
20010e14:	4b03      	ldr	r3, [pc, #12]	; (20010e24 <HAL_GetUIDw1+0x14>)
20010e16:	681b      	ldr	r3, [r3, #0]
}
20010e18:	4618      	mov	r0, r3
20010e1a:	46bd      	mov	sp, r7
20010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
20010e20:	4770      	bx	lr
20010e22:	bf00      	nop
20010e24:	1fff7a14 	.word	0x1fff7a14

20010e28 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
20010e28:	b480      	push	{r7}
20010e2a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
20010e2c:	4b03      	ldr	r3, [pc, #12]	; (20010e3c <HAL_GetUIDw2+0x14>)
20010e2e:	681b      	ldr	r3, [r3, #0]
}
20010e30:	4618      	mov	r0, r3
20010e32:	46bd      	mov	sp, r7
20010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
20010e38:	4770      	bx	lr
20010e3a:	bf00      	nop
20010e3c:	1fff7a18 	.word	0x1fff7a18

20010e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20010e40:	b480      	push	{r7}
20010e42:	b085      	sub	sp, #20
20010e44:	af00      	add	r7, sp, #0
20010e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20010e48:	687b      	ldr	r3, [r7, #4]
20010e4a:	f003 0307 	and.w	r3, r3, #7
20010e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20010e50:	4b0c      	ldr	r3, [pc, #48]	; (20010e84 <__NVIC_SetPriorityGrouping+0x44>)
20010e52:	68db      	ldr	r3, [r3, #12]
20010e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20010e56:	68ba      	ldr	r2, [r7, #8]
20010e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20010e5c:	4013      	ands	r3, r2
20010e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20010e60:	68fb      	ldr	r3, [r7, #12]
20010e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20010e64:	68bb      	ldr	r3, [r7, #8]
20010e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20010e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20010e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20010e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20010e72:	4a04      	ldr	r2, [pc, #16]	; (20010e84 <__NVIC_SetPriorityGrouping+0x44>)
20010e74:	68bb      	ldr	r3, [r7, #8]
20010e76:	60d3      	str	r3, [r2, #12]
}
20010e78:	bf00      	nop
20010e7a:	3714      	adds	r7, #20
20010e7c:	46bd      	mov	sp, r7
20010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
20010e82:	4770      	bx	lr
20010e84:	e000ed00 	.word	0xe000ed00

20010e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20010e88:	b480      	push	{r7}
20010e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20010e8c:	4b04      	ldr	r3, [pc, #16]	; (20010ea0 <__NVIC_GetPriorityGrouping+0x18>)
20010e8e:	68db      	ldr	r3, [r3, #12]
20010e90:	0a1b      	lsrs	r3, r3, #8
20010e92:	f003 0307 	and.w	r3, r3, #7
}
20010e96:	4618      	mov	r0, r3
20010e98:	46bd      	mov	sp, r7
20010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
20010e9e:	4770      	bx	lr
20010ea0:	e000ed00 	.word	0xe000ed00

20010ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
20010ea4:	b480      	push	{r7}
20010ea6:	b083      	sub	sp, #12
20010ea8:	af00      	add	r7, sp, #0
20010eaa:	4603      	mov	r3, r0
20010eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20010eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010eb2:	2b00      	cmp	r3, #0
20010eb4:	db0b      	blt.n	20010ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20010eb6:	79fb      	ldrb	r3, [r7, #7]
20010eb8:	f003 021f 	and.w	r2, r3, #31
20010ebc:	4907      	ldr	r1, [pc, #28]	; (20010edc <__NVIC_EnableIRQ+0x38>)
20010ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010ec2:	095b      	lsrs	r3, r3, #5
20010ec4:	2001      	movs	r0, #1
20010ec6:	fa00 f202 	lsl.w	r2, r0, r2
20010eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20010ece:	bf00      	nop
20010ed0:	370c      	adds	r7, #12
20010ed2:	46bd      	mov	sp, r7
20010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
20010ed8:	4770      	bx	lr
20010eda:	bf00      	nop
20010edc:	e000e100 	.word	0xe000e100

20010ee0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
20010ee0:	b480      	push	{r7}
20010ee2:	b083      	sub	sp, #12
20010ee4:	af00      	add	r7, sp, #0
20010ee6:	4603      	mov	r3, r0
20010ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20010eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010eee:	2b00      	cmp	r3, #0
20010ef0:	db10      	blt.n	20010f14 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20010ef2:	79fb      	ldrb	r3, [r7, #7]
20010ef4:	f003 021f 	and.w	r2, r3, #31
20010ef8:	4909      	ldr	r1, [pc, #36]	; (20010f20 <__NVIC_DisableIRQ+0x40>)
20010efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010efe:	095b      	lsrs	r3, r3, #5
20010f00:	2001      	movs	r0, #1
20010f02:	fa00 f202 	lsl.w	r2, r0, r2
20010f06:	3320      	adds	r3, #32
20010f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
20010f0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
20010f10:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
20010f14:	bf00      	nop
20010f16:	370c      	adds	r7, #12
20010f18:	46bd      	mov	sp, r7
20010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
20010f1e:	4770      	bx	lr
20010f20:	e000e100 	.word	0xe000e100

20010f24 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
20010f24:	b480      	push	{r7}
20010f26:	b083      	sub	sp, #12
20010f28:	af00      	add	r7, sp, #0
20010f2a:	4603      	mov	r3, r0
20010f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20010f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010f32:	2b00      	cmp	r3, #0
20010f34:	db0e      	blt.n	20010f54 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
20010f36:	4a0b      	ldr	r2, [pc, #44]	; (20010f64 <__NVIC_GetPendingIRQ+0x40>)
20010f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010f3c:	095b      	lsrs	r3, r3, #5
20010f3e:	3340      	adds	r3, #64	; 0x40
20010f40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
20010f44:	79fb      	ldrb	r3, [r7, #7]
20010f46:	f003 031f 	and.w	r3, r3, #31
20010f4a:	fa22 f303 	lsr.w	r3, r2, r3
20010f4e:	f003 0301 	and.w	r3, r3, #1
20010f52:	e000      	b.n	20010f56 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
20010f54:	2300      	movs	r3, #0
  }
}
20010f56:	4618      	mov	r0, r3
20010f58:	370c      	adds	r7, #12
20010f5a:	46bd      	mov	sp, r7
20010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
20010f60:	4770      	bx	lr
20010f62:	bf00      	nop
20010f64:	e000e100 	.word	0xe000e100

20010f68 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
20010f68:	b480      	push	{r7}
20010f6a:	b083      	sub	sp, #12
20010f6c:	af00      	add	r7, sp, #0
20010f6e:	4603      	mov	r3, r0
20010f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20010f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010f76:	2b00      	cmp	r3, #0
20010f78:	db0c      	blt.n	20010f94 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20010f7a:	79fb      	ldrb	r3, [r7, #7]
20010f7c:	f003 021f 	and.w	r2, r3, #31
20010f80:	4907      	ldr	r1, [pc, #28]	; (20010fa0 <__NVIC_SetPendingIRQ+0x38>)
20010f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010f86:	095b      	lsrs	r3, r3, #5
20010f88:	2001      	movs	r0, #1
20010f8a:	fa00 f202 	lsl.w	r2, r0, r2
20010f8e:	3340      	adds	r3, #64	; 0x40
20010f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20010f94:	bf00      	nop
20010f96:	370c      	adds	r7, #12
20010f98:	46bd      	mov	sp, r7
20010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
20010f9e:	4770      	bx	lr
20010fa0:	e000e100 	.word	0xe000e100

20010fa4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20010fa4:	b480      	push	{r7}
20010fa6:	b083      	sub	sp, #12
20010fa8:	af00      	add	r7, sp, #0
20010faa:	4603      	mov	r3, r0
20010fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20010fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010fb2:	2b00      	cmp	r3, #0
20010fb4:	db0c      	blt.n	20010fd0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20010fb6:	79fb      	ldrb	r3, [r7, #7]
20010fb8:	f003 021f 	and.w	r2, r3, #31
20010fbc:	4907      	ldr	r1, [pc, #28]	; (20010fdc <__NVIC_ClearPendingIRQ+0x38>)
20010fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010fc2:	095b      	lsrs	r3, r3, #5
20010fc4:	2001      	movs	r0, #1
20010fc6:	fa00 f202 	lsl.w	r2, r0, r2
20010fca:	3360      	adds	r3, #96	; 0x60
20010fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20010fd0:	bf00      	nop
20010fd2:	370c      	adds	r7, #12
20010fd4:	46bd      	mov	sp, r7
20010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
20010fda:	4770      	bx	lr
20010fdc:	e000e100 	.word	0xe000e100

20010fe0 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
20010fe0:	b480      	push	{r7}
20010fe2:	b083      	sub	sp, #12
20010fe4:	af00      	add	r7, sp, #0
20010fe6:	4603      	mov	r3, r0
20010fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20010fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010fee:	2b00      	cmp	r3, #0
20010ff0:	db0e      	blt.n	20011010 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
20010ff2:	4a0b      	ldr	r2, [pc, #44]	; (20011020 <__NVIC_GetActive+0x40>)
20010ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
20010ff8:	095b      	lsrs	r3, r3, #5
20010ffa:	3380      	adds	r3, #128	; 0x80
20010ffc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
20011000:	79fb      	ldrb	r3, [r7, #7]
20011002:	f003 031f 	and.w	r3, r3, #31
20011006:	fa22 f303 	lsr.w	r3, r2, r3
2001100a:	f003 0301 	and.w	r3, r3, #1
2001100e:	e000      	b.n	20011012 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
20011010:	2300      	movs	r3, #0
  }
}
20011012:	4618      	mov	r0, r3
20011014:	370c      	adds	r7, #12
20011016:	46bd      	mov	sp, r7
20011018:	f85d 7b04 	ldr.w	r7, [sp], #4
2001101c:	4770      	bx	lr
2001101e:	bf00      	nop
20011020:	e000e100 	.word	0xe000e100

20011024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20011024:	b480      	push	{r7}
20011026:	b083      	sub	sp, #12
20011028:	af00      	add	r7, sp, #0
2001102a:	4603      	mov	r3, r0
2001102c:	6039      	str	r1, [r7, #0]
2001102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20011030:	f997 3007 	ldrsb.w	r3, [r7, #7]
20011034:	2b00      	cmp	r3, #0
20011036:	db0a      	blt.n	2001104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20011038:	683b      	ldr	r3, [r7, #0]
2001103a:	b2da      	uxtb	r2, r3
2001103c:	490c      	ldr	r1, [pc, #48]	; (20011070 <__NVIC_SetPriority+0x4c>)
2001103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20011042:	0112      	lsls	r2, r2, #4
20011044:	b2d2      	uxtb	r2, r2
20011046:	440b      	add	r3, r1
20011048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
2001104c:	e00a      	b.n	20011064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2001104e:	683b      	ldr	r3, [r7, #0]
20011050:	b2da      	uxtb	r2, r3
20011052:	4908      	ldr	r1, [pc, #32]	; (20011074 <__NVIC_SetPriority+0x50>)
20011054:	79fb      	ldrb	r3, [r7, #7]
20011056:	f003 030f 	and.w	r3, r3, #15
2001105a:	3b04      	subs	r3, #4
2001105c:	0112      	lsls	r2, r2, #4
2001105e:	b2d2      	uxtb	r2, r2
20011060:	440b      	add	r3, r1
20011062:	761a      	strb	r2, [r3, #24]
}
20011064:	bf00      	nop
20011066:	370c      	adds	r7, #12
20011068:	46bd      	mov	sp, r7
2001106a:	f85d 7b04 	ldr.w	r7, [sp], #4
2001106e:	4770      	bx	lr
20011070:	e000e100 	.word	0xe000e100
20011074:	e000ed00 	.word	0xe000ed00

20011078 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
20011078:	b480      	push	{r7}
2001107a:	b083      	sub	sp, #12
2001107c:	af00      	add	r7, sp, #0
2001107e:	4603      	mov	r3, r0
20011080:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
20011082:	f997 3007 	ldrsb.w	r3, [r7, #7]
20011086:	2b00      	cmp	r3, #0
20011088:	db09      	blt.n	2001109e <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
2001108a:	4a0d      	ldr	r2, [pc, #52]	; (200110c0 <__NVIC_GetPriority+0x48>)
2001108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20011090:	4413      	add	r3, r2
20011092:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
20011096:	b2db      	uxtb	r3, r3
20011098:	091b      	lsrs	r3, r3, #4
2001109a:	b2db      	uxtb	r3, r3
2001109c:	e009      	b.n	200110b2 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
2001109e:	4a09      	ldr	r2, [pc, #36]	; (200110c4 <__NVIC_GetPriority+0x4c>)
200110a0:	79fb      	ldrb	r3, [r7, #7]
200110a2:	f003 030f 	and.w	r3, r3, #15
200110a6:	3b04      	subs	r3, #4
200110a8:	4413      	add	r3, r2
200110aa:	7e1b      	ldrb	r3, [r3, #24]
200110ac:	b2db      	uxtb	r3, r3
200110ae:	091b      	lsrs	r3, r3, #4
200110b0:	b2db      	uxtb	r3, r3
  }
}
200110b2:	4618      	mov	r0, r3
200110b4:	370c      	adds	r7, #12
200110b6:	46bd      	mov	sp, r7
200110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200110bc:	4770      	bx	lr
200110be:	bf00      	nop
200110c0:	e000e100 	.word	0xe000e100
200110c4:	e000ed00 	.word	0xe000ed00

200110c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
200110c8:	b480      	push	{r7}
200110ca:	b089      	sub	sp, #36	; 0x24
200110cc:	af00      	add	r7, sp, #0
200110ce:	60f8      	str	r0, [r7, #12]
200110d0:	60b9      	str	r1, [r7, #8]
200110d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
200110d4:	68fb      	ldr	r3, [r7, #12]
200110d6:	f003 0307 	and.w	r3, r3, #7
200110da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200110dc:	69fb      	ldr	r3, [r7, #28]
200110de:	f1c3 0307 	rsb	r3, r3, #7
200110e2:	2b04      	cmp	r3, #4
200110e4:	bf28      	it	cs
200110e6:	2304      	movcs	r3, #4
200110e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200110ea:	69fb      	ldr	r3, [r7, #28]
200110ec:	3304      	adds	r3, #4
200110ee:	2b06      	cmp	r3, #6
200110f0:	d902      	bls.n	200110f8 <NVIC_EncodePriority+0x30>
200110f2:	69fb      	ldr	r3, [r7, #28]
200110f4:	3b03      	subs	r3, #3
200110f6:	e000      	b.n	200110fa <NVIC_EncodePriority+0x32>
200110f8:	2300      	movs	r3, #0
200110fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200110fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20011100:	69bb      	ldr	r3, [r7, #24]
20011102:	fa02 f303 	lsl.w	r3, r2, r3
20011106:	43da      	mvns	r2, r3
20011108:	68bb      	ldr	r3, [r7, #8]
2001110a:	401a      	ands	r2, r3
2001110c:	697b      	ldr	r3, [r7, #20]
2001110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20011110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
20011114:	697b      	ldr	r3, [r7, #20]
20011116:	fa01 f303 	lsl.w	r3, r1, r3
2001111a:	43d9      	mvns	r1, r3
2001111c:	687b      	ldr	r3, [r7, #4]
2001111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20011120:	4313      	orrs	r3, r2
         );
}
20011122:	4618      	mov	r0, r3
20011124:	3724      	adds	r7, #36	; 0x24
20011126:	46bd      	mov	sp, r7
20011128:	f85d 7b04 	ldr.w	r7, [sp], #4
2001112c:	4770      	bx	lr

2001112e <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
2001112e:	b480      	push	{r7}
20011130:	b089      	sub	sp, #36	; 0x24
20011132:	af00      	add	r7, sp, #0
20011134:	60f8      	str	r0, [r7, #12]
20011136:	60b9      	str	r1, [r7, #8]
20011138:	607a      	str	r2, [r7, #4]
2001113a:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2001113c:	68bb      	ldr	r3, [r7, #8]
2001113e:	f003 0307 	and.w	r3, r3, #7
20011142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20011144:	69fb      	ldr	r3, [r7, #28]
20011146:	f1c3 0307 	rsb	r3, r3, #7
2001114a:	2b04      	cmp	r3, #4
2001114c:	bf28      	it	cs
2001114e:	2304      	movcs	r3, #4
20011150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20011152:	69fb      	ldr	r3, [r7, #28]
20011154:	3304      	adds	r3, #4
20011156:	2b06      	cmp	r3, #6
20011158:	d902      	bls.n	20011160 <NVIC_DecodePriority+0x32>
2001115a:	69fb      	ldr	r3, [r7, #28]
2001115c:	3b03      	subs	r3, #3
2001115e:	e000      	b.n	20011162 <NVIC_DecodePriority+0x34>
20011160:	2300      	movs	r3, #0
20011162:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
20011164:	68fa      	ldr	r2, [r7, #12]
20011166:	697b      	ldr	r3, [r7, #20]
20011168:	40da      	lsrs	r2, r3
2001116a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
2001116e:	69bb      	ldr	r3, [r7, #24]
20011170:	fa01 f303 	lsl.w	r3, r1, r3
20011174:	43db      	mvns	r3, r3
20011176:	401a      	ands	r2, r3
20011178:	687b      	ldr	r3, [r7, #4]
2001117a:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
2001117c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20011180:	697b      	ldr	r3, [r7, #20]
20011182:	fa02 f303 	lsl.w	r3, r2, r3
20011186:	43da      	mvns	r2, r3
20011188:	68fb      	ldr	r3, [r7, #12]
2001118a:	401a      	ands	r2, r3
2001118c:	683b      	ldr	r3, [r7, #0]
2001118e:	601a      	str	r2, [r3, #0]
}
20011190:	bf00      	nop
20011192:	3724      	adds	r7, #36	; 0x24
20011194:	46bd      	mov	sp, r7
20011196:	f85d 7b04 	ldr.w	r7, [sp], #4
2001119a:	4770      	bx	lr

2001119c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
2001119c:	b480      	push	{r7}
2001119e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
200111a0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
200111a4:	4b05      	ldr	r3, [pc, #20]	; (200111bc <__NVIC_SystemReset+0x20>)
200111a6:	68db      	ldr	r3, [r3, #12]
200111a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
200111ac:	4903      	ldr	r1, [pc, #12]	; (200111bc <__NVIC_SystemReset+0x20>)
200111ae:	4b04      	ldr	r3, [pc, #16]	; (200111c0 <__NVIC_SystemReset+0x24>)
200111b0:	4313      	orrs	r3, r2
200111b2:	60cb      	str	r3, [r1, #12]
200111b4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
200111b8:	bf00      	nop
200111ba:	e7fd      	b.n	200111b8 <__NVIC_SystemReset+0x1c>
200111bc:	e000ed00 	.word	0xe000ed00
200111c0:	05fa0004 	.word	0x05fa0004

200111c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
200111c4:	b580      	push	{r7, lr}
200111c6:	b082      	sub	sp, #8
200111c8:	af00      	add	r7, sp, #0
200111ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
200111cc:	687b      	ldr	r3, [r7, #4]
200111ce:	3b01      	subs	r3, #1
200111d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
200111d4:	d301      	bcc.n	200111da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
200111d6:	2301      	movs	r3, #1
200111d8:	e00f      	b.n	200111fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200111da:	4a0a      	ldr	r2, [pc, #40]	; (20011204 <SysTick_Config+0x40>)
200111dc:	687b      	ldr	r3, [r7, #4]
200111de:	3b01      	subs	r3, #1
200111e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
200111e2:	210f      	movs	r1, #15
200111e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
200111e8:	f7ff ff1c 	bl	20011024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
200111ec:	4b05      	ldr	r3, [pc, #20]	; (20011204 <SysTick_Config+0x40>)
200111ee:	2200      	movs	r2, #0
200111f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200111f2:	4b04      	ldr	r3, [pc, #16]	; (20011204 <SysTick_Config+0x40>)
200111f4:	2207      	movs	r2, #7
200111f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200111f8:	2300      	movs	r3, #0
}
200111fa:	4618      	mov	r0, r3
200111fc:	3708      	adds	r7, #8
200111fe:	46bd      	mov	sp, r7
20011200:	bd80      	pop	{r7, pc}
20011202:	bf00      	nop
20011204:	e000e010 	.word	0xe000e010

20011208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20011208:	b580      	push	{r7, lr}
2001120a:	b082      	sub	sp, #8
2001120c:	af00      	add	r7, sp, #0
2001120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20011210:	6878      	ldr	r0, [r7, #4]
20011212:	f7ff fe15 	bl	20010e40 <__NVIC_SetPriorityGrouping>
}
20011216:	bf00      	nop
20011218:	3708      	adds	r7, #8
2001121a:	46bd      	mov	sp, r7
2001121c:	bd80      	pop	{r7, pc}

2001121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2001121e:	b580      	push	{r7, lr}
20011220:	b086      	sub	sp, #24
20011222:	af00      	add	r7, sp, #0
20011224:	4603      	mov	r3, r0
20011226:	60b9      	str	r1, [r7, #8]
20011228:	607a      	str	r2, [r7, #4]
2001122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
2001122c:	2300      	movs	r3, #0
2001122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20011230:	f7ff fe2a 	bl	20010e88 <__NVIC_GetPriorityGrouping>
20011234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20011236:	687a      	ldr	r2, [r7, #4]
20011238:	68b9      	ldr	r1, [r7, #8]
2001123a:	6978      	ldr	r0, [r7, #20]
2001123c:	f7ff ff44 	bl	200110c8 <NVIC_EncodePriority>
20011240:	4602      	mov	r2, r0
20011242:	f997 300f 	ldrsb.w	r3, [r7, #15]
20011246:	4611      	mov	r1, r2
20011248:	4618      	mov	r0, r3
2001124a:	f7ff feeb 	bl	20011024 <__NVIC_SetPriority>
}
2001124e:	bf00      	nop
20011250:	3718      	adds	r7, #24
20011252:	46bd      	mov	sp, r7
20011254:	bd80      	pop	{r7, pc}

20011256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
20011256:	b580      	push	{r7, lr}
20011258:	b082      	sub	sp, #8
2001125a:	af00      	add	r7, sp, #0
2001125c:	4603      	mov	r3, r0
2001125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20011260:	f997 3007 	ldrsb.w	r3, [r7, #7]
20011264:	4618      	mov	r0, r3
20011266:	f7ff fe1d 	bl	20010ea4 <__NVIC_EnableIRQ>
}
2001126a:	bf00      	nop
2001126c:	3708      	adds	r7, #8
2001126e:	46bd      	mov	sp, r7
20011270:	bd80      	pop	{r7, pc}

20011272 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
20011272:	b580      	push	{r7, lr}
20011274:	b082      	sub	sp, #8
20011276:	af00      	add	r7, sp, #0
20011278:	4603      	mov	r3, r0
2001127a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
2001127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20011280:	4618      	mov	r0, r3
20011282:	f7ff fe2d 	bl	20010ee0 <__NVIC_DisableIRQ>
}
20011286:	bf00      	nop
20011288:	3708      	adds	r7, #8
2001128a:	46bd      	mov	sp, r7
2001128c:	bd80      	pop	{r7, pc}

2001128e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
2001128e:	b580      	push	{r7, lr}
20011290:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
20011292:	f7ff ff83 	bl	2001119c <__NVIC_SystemReset>

20011296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20011296:	b580      	push	{r7, lr}
20011298:	b082      	sub	sp, #8
2001129a:	af00      	add	r7, sp, #0
2001129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2001129e:	6878      	ldr	r0, [r7, #4]
200112a0:	f7ff ff90 	bl	200111c4 <SysTick_Config>
200112a4:	4603      	mov	r3, r0
}
200112a6:	4618      	mov	r0, r3
200112a8:	3708      	adds	r7, #8
200112aa:	46bd      	mov	sp, r7
200112ac:	bd80      	pop	{r7, pc}
	...

200112b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
200112b0:	b480      	push	{r7}
200112b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
200112b4:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
200112b8:	4b06      	ldr	r3, [pc, #24]	; (200112d4 <HAL_MPU_Disable+0x24>)
200112ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200112bc:	4a05      	ldr	r2, [pc, #20]	; (200112d4 <HAL_MPU_Disable+0x24>)
200112be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
200112c2:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
200112c4:	4b04      	ldr	r3, [pc, #16]	; (200112d8 <HAL_MPU_Disable+0x28>)
200112c6:	2200      	movs	r2, #0
200112c8:	605a      	str	r2, [r3, #4]
}
200112ca:	bf00      	nop
200112cc:	46bd      	mov	sp, r7
200112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200112d2:	4770      	bx	lr
200112d4:	e000ed00 	.word	0xe000ed00
200112d8:	e000ed90 	.word	0xe000ed90

200112dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
200112dc:	b480      	push	{r7}
200112de:	b083      	sub	sp, #12
200112e0:	af00      	add	r7, sp, #0
200112e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
200112e4:	4a0a      	ldr	r2, [pc, #40]	; (20011310 <HAL_MPU_Enable+0x34>)
200112e6:	687b      	ldr	r3, [r7, #4]
200112e8:	f043 0301 	orr.w	r3, r3, #1
200112ec:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
200112ee:	4b09      	ldr	r3, [pc, #36]	; (20011314 <HAL_MPU_Enable+0x38>)
200112f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200112f2:	4a08      	ldr	r2, [pc, #32]	; (20011314 <HAL_MPU_Enable+0x38>)
200112f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200112f8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
200112fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
200112fe:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
20011302:	bf00      	nop
20011304:	370c      	adds	r7, #12
20011306:	46bd      	mov	sp, r7
20011308:	f85d 7b04 	ldr.w	r7, [sp], #4
2001130c:	4770      	bx	lr
2001130e:	bf00      	nop
20011310:	e000ed90 	.word	0xe000ed90
20011314:	e000ed00 	.word	0xe000ed00

20011318 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
20011318:	b480      	push	{r7}
2001131a:	b083      	sub	sp, #12
2001131c:	af00      	add	r7, sp, #0
2001131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
20011320:	687b      	ldr	r3, [r7, #4]
20011322:	785a      	ldrb	r2, [r3, #1]
20011324:	4b1d      	ldr	r3, [pc, #116]	; (2001139c <HAL_MPU_ConfigRegion+0x84>)
20011326:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
20011328:	687b      	ldr	r3, [r7, #4]
2001132a:	781b      	ldrb	r3, [r3, #0]
2001132c:	2b00      	cmp	r3, #0
2001132e:	d029      	beq.n	20011384 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
20011330:	4a1a      	ldr	r2, [pc, #104]	; (2001139c <HAL_MPU_ConfigRegion+0x84>)
20011332:	687b      	ldr	r3, [r7, #4]
20011334:	685b      	ldr	r3, [r3, #4]
20011336:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
20011338:	687b      	ldr	r3, [r7, #4]
2001133a:	7b1b      	ldrb	r3, [r3, #12]
2001133c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
2001133e:	687b      	ldr	r3, [r7, #4]
20011340:	7adb      	ldrb	r3, [r3, #11]
20011342:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
20011344:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
20011346:	687b      	ldr	r3, [r7, #4]
20011348:	7a9b      	ldrb	r3, [r3, #10]
2001134a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
2001134c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
2001134e:	687b      	ldr	r3, [r7, #4]
20011350:	7b5b      	ldrb	r3, [r3, #13]
20011352:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
20011354:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
20011356:	687b      	ldr	r3, [r7, #4]
20011358:	7b9b      	ldrb	r3, [r3, #14]
2001135a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
2001135c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
2001135e:	687b      	ldr	r3, [r7, #4]
20011360:	7bdb      	ldrb	r3, [r3, #15]
20011362:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
20011364:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
20011366:	687b      	ldr	r3, [r7, #4]
20011368:	7a5b      	ldrb	r3, [r3, #9]
2001136a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
2001136c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
2001136e:	687b      	ldr	r3, [r7, #4]
20011370:	7a1b      	ldrb	r3, [r3, #8]
20011372:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
20011374:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
20011376:	687a      	ldr	r2, [r7, #4]
20011378:	7812      	ldrb	r2, [r2, #0]
2001137a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
2001137c:	4a07      	ldr	r2, [pc, #28]	; (2001139c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
2001137e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
20011380:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
20011382:	e005      	b.n	20011390 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
20011384:	4b05      	ldr	r3, [pc, #20]	; (2001139c <HAL_MPU_ConfigRegion+0x84>)
20011386:	2200      	movs	r2, #0
20011388:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
2001138a:	4b04      	ldr	r3, [pc, #16]	; (2001139c <HAL_MPU_ConfigRegion+0x84>)
2001138c:	2200      	movs	r2, #0
2001138e:	611a      	str	r2, [r3, #16]
}
20011390:	bf00      	nop
20011392:	370c      	adds	r7, #12
20011394:	46bd      	mov	sp, r7
20011396:	f85d 7b04 	ldr.w	r7, [sp], #4
2001139a:	4770      	bx	lr
2001139c:	e000ed90 	.word	0xe000ed90

200113a0 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
200113a0:	b580      	push	{r7, lr}
200113a2:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
200113a4:	f7ff fd70 	bl	20010e88 <__NVIC_GetPriorityGrouping>
200113a8:	4603      	mov	r3, r0
}
200113aa:	4618      	mov	r0, r3
200113ac:	bd80      	pop	{r7, pc}

200113ae <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
200113ae:	b580      	push	{r7, lr}
200113b0:	b084      	sub	sp, #16
200113b2:	af00      	add	r7, sp, #0
200113b4:	60b9      	str	r1, [r7, #8]
200113b6:	607a      	str	r2, [r7, #4]
200113b8:	603b      	str	r3, [r7, #0]
200113ba:	4603      	mov	r3, r0
200113bc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
200113be:	f997 300f 	ldrsb.w	r3, [r7, #15]
200113c2:	4618      	mov	r0, r3
200113c4:	f7ff fe58 	bl	20011078 <__NVIC_GetPriority>
200113c8:	683b      	ldr	r3, [r7, #0]
200113ca:	687a      	ldr	r2, [r7, #4]
200113cc:	68b9      	ldr	r1, [r7, #8]
200113ce:	f7ff feae 	bl	2001112e <NVIC_DecodePriority>
}
200113d2:	bf00      	nop
200113d4:	3710      	adds	r7, #16
200113d6:	46bd      	mov	sp, r7
200113d8:	bd80      	pop	{r7, pc}

200113da <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
200113da:	b580      	push	{r7, lr}
200113dc:	b082      	sub	sp, #8
200113de:	af00      	add	r7, sp, #0
200113e0:	4603      	mov	r3, r0
200113e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
200113e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
200113e8:	4618      	mov	r0, r3
200113ea:	f7ff fdbd 	bl	20010f68 <__NVIC_SetPendingIRQ>
}
200113ee:	bf00      	nop
200113f0:	3708      	adds	r7, #8
200113f2:	46bd      	mov	sp, r7
200113f4:	bd80      	pop	{r7, pc}

200113f6 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
200113f6:	b580      	push	{r7, lr}
200113f8:	b082      	sub	sp, #8
200113fa:	af00      	add	r7, sp, #0
200113fc:	4603      	mov	r3, r0
200113fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
20011400:	f997 3007 	ldrsb.w	r3, [r7, #7]
20011404:	4618      	mov	r0, r3
20011406:	f7ff fd8d 	bl	20010f24 <__NVIC_GetPendingIRQ>
2001140a:	4603      	mov	r3, r0
}
2001140c:	4618      	mov	r0, r3
2001140e:	3708      	adds	r7, #8
20011410:	46bd      	mov	sp, r7
20011412:	bd80      	pop	{r7, pc}

20011414 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20011414:	b580      	push	{r7, lr}
20011416:	b082      	sub	sp, #8
20011418:	af00      	add	r7, sp, #0
2001141a:	4603      	mov	r3, r0
2001141c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
2001141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20011422:	4618      	mov	r0, r3
20011424:	f7ff fdbe 	bl	20010fa4 <__NVIC_ClearPendingIRQ>
}
20011428:	bf00      	nop
2001142a:	3708      	adds	r7, #8
2001142c:	46bd      	mov	sp, r7
2001142e:	bd80      	pop	{r7, pc}

20011430 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
20011430:	b580      	push	{r7, lr}
20011432:	b082      	sub	sp, #8
20011434:	af00      	add	r7, sp, #0
20011436:	4603      	mov	r3, r0
20011438:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
2001143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2001143e:	4618      	mov	r0, r3
20011440:	f7ff fdce 	bl	20010fe0 <__NVIC_GetActive>
20011444:	4603      	mov	r3, r0
}
20011446:	4618      	mov	r0, r3
20011448:	3708      	adds	r7, #8
2001144a:	46bd      	mov	sp, r7
2001144c:	bd80      	pop	{r7, pc}
	...

20011450 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
20011450:	b480      	push	{r7}
20011452:	b083      	sub	sp, #12
20011454:	af00      	add	r7, sp, #0
20011456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
20011458:	687b      	ldr	r3, [r7, #4]
2001145a:	2b04      	cmp	r3, #4
2001145c:	d106      	bne.n	2001146c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
2001145e:	4b09      	ldr	r3, [pc, #36]	; (20011484 <HAL_SYSTICK_CLKSourceConfig+0x34>)
20011460:	681b      	ldr	r3, [r3, #0]
20011462:	4a08      	ldr	r2, [pc, #32]	; (20011484 <HAL_SYSTICK_CLKSourceConfig+0x34>)
20011464:	f043 0304 	orr.w	r3, r3, #4
20011468:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
2001146a:	e005      	b.n	20011478 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
2001146c:	4b05      	ldr	r3, [pc, #20]	; (20011484 <HAL_SYSTICK_CLKSourceConfig+0x34>)
2001146e:	681b      	ldr	r3, [r3, #0]
20011470:	4a04      	ldr	r2, [pc, #16]	; (20011484 <HAL_SYSTICK_CLKSourceConfig+0x34>)
20011472:	f023 0304 	bic.w	r3, r3, #4
20011476:	6013      	str	r3, [r2, #0]
}
20011478:	bf00      	nop
2001147a:	370c      	adds	r7, #12
2001147c:	46bd      	mov	sp, r7
2001147e:	f85d 7b04 	ldr.w	r7, [sp], #4
20011482:	4770      	bx	lr
20011484:	e000e010 	.word	0xe000e010

20011488 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
20011488:	b580      	push	{r7, lr}
2001148a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
2001148c:	f000 f802 	bl	20011494 <HAL_SYSTICK_Callback>
}
20011490:	bf00      	nop
20011492:	bd80      	pop	{r7, pc}

20011494 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
20011494:	b480      	push	{r7}
20011496:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
20011498:	bf00      	nop
2001149a:	46bd      	mov	sp, r7
2001149c:	f85d 7b04 	ldr.w	r7, [sp], #4
200114a0:	4770      	bx	lr
	...

200114a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
200114a4:	b580      	push	{r7, lr}
200114a6:	b086      	sub	sp, #24
200114a8:	af00      	add	r7, sp, #0
200114aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
200114ac:	2300      	movs	r3, #0
200114ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
200114b0:	f7ff fb78 	bl	20010ba4 <HAL_GetTick>
200114b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
200114b6:	687b      	ldr	r3, [r7, #4]
200114b8:	2b00      	cmp	r3, #0
200114ba:	d101      	bne.n	200114c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
200114bc:	2301      	movs	r3, #1
200114be:	e099      	b.n	200115f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
200114c0:	687b      	ldr	r3, [r7, #4]
200114c2:	2200      	movs	r2, #0
200114c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
200114c8:	687b      	ldr	r3, [r7, #4]
200114ca:	2202      	movs	r2, #2
200114cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
200114d0:	687b      	ldr	r3, [r7, #4]
200114d2:	681b      	ldr	r3, [r3, #0]
200114d4:	681a      	ldr	r2, [r3, #0]
200114d6:	687b      	ldr	r3, [r7, #4]
200114d8:	681b      	ldr	r3, [r3, #0]
200114da:	f022 0201 	bic.w	r2, r2, #1
200114de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
200114e0:	e00f      	b.n	20011502 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
200114e2:	f7ff fb5f 	bl	20010ba4 <HAL_GetTick>
200114e6:	4602      	mov	r2, r0
200114e8:	693b      	ldr	r3, [r7, #16]
200114ea:	1ad3      	subs	r3, r2, r3
200114ec:	2b05      	cmp	r3, #5
200114ee:	d908      	bls.n	20011502 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
200114f0:	687b      	ldr	r3, [r7, #4]
200114f2:	2220      	movs	r2, #32
200114f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
200114f6:	687b      	ldr	r3, [r7, #4]
200114f8:	2203      	movs	r2, #3
200114fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
200114fe:	2303      	movs	r3, #3
20011500:	e078      	b.n	200115f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20011502:	687b      	ldr	r3, [r7, #4]
20011504:	681b      	ldr	r3, [r3, #0]
20011506:	681b      	ldr	r3, [r3, #0]
20011508:	f003 0301 	and.w	r3, r3, #1
2001150c:	2b00      	cmp	r3, #0
2001150e:	d1e8      	bne.n	200114e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
20011510:	687b      	ldr	r3, [r7, #4]
20011512:	681b      	ldr	r3, [r3, #0]
20011514:	681b      	ldr	r3, [r3, #0]
20011516:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
20011518:	697a      	ldr	r2, [r7, #20]
2001151a:	4b38      	ldr	r3, [pc, #224]	; (200115fc <HAL_DMA_Init+0x158>)
2001151c:	4013      	ands	r3, r2
2001151e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
20011520:	687b      	ldr	r3, [r7, #4]
20011522:	685a      	ldr	r2, [r3, #4]
20011524:	687b      	ldr	r3, [r7, #4]
20011526:	689b      	ldr	r3, [r3, #8]
20011528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2001152a:	687b      	ldr	r3, [r7, #4]
2001152c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
2001152e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
20011530:	687b      	ldr	r3, [r7, #4]
20011532:	691b      	ldr	r3, [r3, #16]
20011534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
20011536:	687b      	ldr	r3, [r7, #4]
20011538:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2001153a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2001153c:	687b      	ldr	r3, [r7, #4]
2001153e:	699b      	ldr	r3, [r3, #24]
20011540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
20011542:	687b      	ldr	r3, [r7, #4]
20011544:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
20011546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
20011548:	687b      	ldr	r3, [r7, #4]
2001154a:	6a1b      	ldr	r3, [r3, #32]
2001154c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
2001154e:	697a      	ldr	r2, [r7, #20]
20011550:	4313      	orrs	r3, r2
20011552:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
20011554:	687b      	ldr	r3, [r7, #4]
20011556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20011558:	2b04      	cmp	r3, #4
2001155a:	d107      	bne.n	2001156c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
2001155c:	687b      	ldr	r3, [r7, #4]
2001155e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20011560:	687b      	ldr	r3, [r7, #4]
20011562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20011564:	4313      	orrs	r3, r2
20011566:	697a      	ldr	r2, [r7, #20]
20011568:	4313      	orrs	r3, r2
2001156a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
2001156c:	687b      	ldr	r3, [r7, #4]
2001156e:	681b      	ldr	r3, [r3, #0]
20011570:	697a      	ldr	r2, [r7, #20]
20011572:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
20011574:	687b      	ldr	r3, [r7, #4]
20011576:	681b      	ldr	r3, [r3, #0]
20011578:	695b      	ldr	r3, [r3, #20]
2001157a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
2001157c:	697b      	ldr	r3, [r7, #20]
2001157e:	f023 0307 	bic.w	r3, r3, #7
20011582:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
20011584:	687b      	ldr	r3, [r7, #4]
20011586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20011588:	697a      	ldr	r2, [r7, #20]
2001158a:	4313      	orrs	r3, r2
2001158c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2001158e:	687b      	ldr	r3, [r7, #4]
20011590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20011592:	2b04      	cmp	r3, #4
20011594:	d117      	bne.n	200115c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
20011596:	687b      	ldr	r3, [r7, #4]
20011598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2001159a:	697a      	ldr	r2, [r7, #20]
2001159c:	4313      	orrs	r3, r2
2001159e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
200115a0:	687b      	ldr	r3, [r7, #4]
200115a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200115a4:	2b00      	cmp	r3, #0
200115a6:	d00e      	beq.n	200115c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
200115a8:	6878      	ldr	r0, [r7, #4]
200115aa:	f000 fd51 	bl	20012050 <DMA_CheckFifoParam>
200115ae:	4603      	mov	r3, r0
200115b0:	2b00      	cmp	r3, #0
200115b2:	d008      	beq.n	200115c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
200115b4:	687b      	ldr	r3, [r7, #4]
200115b6:	2240      	movs	r2, #64	; 0x40
200115b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
200115ba:	687b      	ldr	r3, [r7, #4]
200115bc:	2201      	movs	r2, #1
200115be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
200115c2:	2301      	movs	r3, #1
200115c4:	e016      	b.n	200115f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
200115c6:	687b      	ldr	r3, [r7, #4]
200115c8:	681b      	ldr	r3, [r3, #0]
200115ca:	697a      	ldr	r2, [r7, #20]
200115cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
200115ce:	6878      	ldr	r0, [r7, #4]
200115d0:	f000 fd08 	bl	20011fe4 <DMA_CalcBaseAndBitshift>
200115d4:	4603      	mov	r3, r0
200115d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
200115d8:	687b      	ldr	r3, [r7, #4]
200115da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200115dc:	223f      	movs	r2, #63	; 0x3f
200115de:	409a      	lsls	r2, r3
200115e0:	68fb      	ldr	r3, [r7, #12]
200115e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
200115e4:	687b      	ldr	r3, [r7, #4]
200115e6:	2200      	movs	r2, #0
200115e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
200115ea:	687b      	ldr	r3, [r7, #4]
200115ec:	2201      	movs	r2, #1
200115ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
200115f2:	2300      	movs	r3, #0
}
200115f4:	4618      	mov	r0, r3
200115f6:	3718      	adds	r7, #24
200115f8:	46bd      	mov	sp, r7
200115fa:	bd80      	pop	{r7, pc}
200115fc:	f010803f 	.word	0xf010803f

20011600 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
20011600:	b580      	push	{r7, lr}
20011602:	b084      	sub	sp, #16
20011604:	af00      	add	r7, sp, #0
20011606:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
20011608:	687b      	ldr	r3, [r7, #4]
2001160a:	2b00      	cmp	r3, #0
2001160c:	d101      	bne.n	20011612 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
2001160e:	2301      	movs	r3, #1
20011610:	e050      	b.n	200116b4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
20011612:	687b      	ldr	r3, [r7, #4]
20011614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20011618:	b2db      	uxtb	r3, r3
2001161a:	2b02      	cmp	r3, #2
2001161c:	d101      	bne.n	20011622 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
2001161e:	2302      	movs	r3, #2
20011620:	e048      	b.n	200116b4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
20011622:	687b      	ldr	r3, [r7, #4]
20011624:	681b      	ldr	r3, [r3, #0]
20011626:	681a      	ldr	r2, [r3, #0]
20011628:	687b      	ldr	r3, [r7, #4]
2001162a:	681b      	ldr	r3, [r3, #0]
2001162c:	f022 0201 	bic.w	r2, r2, #1
20011630:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
20011632:	687b      	ldr	r3, [r7, #4]
20011634:	681b      	ldr	r3, [r3, #0]
20011636:	2200      	movs	r2, #0
20011638:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
2001163a:	687b      	ldr	r3, [r7, #4]
2001163c:	681b      	ldr	r3, [r3, #0]
2001163e:	2200      	movs	r2, #0
20011640:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
20011642:	687b      	ldr	r3, [r7, #4]
20011644:	681b      	ldr	r3, [r3, #0]
20011646:	2200      	movs	r2, #0
20011648:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
2001164a:	687b      	ldr	r3, [r7, #4]
2001164c:	681b      	ldr	r3, [r3, #0]
2001164e:	2200      	movs	r2, #0
20011650:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
20011652:	687b      	ldr	r3, [r7, #4]
20011654:	681b      	ldr	r3, [r3, #0]
20011656:	2200      	movs	r2, #0
20011658:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
2001165a:	687b      	ldr	r3, [r7, #4]
2001165c:	681b      	ldr	r3, [r3, #0]
2001165e:	2221      	movs	r2, #33	; 0x21
20011660:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
20011662:	6878      	ldr	r0, [r7, #4]
20011664:	f000 fcbe 	bl	20011fe4 <DMA_CalcBaseAndBitshift>
20011668:	4603      	mov	r3, r0
2001166a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
2001166c:	687b      	ldr	r3, [r7, #4]
2001166e:	2200      	movs	r2, #0
20011670:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
20011672:	687b      	ldr	r3, [r7, #4]
20011674:	2200      	movs	r2, #0
20011676:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
20011678:	687b      	ldr	r3, [r7, #4]
2001167a:	2200      	movs	r2, #0
2001167c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
2001167e:	687b      	ldr	r3, [r7, #4]
20011680:	2200      	movs	r2, #0
20011682:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
20011684:	687b      	ldr	r3, [r7, #4]
20011686:	2200      	movs	r2, #0
20011688:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
2001168a:	687b      	ldr	r3, [r7, #4]
2001168c:	2200      	movs	r2, #0
2001168e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20011690:	687b      	ldr	r3, [r7, #4]
20011692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011694:	223f      	movs	r2, #63	; 0x3f
20011696:	409a      	lsls	r2, r3
20011698:	68fb      	ldr	r3, [r7, #12]
2001169a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2001169c:	687b      	ldr	r3, [r7, #4]
2001169e:	2200      	movs	r2, #0
200116a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
200116a2:	687b      	ldr	r3, [r7, #4]
200116a4:	2200      	movs	r2, #0
200116a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
200116aa:	687b      	ldr	r3, [r7, #4]
200116ac:	2200      	movs	r2, #0
200116ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
200116b2:	2300      	movs	r3, #0
}
200116b4:	4618      	mov	r0, r3
200116b6:	3710      	adds	r7, #16
200116b8:	46bd      	mov	sp, r7
200116ba:	bd80      	pop	{r7, pc}

200116bc <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
200116bc:	b580      	push	{r7, lr}
200116be:	b086      	sub	sp, #24
200116c0:	af00      	add	r7, sp, #0
200116c2:	60f8      	str	r0, [r7, #12]
200116c4:	60b9      	str	r1, [r7, #8]
200116c6:	607a      	str	r2, [r7, #4]
200116c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200116ca:	2300      	movs	r3, #0
200116cc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
200116ce:	68fb      	ldr	r3, [r7, #12]
200116d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200116d4:	2b01      	cmp	r3, #1
200116d6:	d101      	bne.n	200116dc <HAL_DMA_Start+0x20>
200116d8:	2302      	movs	r3, #2
200116da:	e026      	b.n	2001172a <HAL_DMA_Start+0x6e>
200116dc:	68fb      	ldr	r3, [r7, #12]
200116de:	2201      	movs	r2, #1
200116e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
200116e4:	68fb      	ldr	r3, [r7, #12]
200116e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200116ea:	b2db      	uxtb	r3, r3
200116ec:	2b01      	cmp	r3, #1
200116ee:	d115      	bne.n	2001171c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
200116f0:	68fb      	ldr	r3, [r7, #12]
200116f2:	2202      	movs	r2, #2
200116f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
200116f8:	68fb      	ldr	r3, [r7, #12]
200116fa:	2200      	movs	r2, #0
200116fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
200116fe:	683b      	ldr	r3, [r7, #0]
20011700:	687a      	ldr	r2, [r7, #4]
20011702:	68b9      	ldr	r1, [r7, #8]
20011704:	68f8      	ldr	r0, [r7, #12]
20011706:	f000 fc3f 	bl	20011f88 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
2001170a:	68fb      	ldr	r3, [r7, #12]
2001170c:	681b      	ldr	r3, [r3, #0]
2001170e:	681a      	ldr	r2, [r3, #0]
20011710:	68fb      	ldr	r3, [r7, #12]
20011712:	681b      	ldr	r3, [r3, #0]
20011714:	f042 0201 	orr.w	r2, r2, #1
20011718:	601a      	str	r2, [r3, #0]
2001171a:	e005      	b.n	20011728 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
2001171c:	68fb      	ldr	r3, [r7, #12]
2001171e:	2200      	movs	r2, #0
20011720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
20011724:	2302      	movs	r3, #2
20011726:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
20011728:	7dfb      	ldrb	r3, [r7, #23]
}
2001172a:	4618      	mov	r0, r3
2001172c:	3718      	adds	r7, #24
2001172e:	46bd      	mov	sp, r7
20011730:	bd80      	pop	{r7, pc}

20011732 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20011732:	b580      	push	{r7, lr}
20011734:	b086      	sub	sp, #24
20011736:	af00      	add	r7, sp, #0
20011738:	60f8      	str	r0, [r7, #12]
2001173a:	60b9      	str	r1, [r7, #8]
2001173c:	607a      	str	r2, [r7, #4]
2001173e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20011740:	2300      	movs	r3, #0
20011742:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20011744:	68fb      	ldr	r3, [r7, #12]
20011746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20011748:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
2001174a:	68fb      	ldr	r3, [r7, #12]
2001174c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20011750:	2b01      	cmp	r3, #1
20011752:	d101      	bne.n	20011758 <HAL_DMA_Start_IT+0x26>
20011754:	2302      	movs	r3, #2
20011756:	e040      	b.n	200117da <HAL_DMA_Start_IT+0xa8>
20011758:	68fb      	ldr	r3, [r7, #12]
2001175a:	2201      	movs	r2, #1
2001175c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
20011760:	68fb      	ldr	r3, [r7, #12]
20011762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20011766:	b2db      	uxtb	r3, r3
20011768:	2b01      	cmp	r3, #1
2001176a:	d12f      	bne.n	200117cc <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
2001176c:	68fb      	ldr	r3, [r7, #12]
2001176e:	2202      	movs	r2, #2
20011770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20011774:	68fb      	ldr	r3, [r7, #12]
20011776:	2200      	movs	r2, #0
20011778:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
2001177a:	683b      	ldr	r3, [r7, #0]
2001177c:	687a      	ldr	r2, [r7, #4]
2001177e:	68b9      	ldr	r1, [r7, #8]
20011780:	68f8      	ldr	r0, [r7, #12]
20011782:	f000 fc01 	bl	20011f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20011786:	68fb      	ldr	r3, [r7, #12]
20011788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2001178a:	223f      	movs	r2, #63	; 0x3f
2001178c:	409a      	lsls	r2, r3
2001178e:	693b      	ldr	r3, [r7, #16]
20011790:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
20011792:	68fb      	ldr	r3, [r7, #12]
20011794:	681b      	ldr	r3, [r3, #0]
20011796:	681a      	ldr	r2, [r3, #0]
20011798:	68fb      	ldr	r3, [r7, #12]
2001179a:	681b      	ldr	r3, [r3, #0]
2001179c:	f042 0216 	orr.w	r2, r2, #22
200117a0:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
200117a2:	68fb      	ldr	r3, [r7, #12]
200117a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200117a6:	2b00      	cmp	r3, #0
200117a8:	d007      	beq.n	200117ba <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
200117aa:	68fb      	ldr	r3, [r7, #12]
200117ac:	681b      	ldr	r3, [r3, #0]
200117ae:	681a      	ldr	r2, [r3, #0]
200117b0:	68fb      	ldr	r3, [r7, #12]
200117b2:	681b      	ldr	r3, [r3, #0]
200117b4:	f042 0208 	orr.w	r2, r2, #8
200117b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
200117ba:	68fb      	ldr	r3, [r7, #12]
200117bc:	681b      	ldr	r3, [r3, #0]
200117be:	681a      	ldr	r2, [r3, #0]
200117c0:	68fb      	ldr	r3, [r7, #12]
200117c2:	681b      	ldr	r3, [r3, #0]
200117c4:	f042 0201 	orr.w	r2, r2, #1
200117c8:	601a      	str	r2, [r3, #0]
200117ca:	e005      	b.n	200117d8 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
200117cc:	68fb      	ldr	r3, [r7, #12]
200117ce:	2200      	movs	r2, #0
200117d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
200117d4:	2302      	movs	r3, #2
200117d6:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
200117d8:	7dfb      	ldrb	r3, [r7, #23]
}
200117da:	4618      	mov	r0, r3
200117dc:	3718      	adds	r7, #24
200117de:	46bd      	mov	sp, r7
200117e0:	bd80      	pop	{r7, pc}

200117e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
200117e2:	b580      	push	{r7, lr}
200117e4:	b084      	sub	sp, #16
200117e6:	af00      	add	r7, sp, #0
200117e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
200117ea:	687b      	ldr	r3, [r7, #4]
200117ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200117ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
200117f0:	f7ff f9d8 	bl	20010ba4 <HAL_GetTick>
200117f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
200117f6:	687b      	ldr	r3, [r7, #4]
200117f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200117fc:	b2db      	uxtb	r3, r3
200117fe:	2b02      	cmp	r3, #2
20011800:	d008      	beq.n	20011814 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20011802:	687b      	ldr	r3, [r7, #4]
20011804:	2280      	movs	r2, #128	; 0x80
20011806:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20011808:	687b      	ldr	r3, [r7, #4]
2001180a:	2200      	movs	r2, #0
2001180c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
20011810:	2301      	movs	r3, #1
20011812:	e052      	b.n	200118ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20011814:	687b      	ldr	r3, [r7, #4]
20011816:	681b      	ldr	r3, [r3, #0]
20011818:	681a      	ldr	r2, [r3, #0]
2001181a:	687b      	ldr	r3, [r7, #4]
2001181c:	681b      	ldr	r3, [r3, #0]
2001181e:	f022 0216 	bic.w	r2, r2, #22
20011822:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
20011824:	687b      	ldr	r3, [r7, #4]
20011826:	681b      	ldr	r3, [r3, #0]
20011828:	695a      	ldr	r2, [r3, #20]
2001182a:	687b      	ldr	r3, [r7, #4]
2001182c:	681b      	ldr	r3, [r3, #0]
2001182e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20011832:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20011834:	687b      	ldr	r3, [r7, #4]
20011836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20011838:	2b00      	cmp	r3, #0
2001183a:	d103      	bne.n	20011844 <HAL_DMA_Abort+0x62>
2001183c:	687b      	ldr	r3, [r7, #4]
2001183e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20011840:	2b00      	cmp	r3, #0
20011842:	d007      	beq.n	20011854 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
20011844:	687b      	ldr	r3, [r7, #4]
20011846:	681b      	ldr	r3, [r3, #0]
20011848:	681a      	ldr	r2, [r3, #0]
2001184a:	687b      	ldr	r3, [r7, #4]
2001184c:	681b      	ldr	r3, [r3, #0]
2001184e:	f022 0208 	bic.w	r2, r2, #8
20011852:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
20011854:	687b      	ldr	r3, [r7, #4]
20011856:	681b      	ldr	r3, [r3, #0]
20011858:	681a      	ldr	r2, [r3, #0]
2001185a:	687b      	ldr	r3, [r7, #4]
2001185c:	681b      	ldr	r3, [r3, #0]
2001185e:	f022 0201 	bic.w	r2, r2, #1
20011862:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20011864:	e013      	b.n	2001188e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
20011866:	f7ff f99d 	bl	20010ba4 <HAL_GetTick>
2001186a:	4602      	mov	r2, r0
2001186c:	68bb      	ldr	r3, [r7, #8]
2001186e:	1ad3      	subs	r3, r2, r3
20011870:	2b05      	cmp	r3, #5
20011872:	d90c      	bls.n	2001188e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20011874:	687b      	ldr	r3, [r7, #4]
20011876:	2220      	movs	r2, #32
20011878:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
2001187a:	687b      	ldr	r3, [r7, #4]
2001187c:	2200      	movs	r2, #0
2001187e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
20011882:	687b      	ldr	r3, [r7, #4]
20011884:	2203      	movs	r2, #3
20011886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
2001188a:	2303      	movs	r3, #3
2001188c:	e015      	b.n	200118ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
2001188e:	687b      	ldr	r3, [r7, #4]
20011890:	681b      	ldr	r3, [r3, #0]
20011892:	681b      	ldr	r3, [r3, #0]
20011894:	f003 0301 	and.w	r3, r3, #1
20011898:	2b00      	cmp	r3, #0
2001189a:	d1e4      	bne.n	20011866 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
2001189c:	687b      	ldr	r3, [r7, #4]
2001189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200118a0:	223f      	movs	r2, #63	; 0x3f
200118a2:	409a      	lsls	r2, r3
200118a4:	68fb      	ldr	r3, [r7, #12]
200118a6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
200118a8:	687b      	ldr	r3, [r7, #4]
200118aa:	2200      	movs	r2, #0
200118ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
200118b0:	687b      	ldr	r3, [r7, #4]
200118b2:	2201      	movs	r2, #1
200118b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
200118b8:	2300      	movs	r3, #0
}
200118ba:	4618      	mov	r0, r3
200118bc:	3710      	adds	r7, #16
200118be:	46bd      	mov	sp, r7
200118c0:	bd80      	pop	{r7, pc}

200118c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
200118c2:	b480      	push	{r7}
200118c4:	b083      	sub	sp, #12
200118c6:	af00      	add	r7, sp, #0
200118c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
200118ca:	687b      	ldr	r3, [r7, #4]
200118cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200118d0:	b2db      	uxtb	r3, r3
200118d2:	2b02      	cmp	r3, #2
200118d4:	d004      	beq.n	200118e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
200118d6:	687b      	ldr	r3, [r7, #4]
200118d8:	2280      	movs	r2, #128	; 0x80
200118da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
200118dc:	2301      	movs	r3, #1
200118de:	e00c      	b.n	200118fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
200118e0:	687b      	ldr	r3, [r7, #4]
200118e2:	2205      	movs	r2, #5
200118e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
200118e8:	687b      	ldr	r3, [r7, #4]
200118ea:	681b      	ldr	r3, [r3, #0]
200118ec:	681a      	ldr	r2, [r3, #0]
200118ee:	687b      	ldr	r3, [r7, #4]
200118f0:	681b      	ldr	r3, [r3, #0]
200118f2:	f022 0201 	bic.w	r2, r2, #1
200118f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
200118f8:	2300      	movs	r3, #0
}
200118fa:	4618      	mov	r0, r3
200118fc:	370c      	adds	r7, #12
200118fe:	46bd      	mov	sp, r7
20011900:	f85d 7b04 	ldr.w	r7, [sp], #4
20011904:	4770      	bx	lr

20011906 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
20011906:	b580      	push	{r7, lr}
20011908:	b08a      	sub	sp, #40	; 0x28
2001190a:	af00      	add	r7, sp, #0
2001190c:	60f8      	str	r0, [r7, #12]
2001190e:	460b      	mov	r3, r1
20011910:	607a      	str	r2, [r7, #4]
20011912:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
20011914:	2300      	movs	r3, #0
20011916:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
20011918:	f7ff f944 	bl	20010ba4 <HAL_GetTick>
2001191c:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
2001191e:	68fb      	ldr	r3, [r7, #12]
20011920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20011924:	b2db      	uxtb	r3, r3
20011926:	2b02      	cmp	r3, #2
20011928:	d008      	beq.n	2001193c <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2001192a:	68fb      	ldr	r3, [r7, #12]
2001192c:	2280      	movs	r2, #128	; 0x80
2001192e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
20011930:	68fb      	ldr	r3, [r7, #12]
20011932:	2200      	movs	r2, #0
20011934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
20011938:	2301      	movs	r3, #1
2001193a:	e0bf      	b.n	20011abc <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
2001193c:	68fb      	ldr	r3, [r7, #12]
2001193e:	681b      	ldr	r3, [r3, #0]
20011940:	681b      	ldr	r3, [r3, #0]
20011942:	f403 7380 	and.w	r3, r3, #256	; 0x100
20011946:	2b00      	cmp	r3, #0
20011948:	d005      	beq.n	20011956 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
2001194a:	68fb      	ldr	r3, [r7, #12]
2001194c:	f44f 7280 	mov.w	r2, #256	; 0x100
20011950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20011952:	2301      	movs	r3, #1
20011954:	e0b2      	b.n	20011abc <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20011956:	7afb      	ldrb	r3, [r7, #11]
20011958:	2b00      	cmp	r3, #0
2001195a:	d106      	bne.n	2001196a <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
2001195c:	68fb      	ldr	r3, [r7, #12]
2001195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011960:	2220      	movs	r2, #32
20011962:	fa02 f303 	lsl.w	r3, r2, r3
20011966:	627b      	str	r3, [r7, #36]	; 0x24
20011968:	e005      	b.n	20011976 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
2001196a:	68fb      	ldr	r3, [r7, #12]
2001196c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2001196e:	2210      	movs	r2, #16
20011970:	fa02 f303 	lsl.w	r3, r2, r3
20011974:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20011976:	68fb      	ldr	r3, [r7, #12]
20011978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2001197a:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
2001197c:	697b      	ldr	r3, [r7, #20]
2001197e:	681b      	ldr	r3, [r3, #0]
20011980:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20011982:	e05a      	b.n	20011a3a <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
20011984:	687b      	ldr	r3, [r7, #4]
20011986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
2001198a:	d017      	beq.n	200119bc <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
2001198c:	687b      	ldr	r3, [r7, #4]
2001198e:	2b00      	cmp	r3, #0
20011990:	d007      	beq.n	200119a2 <HAL_DMA_PollForTransfer+0x9c>
20011992:	f7ff f907 	bl	20010ba4 <HAL_GetTick>
20011996:	4602      	mov	r2, r0
20011998:	69bb      	ldr	r3, [r7, #24]
2001199a:	1ad3      	subs	r3, r2, r3
2001199c:	687a      	ldr	r2, [r7, #4]
2001199e:	429a      	cmp	r2, r3
200119a0:	d20c      	bcs.n	200119bc <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
200119a2:	68fb      	ldr	r3, [r7, #12]
200119a4:	2220      	movs	r2, #32
200119a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
200119a8:	68fb      	ldr	r3, [r7, #12]
200119aa:	2200      	movs	r2, #0
200119ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
200119b0:	68fb      	ldr	r3, [r7, #12]
200119b2:	2201      	movs	r2, #1
200119b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
200119b8:	2303      	movs	r3, #3
200119ba:	e07f      	b.n	20011abc <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
200119bc:	697b      	ldr	r3, [r7, #20]
200119be:	681b      	ldr	r3, [r3, #0]
200119c0:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
200119c2:	68fb      	ldr	r3, [r7, #12]
200119c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200119c6:	2208      	movs	r2, #8
200119c8:	409a      	lsls	r2, r3
200119ca:	6a3b      	ldr	r3, [r7, #32]
200119cc:	4013      	ands	r3, r2
200119ce:	2b00      	cmp	r3, #0
200119d0:	d00b      	beq.n	200119ea <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
200119d2:	68fb      	ldr	r3, [r7, #12]
200119d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200119d6:	f043 0201 	orr.w	r2, r3, #1
200119da:	68fb      	ldr	r3, [r7, #12]
200119dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
200119de:	68fb      	ldr	r3, [r7, #12]
200119e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200119e2:	2208      	movs	r2, #8
200119e4:	409a      	lsls	r2, r3
200119e6:	697b      	ldr	r3, [r7, #20]
200119e8:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
200119ea:	68fb      	ldr	r3, [r7, #12]
200119ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200119ee:	2201      	movs	r2, #1
200119f0:	409a      	lsls	r2, r3
200119f2:	6a3b      	ldr	r3, [r7, #32]
200119f4:	4013      	ands	r3, r2
200119f6:	2b00      	cmp	r3, #0
200119f8:	d00b      	beq.n	20011a12 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
200119fa:	68fb      	ldr	r3, [r7, #12]
200119fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200119fe:	f043 0202 	orr.w	r2, r3, #2
20011a02:	68fb      	ldr	r3, [r7, #12]
20011a04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20011a06:	68fb      	ldr	r3, [r7, #12]
20011a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011a0a:	2201      	movs	r2, #1
20011a0c:	409a      	lsls	r2, r3
20011a0e:	697b      	ldr	r3, [r7, #20]
20011a10:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20011a12:	68fb      	ldr	r3, [r7, #12]
20011a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011a16:	2204      	movs	r2, #4
20011a18:	409a      	lsls	r2, r3
20011a1a:	6a3b      	ldr	r3, [r7, #32]
20011a1c:	4013      	ands	r3, r2
20011a1e:	2b00      	cmp	r3, #0
20011a20:	d00b      	beq.n	20011a3a <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20011a22:	68fb      	ldr	r3, [r7, #12]
20011a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20011a26:	f043 0204 	orr.w	r2, r3, #4
20011a2a:	68fb      	ldr	r3, [r7, #12]
20011a2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20011a2e:	68fb      	ldr	r3, [r7, #12]
20011a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011a32:	2204      	movs	r2, #4
20011a34:	409a      	lsls	r2, r3
20011a36:	697b      	ldr	r3, [r7, #20]
20011a38:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20011a3a:	6a3a      	ldr	r2, [r7, #32]
20011a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20011a3e:	4013      	ands	r3, r2
20011a40:	2b00      	cmp	r3, #0
20011a42:	d105      	bne.n	20011a50 <HAL_DMA_PollForTransfer+0x14a>
20011a44:	68fb      	ldr	r3, [r7, #12]
20011a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20011a48:	f003 0301 	and.w	r3, r3, #1
20011a4c:	2b00      	cmp	r3, #0
20011a4e:	d099      	beq.n	20011984 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20011a50:	68fb      	ldr	r3, [r7, #12]
20011a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20011a54:	2b00      	cmp	r3, #0
20011a56:	d018      	beq.n	20011a8a <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20011a58:	68fb      	ldr	r3, [r7, #12]
20011a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20011a5c:	f003 0301 	and.w	r3, r3, #1
20011a60:	2b00      	cmp	r3, #0
20011a62:	d012      	beq.n	20011a8a <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
20011a64:	68f8      	ldr	r0, [r7, #12]
20011a66:	f7ff febc 	bl	200117e2 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20011a6a:	68fb      	ldr	r3, [r7, #12]
20011a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011a6e:	2230      	movs	r2, #48	; 0x30
20011a70:	409a      	lsls	r2, r3
20011a72:	697b      	ldr	r3, [r7, #20]
20011a74:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
20011a76:	68fb      	ldr	r3, [r7, #12]
20011a78:	2200      	movs	r2, #0
20011a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
20011a7e:	68fb      	ldr	r3, [r7, #12]
20011a80:	2201      	movs	r2, #1
20011a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
20011a86:	2301      	movs	r3, #1
20011a88:	e018      	b.n	20011abc <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20011a8a:	7afb      	ldrb	r3, [r7, #11]
20011a8c:	2b00      	cmp	r3, #0
20011a8e:	d10e      	bne.n	20011aae <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20011a90:	68fb      	ldr	r3, [r7, #12]
20011a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011a94:	2230      	movs	r2, #48	; 0x30
20011a96:	409a      	lsls	r2, r3
20011a98:	697b      	ldr	r3, [r7, #20]
20011a9a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20011a9c:	68fb      	ldr	r3, [r7, #12]
20011a9e:	2200      	movs	r2, #0
20011aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
20011aa4:	68fb      	ldr	r3, [r7, #12]
20011aa6:	2201      	movs	r2, #1
20011aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
20011aac:	e005      	b.n	20011aba <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
20011aae:	68fb      	ldr	r3, [r7, #12]
20011ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011ab2:	2210      	movs	r2, #16
20011ab4:	409a      	lsls	r2, r3
20011ab6:	697b      	ldr	r3, [r7, #20]
20011ab8:	609a      	str	r2, [r3, #8]
  }
  
  return status;
20011aba:	7ffb      	ldrb	r3, [r7, #31]
}
20011abc:	4618      	mov	r0, r3
20011abe:	3728      	adds	r7, #40	; 0x28
20011ac0:	46bd      	mov	sp, r7
20011ac2:	bd80      	pop	{r7, pc}

20011ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
20011ac4:	b580      	push	{r7, lr}
20011ac6:	b086      	sub	sp, #24
20011ac8:	af00      	add	r7, sp, #0
20011aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
20011acc:	2300      	movs	r3, #0
20011ace:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
20011ad0:	4b92      	ldr	r3, [pc, #584]	; (20011d1c <HAL_DMA_IRQHandler+0x258>)
20011ad2:	681b      	ldr	r3, [r3, #0]
20011ad4:	4a92      	ldr	r2, [pc, #584]	; (20011d20 <HAL_DMA_IRQHandler+0x25c>)
20011ad6:	fba2 2303 	umull	r2, r3, r2, r3
20011ada:	0a9b      	lsrs	r3, r3, #10
20011adc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20011ade:	687b      	ldr	r3, [r7, #4]
20011ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20011ae2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
20011ae4:	693b      	ldr	r3, [r7, #16]
20011ae6:	681b      	ldr	r3, [r3, #0]
20011ae8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20011aea:	687b      	ldr	r3, [r7, #4]
20011aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011aee:	2208      	movs	r2, #8
20011af0:	409a      	lsls	r2, r3
20011af2:	68fb      	ldr	r3, [r7, #12]
20011af4:	4013      	ands	r3, r2
20011af6:	2b00      	cmp	r3, #0
20011af8:	d01a      	beq.n	20011b30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
20011afa:	687b      	ldr	r3, [r7, #4]
20011afc:	681b      	ldr	r3, [r3, #0]
20011afe:	681b      	ldr	r3, [r3, #0]
20011b00:	f003 0304 	and.w	r3, r3, #4
20011b04:	2b00      	cmp	r3, #0
20011b06:	d013      	beq.n	20011b30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
20011b08:	687b      	ldr	r3, [r7, #4]
20011b0a:	681b      	ldr	r3, [r3, #0]
20011b0c:	681a      	ldr	r2, [r3, #0]
20011b0e:	687b      	ldr	r3, [r7, #4]
20011b10:	681b      	ldr	r3, [r3, #0]
20011b12:	f022 0204 	bic.w	r2, r2, #4
20011b16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20011b18:	687b      	ldr	r3, [r7, #4]
20011b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011b1c:	2208      	movs	r2, #8
20011b1e:	409a      	lsls	r2, r3
20011b20:	693b      	ldr	r3, [r7, #16]
20011b22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20011b24:	687b      	ldr	r3, [r7, #4]
20011b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20011b28:	f043 0201 	orr.w	r2, r3, #1
20011b2c:	687b      	ldr	r3, [r7, #4]
20011b2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20011b30:	687b      	ldr	r3, [r7, #4]
20011b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011b34:	2201      	movs	r2, #1
20011b36:	409a      	lsls	r2, r3
20011b38:	68fb      	ldr	r3, [r7, #12]
20011b3a:	4013      	ands	r3, r2
20011b3c:	2b00      	cmp	r3, #0
20011b3e:	d012      	beq.n	20011b66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
20011b40:	687b      	ldr	r3, [r7, #4]
20011b42:	681b      	ldr	r3, [r3, #0]
20011b44:	695b      	ldr	r3, [r3, #20]
20011b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
20011b4a:	2b00      	cmp	r3, #0
20011b4c:	d00b      	beq.n	20011b66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20011b4e:	687b      	ldr	r3, [r7, #4]
20011b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011b52:	2201      	movs	r2, #1
20011b54:	409a      	lsls	r2, r3
20011b56:	693b      	ldr	r3, [r7, #16]
20011b58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20011b5a:	687b      	ldr	r3, [r7, #4]
20011b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20011b5e:	f043 0202 	orr.w	r2, r3, #2
20011b62:	687b      	ldr	r3, [r7, #4]
20011b64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20011b66:	687b      	ldr	r3, [r7, #4]
20011b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011b6a:	2204      	movs	r2, #4
20011b6c:	409a      	lsls	r2, r3
20011b6e:	68fb      	ldr	r3, [r7, #12]
20011b70:	4013      	ands	r3, r2
20011b72:	2b00      	cmp	r3, #0
20011b74:	d012      	beq.n	20011b9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
20011b76:	687b      	ldr	r3, [r7, #4]
20011b78:	681b      	ldr	r3, [r3, #0]
20011b7a:	681b      	ldr	r3, [r3, #0]
20011b7c:	f003 0302 	and.w	r3, r3, #2
20011b80:	2b00      	cmp	r3, #0
20011b82:	d00b      	beq.n	20011b9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20011b84:	687b      	ldr	r3, [r7, #4]
20011b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011b88:	2204      	movs	r2, #4
20011b8a:	409a      	lsls	r2, r3
20011b8c:	693b      	ldr	r3, [r7, #16]
20011b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20011b90:	687b      	ldr	r3, [r7, #4]
20011b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20011b94:	f043 0204 	orr.w	r2, r3, #4
20011b98:	687b      	ldr	r3, [r7, #4]
20011b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
20011b9c:	687b      	ldr	r3, [r7, #4]
20011b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011ba0:	2210      	movs	r2, #16
20011ba2:	409a      	lsls	r2, r3
20011ba4:	68fb      	ldr	r3, [r7, #12]
20011ba6:	4013      	ands	r3, r2
20011ba8:	2b00      	cmp	r3, #0
20011baa:	d043      	beq.n	20011c34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
20011bac:	687b      	ldr	r3, [r7, #4]
20011bae:	681b      	ldr	r3, [r3, #0]
20011bb0:	681b      	ldr	r3, [r3, #0]
20011bb2:	f003 0308 	and.w	r3, r3, #8
20011bb6:	2b00      	cmp	r3, #0
20011bb8:	d03c      	beq.n	20011c34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
20011bba:	687b      	ldr	r3, [r7, #4]
20011bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011bbe:	2210      	movs	r2, #16
20011bc0:	409a      	lsls	r2, r3
20011bc2:	693b      	ldr	r3, [r7, #16]
20011bc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20011bc6:	687b      	ldr	r3, [r7, #4]
20011bc8:	681b      	ldr	r3, [r3, #0]
20011bca:	681b      	ldr	r3, [r3, #0]
20011bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20011bd0:	2b00      	cmp	r3, #0
20011bd2:	d018      	beq.n	20011c06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20011bd4:	687b      	ldr	r3, [r7, #4]
20011bd6:	681b      	ldr	r3, [r3, #0]
20011bd8:	681b      	ldr	r3, [r3, #0]
20011bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
20011bde:	2b00      	cmp	r3, #0
20011be0:	d108      	bne.n	20011bf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
20011be2:	687b      	ldr	r3, [r7, #4]
20011be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20011be6:	2b00      	cmp	r3, #0
20011be8:	d024      	beq.n	20011c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
20011bea:	687b      	ldr	r3, [r7, #4]
20011bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20011bee:	6878      	ldr	r0, [r7, #4]
20011bf0:	4798      	blx	r3
20011bf2:	e01f      	b.n	20011c34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
20011bf4:	687b      	ldr	r3, [r7, #4]
20011bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20011bf8:	2b00      	cmp	r3, #0
20011bfa:	d01b      	beq.n	20011c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
20011bfc:	687b      	ldr	r3, [r7, #4]
20011bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20011c00:	6878      	ldr	r0, [r7, #4]
20011c02:	4798      	blx	r3
20011c04:	e016      	b.n	20011c34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20011c06:	687b      	ldr	r3, [r7, #4]
20011c08:	681b      	ldr	r3, [r3, #0]
20011c0a:	681b      	ldr	r3, [r3, #0]
20011c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20011c10:	2b00      	cmp	r3, #0
20011c12:	d107      	bne.n	20011c24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
20011c14:	687b      	ldr	r3, [r7, #4]
20011c16:	681b      	ldr	r3, [r3, #0]
20011c18:	681a      	ldr	r2, [r3, #0]
20011c1a:	687b      	ldr	r3, [r7, #4]
20011c1c:	681b      	ldr	r3, [r3, #0]
20011c1e:	f022 0208 	bic.w	r2, r2, #8
20011c22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
20011c24:	687b      	ldr	r3, [r7, #4]
20011c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20011c28:	2b00      	cmp	r3, #0
20011c2a:	d003      	beq.n	20011c34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
20011c2c:	687b      	ldr	r3, [r7, #4]
20011c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20011c30:	6878      	ldr	r0, [r7, #4]
20011c32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
20011c34:	687b      	ldr	r3, [r7, #4]
20011c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011c38:	2220      	movs	r2, #32
20011c3a:	409a      	lsls	r2, r3
20011c3c:	68fb      	ldr	r3, [r7, #12]
20011c3e:	4013      	ands	r3, r2
20011c40:	2b00      	cmp	r3, #0
20011c42:	f000 808e 	beq.w	20011d62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
20011c46:	687b      	ldr	r3, [r7, #4]
20011c48:	681b      	ldr	r3, [r3, #0]
20011c4a:	681b      	ldr	r3, [r3, #0]
20011c4c:	f003 0310 	and.w	r3, r3, #16
20011c50:	2b00      	cmp	r3, #0
20011c52:	f000 8086 	beq.w	20011d62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
20011c56:	687b      	ldr	r3, [r7, #4]
20011c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011c5a:	2220      	movs	r2, #32
20011c5c:	409a      	lsls	r2, r3
20011c5e:	693b      	ldr	r3, [r7, #16]
20011c60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
20011c62:	687b      	ldr	r3, [r7, #4]
20011c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20011c68:	b2db      	uxtb	r3, r3
20011c6a:	2b05      	cmp	r3, #5
20011c6c:	d136      	bne.n	20011cdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20011c6e:	687b      	ldr	r3, [r7, #4]
20011c70:	681b      	ldr	r3, [r3, #0]
20011c72:	681a      	ldr	r2, [r3, #0]
20011c74:	687b      	ldr	r3, [r7, #4]
20011c76:	681b      	ldr	r3, [r3, #0]
20011c78:	f022 0216 	bic.w	r2, r2, #22
20011c7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
20011c7e:	687b      	ldr	r3, [r7, #4]
20011c80:	681b      	ldr	r3, [r3, #0]
20011c82:	695a      	ldr	r2, [r3, #20]
20011c84:	687b      	ldr	r3, [r7, #4]
20011c86:	681b      	ldr	r3, [r3, #0]
20011c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20011c8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20011c8e:	687b      	ldr	r3, [r7, #4]
20011c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20011c92:	2b00      	cmp	r3, #0
20011c94:	d103      	bne.n	20011c9e <HAL_DMA_IRQHandler+0x1da>
20011c96:	687b      	ldr	r3, [r7, #4]
20011c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20011c9a:	2b00      	cmp	r3, #0
20011c9c:	d007      	beq.n	20011cae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
20011c9e:	687b      	ldr	r3, [r7, #4]
20011ca0:	681b      	ldr	r3, [r3, #0]
20011ca2:	681a      	ldr	r2, [r3, #0]
20011ca4:	687b      	ldr	r3, [r7, #4]
20011ca6:	681b      	ldr	r3, [r3, #0]
20011ca8:	f022 0208 	bic.w	r2, r2, #8
20011cac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
20011cae:	687b      	ldr	r3, [r7, #4]
20011cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20011cb2:	223f      	movs	r2, #63	; 0x3f
20011cb4:	409a      	lsls	r2, r3
20011cb6:	693b      	ldr	r3, [r7, #16]
20011cb8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20011cba:	687b      	ldr	r3, [r7, #4]
20011cbc:	2200      	movs	r2, #0
20011cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20011cc2:	687b      	ldr	r3, [r7, #4]
20011cc4:	2201      	movs	r2, #1
20011cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
20011cca:	687b      	ldr	r3, [r7, #4]
20011ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20011cce:	2b00      	cmp	r3, #0
20011cd0:	d07d      	beq.n	20011dce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
20011cd2:	687b      	ldr	r3, [r7, #4]
20011cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20011cd6:	6878      	ldr	r0, [r7, #4]
20011cd8:	4798      	blx	r3
        }
        return;
20011cda:	e078      	b.n	20011dce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20011cdc:	687b      	ldr	r3, [r7, #4]
20011cde:	681b      	ldr	r3, [r3, #0]
20011ce0:	681b      	ldr	r3, [r3, #0]
20011ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20011ce6:	2b00      	cmp	r3, #0
20011ce8:	d01c      	beq.n	20011d24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20011cea:	687b      	ldr	r3, [r7, #4]
20011cec:	681b      	ldr	r3, [r3, #0]
20011cee:	681b      	ldr	r3, [r3, #0]
20011cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
20011cf4:	2b00      	cmp	r3, #0
20011cf6:	d108      	bne.n	20011d0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
20011cf8:	687b      	ldr	r3, [r7, #4]
20011cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20011cfc:	2b00      	cmp	r3, #0
20011cfe:	d030      	beq.n	20011d62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
20011d00:	687b      	ldr	r3, [r7, #4]
20011d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20011d04:	6878      	ldr	r0, [r7, #4]
20011d06:	4798      	blx	r3
20011d08:	e02b      	b.n	20011d62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
20011d0a:	687b      	ldr	r3, [r7, #4]
20011d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20011d0e:	2b00      	cmp	r3, #0
20011d10:	d027      	beq.n	20011d62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
20011d12:	687b      	ldr	r3, [r7, #4]
20011d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20011d16:	6878      	ldr	r0, [r7, #4]
20011d18:	4798      	blx	r3
20011d1a:	e022      	b.n	20011d62 <HAL_DMA_IRQHandler+0x29e>
20011d1c:	2000e4dc 	.word	0x2000e4dc
20011d20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20011d24:	687b      	ldr	r3, [r7, #4]
20011d26:	681b      	ldr	r3, [r3, #0]
20011d28:	681b      	ldr	r3, [r3, #0]
20011d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
20011d2e:	2b00      	cmp	r3, #0
20011d30:	d10f      	bne.n	20011d52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
20011d32:	687b      	ldr	r3, [r7, #4]
20011d34:	681b      	ldr	r3, [r3, #0]
20011d36:	681a      	ldr	r2, [r3, #0]
20011d38:	687b      	ldr	r3, [r7, #4]
20011d3a:	681b      	ldr	r3, [r3, #0]
20011d3c:	f022 0210 	bic.w	r2, r2, #16
20011d40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
20011d42:	687b      	ldr	r3, [r7, #4]
20011d44:	2200      	movs	r2, #0
20011d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
20011d4a:	687b      	ldr	r3, [r7, #4]
20011d4c:	2201      	movs	r2, #1
20011d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
20011d52:	687b      	ldr	r3, [r7, #4]
20011d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20011d56:	2b00      	cmp	r3, #0
20011d58:	d003      	beq.n	20011d62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
20011d5a:	687b      	ldr	r3, [r7, #4]
20011d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20011d5e:	6878      	ldr	r0, [r7, #4]
20011d60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20011d62:	687b      	ldr	r3, [r7, #4]
20011d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20011d66:	2b00      	cmp	r3, #0
20011d68:	d032      	beq.n	20011dd0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20011d6a:	687b      	ldr	r3, [r7, #4]
20011d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20011d6e:	f003 0301 	and.w	r3, r3, #1
20011d72:	2b00      	cmp	r3, #0
20011d74:	d022      	beq.n	20011dbc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
20011d76:	687b      	ldr	r3, [r7, #4]
20011d78:	2205      	movs	r2, #5
20011d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
20011d7e:	687b      	ldr	r3, [r7, #4]
20011d80:	681b      	ldr	r3, [r3, #0]
20011d82:	681a      	ldr	r2, [r3, #0]
20011d84:	687b      	ldr	r3, [r7, #4]
20011d86:	681b      	ldr	r3, [r3, #0]
20011d88:	f022 0201 	bic.w	r2, r2, #1
20011d8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
20011d8e:	68bb      	ldr	r3, [r7, #8]
20011d90:	3301      	adds	r3, #1
20011d92:	60bb      	str	r3, [r7, #8]
20011d94:	697a      	ldr	r2, [r7, #20]
20011d96:	429a      	cmp	r2, r3
20011d98:	d307      	bcc.n	20011daa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
20011d9a:	687b      	ldr	r3, [r7, #4]
20011d9c:	681b      	ldr	r3, [r3, #0]
20011d9e:	681b      	ldr	r3, [r3, #0]
20011da0:	f003 0301 	and.w	r3, r3, #1
20011da4:	2b00      	cmp	r3, #0
20011da6:	d1f2      	bne.n	20011d8e <HAL_DMA_IRQHandler+0x2ca>
20011da8:	e000      	b.n	20011dac <HAL_DMA_IRQHandler+0x2e8>
          break;
20011daa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
20011dac:	687b      	ldr	r3, [r7, #4]
20011dae:	2200      	movs	r2, #0
20011db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
20011db4:	687b      	ldr	r3, [r7, #4]
20011db6:	2201      	movs	r2, #1
20011db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
20011dbc:	687b      	ldr	r3, [r7, #4]
20011dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20011dc0:	2b00      	cmp	r3, #0
20011dc2:	d005      	beq.n	20011dd0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
20011dc4:	687b      	ldr	r3, [r7, #4]
20011dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20011dc8:	6878      	ldr	r0, [r7, #4]
20011dca:	4798      	blx	r3
20011dcc:	e000      	b.n	20011dd0 <HAL_DMA_IRQHandler+0x30c>
        return;
20011dce:	bf00      	nop
    }
  }
}
20011dd0:	3718      	adds	r7, #24
20011dd2:	46bd      	mov	sp, r7
20011dd4:	bd80      	pop	{r7, pc}
20011dd6:	bf00      	nop

20011dd8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
20011dd8:	b480      	push	{r7}
20011dda:	b087      	sub	sp, #28
20011ddc:	af00      	add	r7, sp, #0
20011dde:	60f8      	str	r0, [r7, #12]
20011de0:	460b      	mov	r3, r1
20011de2:	607a      	str	r2, [r7, #4]
20011de4:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
20011de6:	2300      	movs	r3, #0
20011de8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
20011dea:	68fb      	ldr	r3, [r7, #12]
20011dec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20011df0:	2b01      	cmp	r3, #1
20011df2:	d101      	bne.n	20011df8 <HAL_DMA_RegisterCallback+0x20>
20011df4:	2302      	movs	r3, #2
20011df6:	e03c      	b.n	20011e72 <HAL_DMA_RegisterCallback+0x9a>
20011df8:	68fb      	ldr	r3, [r7, #12]
20011dfa:	2201      	movs	r2, #1
20011dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
20011e00:	68fb      	ldr	r3, [r7, #12]
20011e02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20011e06:	b2db      	uxtb	r3, r3
20011e08:	2b01      	cmp	r3, #1
20011e0a:	d129      	bne.n	20011e60 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
20011e0c:	7afb      	ldrb	r3, [r7, #11]
20011e0e:	2b05      	cmp	r3, #5
20011e10:	d829      	bhi.n	20011e66 <HAL_DMA_RegisterCallback+0x8e>
20011e12:	a201      	add	r2, pc, #4	; (adr r2, 20011e18 <HAL_DMA_RegisterCallback+0x40>)
20011e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20011e18:	20011e31 	.word	0x20011e31
20011e1c:	20011e39 	.word	0x20011e39
20011e20:	20011e41 	.word	0x20011e41
20011e24:	20011e49 	.word	0x20011e49
20011e28:	20011e51 	.word	0x20011e51
20011e2c:	20011e59 	.word	0x20011e59
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
20011e30:	68fb      	ldr	r3, [r7, #12]
20011e32:	687a      	ldr	r2, [r7, #4]
20011e34:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
20011e36:	e017      	b.n	20011e68 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
20011e38:	68fb      	ldr	r3, [r7, #12]
20011e3a:	687a      	ldr	r2, [r7, #4]
20011e3c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
20011e3e:	e013      	b.n	20011e68 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
20011e40:	68fb      	ldr	r3, [r7, #12]
20011e42:	687a      	ldr	r2, [r7, #4]
20011e44:	645a      	str	r2, [r3, #68]	; 0x44
      break;
20011e46:	e00f      	b.n	20011e68 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
20011e48:	68fb      	ldr	r3, [r7, #12]
20011e4a:	687a      	ldr	r2, [r7, #4]
20011e4c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
20011e4e:	e00b      	b.n	20011e68 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
20011e50:	68fb      	ldr	r3, [r7, #12]
20011e52:	687a      	ldr	r2, [r7, #4]
20011e54:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
20011e56:	e007      	b.n	20011e68 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
20011e58:	68fb      	ldr	r3, [r7, #12]
20011e5a:	687a      	ldr	r2, [r7, #4]
20011e5c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
20011e5e:	e003      	b.n	20011e68 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
20011e60:	2301      	movs	r3, #1
20011e62:	75fb      	strb	r3, [r7, #23]
20011e64:	e000      	b.n	20011e68 <HAL_DMA_RegisterCallback+0x90>
      break;
20011e66:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
20011e68:	68fb      	ldr	r3, [r7, #12]
20011e6a:	2200      	movs	r2, #0
20011e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
20011e70:	7dfb      	ldrb	r3, [r7, #23]
}
20011e72:	4618      	mov	r0, r3
20011e74:	371c      	adds	r7, #28
20011e76:	46bd      	mov	sp, r7
20011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
20011e7c:	4770      	bx	lr
20011e7e:	bf00      	nop

20011e80 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
20011e80:	b480      	push	{r7}
20011e82:	b085      	sub	sp, #20
20011e84:	af00      	add	r7, sp, #0
20011e86:	6078      	str	r0, [r7, #4]
20011e88:	460b      	mov	r3, r1
20011e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
20011e8c:	2300      	movs	r3, #0
20011e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
20011e90:	687b      	ldr	r3, [r7, #4]
20011e92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20011e96:	2b01      	cmp	r3, #1
20011e98:	d101      	bne.n	20011e9e <HAL_DMA_UnRegisterCallback+0x1e>
20011e9a:	2302      	movs	r3, #2
20011e9c:	e054      	b.n	20011f48 <HAL_DMA_UnRegisterCallback+0xc8>
20011e9e:	687b      	ldr	r3, [r7, #4]
20011ea0:	2201      	movs	r2, #1
20011ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
20011ea6:	687b      	ldr	r3, [r7, #4]
20011ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20011eac:	b2db      	uxtb	r3, r3
20011eae:	2b01      	cmp	r3, #1
20011eb0:	d143      	bne.n	20011f3a <HAL_DMA_UnRegisterCallback+0xba>
  {
    switch (CallbackID)
20011eb2:	78fb      	ldrb	r3, [r7, #3]
20011eb4:	2b06      	cmp	r3, #6
20011eb6:	d83c      	bhi.n	20011f32 <HAL_DMA_UnRegisterCallback+0xb2>
20011eb8:	a201      	add	r2, pc, #4	; (adr r2, 20011ec0 <HAL_DMA_UnRegisterCallback+0x40>)
20011eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20011ebe:	bf00      	nop
20011ec0:	20011edd 	.word	0x20011edd
20011ec4:	20011ee5 	.word	0x20011ee5
20011ec8:	20011eed 	.word	0x20011eed
20011ecc:	20011ef5 	.word	0x20011ef5
20011ed0:	20011efd 	.word	0x20011efd
20011ed4:	20011f05 	.word	0x20011f05
20011ed8:	20011f0d 	.word	0x20011f0d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
20011edc:	687b      	ldr	r3, [r7, #4]
20011ede:	2200      	movs	r2, #0
20011ee0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
20011ee2:	e02c      	b.n	20011f3e <HAL_DMA_UnRegisterCallback+0xbe>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
20011ee4:	687b      	ldr	r3, [r7, #4]
20011ee6:	2200      	movs	r2, #0
20011ee8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
20011eea:	e028      	b.n	20011f3e <HAL_DMA_UnRegisterCallback+0xbe>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
20011eec:	687b      	ldr	r3, [r7, #4]
20011eee:	2200      	movs	r2, #0
20011ef0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
20011ef2:	e024      	b.n	20011f3e <HAL_DMA_UnRegisterCallback+0xbe>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
20011ef4:	687b      	ldr	r3, [r7, #4]
20011ef6:	2200      	movs	r2, #0
20011ef8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
20011efa:	e020      	b.n	20011f3e <HAL_DMA_UnRegisterCallback+0xbe>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
20011efc:	687b      	ldr	r3, [r7, #4]
20011efe:	2200      	movs	r2, #0
20011f00:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
20011f02:	e01c      	b.n	20011f3e <HAL_DMA_UnRegisterCallback+0xbe>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
20011f04:	687b      	ldr	r3, [r7, #4]
20011f06:	2200      	movs	r2, #0
20011f08:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
20011f0a:	e018      	b.n	20011f3e <HAL_DMA_UnRegisterCallback+0xbe>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
20011f0c:	687b      	ldr	r3, [r7, #4]
20011f0e:	2200      	movs	r2, #0
20011f10:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
20011f12:	687b      	ldr	r3, [r7, #4]
20011f14:	2200      	movs	r2, #0
20011f16:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
20011f18:	687b      	ldr	r3, [r7, #4]
20011f1a:	2200      	movs	r2, #0
20011f1c:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
20011f1e:	687b      	ldr	r3, [r7, #4]
20011f20:	2200      	movs	r2, #0
20011f22:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
20011f24:	687b      	ldr	r3, [r7, #4]
20011f26:	2200      	movs	r2, #0
20011f28:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
20011f2a:	687b      	ldr	r3, [r7, #4]
20011f2c:	2200      	movs	r2, #0
20011f2e:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
20011f30:	e005      	b.n	20011f3e <HAL_DMA_UnRegisterCallback+0xbe>
      
    default:
      status = HAL_ERROR;
20011f32:	2301      	movs	r3, #1
20011f34:	73fb      	strb	r3, [r7, #15]
      break;
20011f36:	bf00      	nop
20011f38:	e001      	b.n	20011f3e <HAL_DMA_UnRegisterCallback+0xbe>
    }
  }
  else
  {
    status = HAL_ERROR;
20011f3a:	2301      	movs	r3, #1
20011f3c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
20011f3e:	687b      	ldr	r3, [r7, #4]
20011f40:	2200      	movs	r2, #0
20011f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
20011f46:	7bfb      	ldrb	r3, [r7, #15]
}
20011f48:	4618      	mov	r0, r3
20011f4a:	3714      	adds	r7, #20
20011f4c:	46bd      	mov	sp, r7
20011f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
20011f52:	4770      	bx	lr

20011f54 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
20011f54:	b480      	push	{r7}
20011f56:	b083      	sub	sp, #12
20011f58:	af00      	add	r7, sp, #0
20011f5a:	6078      	str	r0, [r7, #4]
  return hdma->State;
20011f5c:	687b      	ldr	r3, [r7, #4]
20011f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20011f62:	b2db      	uxtb	r3, r3
}
20011f64:	4618      	mov	r0, r3
20011f66:	370c      	adds	r7, #12
20011f68:	46bd      	mov	sp, r7
20011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
20011f6e:	4770      	bx	lr

20011f70 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
20011f70:	b480      	push	{r7}
20011f72:	b083      	sub	sp, #12
20011f74:	af00      	add	r7, sp, #0
20011f76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
20011f78:	687b      	ldr	r3, [r7, #4]
20011f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
20011f7c:	4618      	mov	r0, r3
20011f7e:	370c      	adds	r7, #12
20011f80:	46bd      	mov	sp, r7
20011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
20011f86:	4770      	bx	lr

20011f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20011f88:	b480      	push	{r7}
20011f8a:	b085      	sub	sp, #20
20011f8c:	af00      	add	r7, sp, #0
20011f8e:	60f8      	str	r0, [r7, #12]
20011f90:	60b9      	str	r1, [r7, #8]
20011f92:	607a      	str	r2, [r7, #4]
20011f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
20011f96:	68fb      	ldr	r3, [r7, #12]
20011f98:	681b      	ldr	r3, [r3, #0]
20011f9a:	681a      	ldr	r2, [r3, #0]
20011f9c:	68fb      	ldr	r3, [r7, #12]
20011f9e:	681b      	ldr	r3, [r3, #0]
20011fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
20011fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
20011fa6:	68fb      	ldr	r3, [r7, #12]
20011fa8:	681b      	ldr	r3, [r3, #0]
20011faa:	683a      	ldr	r2, [r7, #0]
20011fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20011fae:	68fb      	ldr	r3, [r7, #12]
20011fb0:	689b      	ldr	r3, [r3, #8]
20011fb2:	2b40      	cmp	r3, #64	; 0x40
20011fb4:	d108      	bne.n	20011fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
20011fb6:	68fb      	ldr	r3, [r7, #12]
20011fb8:	681b      	ldr	r3, [r3, #0]
20011fba:	687a      	ldr	r2, [r7, #4]
20011fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
20011fbe:	68fb      	ldr	r3, [r7, #12]
20011fc0:	681b      	ldr	r3, [r3, #0]
20011fc2:	68ba      	ldr	r2, [r7, #8]
20011fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
20011fc6:	e007      	b.n	20011fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
20011fc8:	68fb      	ldr	r3, [r7, #12]
20011fca:	681b      	ldr	r3, [r3, #0]
20011fcc:	68ba      	ldr	r2, [r7, #8]
20011fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
20011fd0:	68fb      	ldr	r3, [r7, #12]
20011fd2:	681b      	ldr	r3, [r3, #0]
20011fd4:	687a      	ldr	r2, [r7, #4]
20011fd6:	60da      	str	r2, [r3, #12]
}
20011fd8:	bf00      	nop
20011fda:	3714      	adds	r7, #20
20011fdc:	46bd      	mov	sp, r7
20011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
20011fe2:	4770      	bx	lr

20011fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
20011fe4:	b480      	push	{r7}
20011fe6:	b085      	sub	sp, #20
20011fe8:	af00      	add	r7, sp, #0
20011fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20011fec:	687b      	ldr	r3, [r7, #4]
20011fee:	681b      	ldr	r3, [r3, #0]
20011ff0:	b2db      	uxtb	r3, r3
20011ff2:	3b10      	subs	r3, #16
20011ff4:	4a14      	ldr	r2, [pc, #80]	; (20012048 <DMA_CalcBaseAndBitshift+0x64>)
20011ff6:	fba2 2303 	umull	r2, r3, r2, r3
20011ffa:	091b      	lsrs	r3, r3, #4
20011ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
20011ffe:	4a13      	ldr	r2, [pc, #76]	; (2001204c <DMA_CalcBaseAndBitshift+0x68>)
20012000:	68fb      	ldr	r3, [r7, #12]
20012002:	4413      	add	r3, r2
20012004:	781b      	ldrb	r3, [r3, #0]
20012006:	461a      	mov	r2, r3
20012008:	687b      	ldr	r3, [r7, #4]
2001200a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
2001200c:	68fb      	ldr	r3, [r7, #12]
2001200e:	2b03      	cmp	r3, #3
20012010:	d909      	bls.n	20012026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
20012012:	687b      	ldr	r3, [r7, #4]
20012014:	681b      	ldr	r3, [r3, #0]
20012016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
2001201a:	f023 0303 	bic.w	r3, r3, #3
2001201e:	1d1a      	adds	r2, r3, #4
20012020:	687b      	ldr	r3, [r7, #4]
20012022:	659a      	str	r2, [r3, #88]	; 0x58
20012024:	e007      	b.n	20012036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
20012026:	687b      	ldr	r3, [r7, #4]
20012028:	681b      	ldr	r3, [r3, #0]
2001202a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
2001202e:	f023 0303 	bic.w	r3, r3, #3
20012032:	687a      	ldr	r2, [r7, #4]
20012034:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
20012036:	687b      	ldr	r3, [r7, #4]
20012038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
2001203a:	4618      	mov	r0, r3
2001203c:	3714      	adds	r7, #20
2001203e:	46bd      	mov	sp, r7
20012040:	f85d 7b04 	ldr.w	r7, [sp], #4
20012044:	4770      	bx	lr
20012046:	bf00      	nop
20012048:	aaaaaaab 	.word	0xaaaaaaab
2001204c:	20019fe8 	.word	0x20019fe8

20012050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
20012050:	b480      	push	{r7}
20012052:	b085      	sub	sp, #20
20012054:	af00      	add	r7, sp, #0
20012056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20012058:	2300      	movs	r3, #0
2001205a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
2001205c:	687b      	ldr	r3, [r7, #4]
2001205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20012060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
20012062:	687b      	ldr	r3, [r7, #4]
20012064:	699b      	ldr	r3, [r3, #24]
20012066:	2b00      	cmp	r3, #0
20012068:	d11f      	bne.n	200120aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
2001206a:	68bb      	ldr	r3, [r7, #8]
2001206c:	2b03      	cmp	r3, #3
2001206e:	d855      	bhi.n	2001211c <DMA_CheckFifoParam+0xcc>
20012070:	a201      	add	r2, pc, #4	; (adr r2, 20012078 <DMA_CheckFifoParam+0x28>)
20012072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20012076:	bf00      	nop
20012078:	20012089 	.word	0x20012089
2001207c:	2001209b 	.word	0x2001209b
20012080:	20012089 	.word	0x20012089
20012084:	2001211d 	.word	0x2001211d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20012088:	687b      	ldr	r3, [r7, #4]
2001208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2001208c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20012090:	2b00      	cmp	r3, #0
20012092:	d045      	beq.n	20012120 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
20012094:	2301      	movs	r3, #1
20012096:	73fb      	strb	r3, [r7, #15]
      }
      break;
20012098:	e042      	b.n	20012120 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
2001209a:	687b      	ldr	r3, [r7, #4]
2001209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2001209e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
200120a2:	d13f      	bne.n	20012124 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
200120a4:	2301      	movs	r3, #1
200120a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
200120a8:	e03c      	b.n	20012124 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
200120aa:	687b      	ldr	r3, [r7, #4]
200120ac:	699b      	ldr	r3, [r3, #24]
200120ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
200120b2:	d121      	bne.n	200120f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
200120b4:	68bb      	ldr	r3, [r7, #8]
200120b6:	2b03      	cmp	r3, #3
200120b8:	d836      	bhi.n	20012128 <DMA_CheckFifoParam+0xd8>
200120ba:	a201      	add	r2, pc, #4	; (adr r2, 200120c0 <DMA_CheckFifoParam+0x70>)
200120bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200120c0:	200120d1 	.word	0x200120d1
200120c4:	200120d7 	.word	0x200120d7
200120c8:	200120d1 	.word	0x200120d1
200120cc:	200120e9 	.word	0x200120e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
200120d0:	2301      	movs	r3, #1
200120d2:	73fb      	strb	r3, [r7, #15]
      break;
200120d4:	e02f      	b.n	20012136 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
200120d6:	687b      	ldr	r3, [r7, #4]
200120d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200120da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
200120de:	2b00      	cmp	r3, #0
200120e0:	d024      	beq.n	2001212c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
200120e2:	2301      	movs	r3, #1
200120e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
200120e6:	e021      	b.n	2001212c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
200120e8:	687b      	ldr	r3, [r7, #4]
200120ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200120ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
200120f0:	d11e      	bne.n	20012130 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
200120f2:	2301      	movs	r3, #1
200120f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
200120f6:	e01b      	b.n	20012130 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
200120f8:	68bb      	ldr	r3, [r7, #8]
200120fa:	2b02      	cmp	r3, #2
200120fc:	d902      	bls.n	20012104 <DMA_CheckFifoParam+0xb4>
200120fe:	2b03      	cmp	r3, #3
20012100:	d003      	beq.n	2001210a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
20012102:	e018      	b.n	20012136 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
20012104:	2301      	movs	r3, #1
20012106:	73fb      	strb	r3, [r7, #15]
      break;
20012108:	e015      	b.n	20012136 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
2001210a:	687b      	ldr	r3, [r7, #4]
2001210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2001210e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20012112:	2b00      	cmp	r3, #0
20012114:	d00e      	beq.n	20012134 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
20012116:	2301      	movs	r3, #1
20012118:	73fb      	strb	r3, [r7, #15]
      break;
2001211a:	e00b      	b.n	20012134 <DMA_CheckFifoParam+0xe4>
      break;
2001211c:	bf00      	nop
2001211e:	e00a      	b.n	20012136 <DMA_CheckFifoParam+0xe6>
      break;
20012120:	bf00      	nop
20012122:	e008      	b.n	20012136 <DMA_CheckFifoParam+0xe6>
      break;
20012124:	bf00      	nop
20012126:	e006      	b.n	20012136 <DMA_CheckFifoParam+0xe6>
      break;
20012128:	bf00      	nop
2001212a:	e004      	b.n	20012136 <DMA_CheckFifoParam+0xe6>
      break;
2001212c:	bf00      	nop
2001212e:	e002      	b.n	20012136 <DMA_CheckFifoParam+0xe6>
      break;   
20012130:	bf00      	nop
20012132:	e000      	b.n	20012136 <DMA_CheckFifoParam+0xe6>
      break;
20012134:	bf00      	nop
    }
  } 
  
  return status; 
20012136:	7bfb      	ldrb	r3, [r7, #15]
}
20012138:	4618      	mov	r0, r3
2001213a:	3714      	adds	r7, #20
2001213c:	46bd      	mov	sp, r7
2001213e:	f85d 7b04 	ldr.w	r7, [sp], #4
20012142:	4770      	bx	lr

20012144 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
20012144:	b580      	push	{r7, lr}
20012146:	b086      	sub	sp, #24
20012148:	af00      	add	r7, sp, #0
2001214a:	60f8      	str	r0, [r7, #12]
2001214c:	60b9      	str	r1, [r7, #8]
2001214e:	607a      	str	r2, [r7, #4]
20012150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20012152:	2300      	movs	r3, #0
20012154:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
20012156:	68fb      	ldr	r3, [r7, #12]
20012158:	689b      	ldr	r3, [r3, #8]
2001215a:	2b80      	cmp	r3, #128	; 0x80
2001215c:	d106      	bne.n	2001216c <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
2001215e:	68fb      	ldr	r3, [r7, #12]
20012160:	f44f 7280 	mov.w	r2, #256	; 0x100
20012164:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
20012166:	2301      	movs	r3, #1
20012168:	75fb      	strb	r3, [r7, #23]
2001216a:	e031      	b.n	200121d0 <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
2001216c:	68fb      	ldr	r3, [r7, #12]
2001216e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20012172:	2b01      	cmp	r3, #1
20012174:	d101      	bne.n	2001217a <HAL_DMAEx_MultiBufferStart+0x36>
20012176:	2302      	movs	r3, #2
20012178:	e02b      	b.n	200121d2 <HAL_DMAEx_MultiBufferStart+0x8e>
2001217a:	68fb      	ldr	r3, [r7, #12]
2001217c:	2201      	movs	r2, #1
2001217e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
20012182:	68fb      	ldr	r3, [r7, #12]
20012184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20012188:	b2db      	uxtb	r3, r3
2001218a:	2b01      	cmp	r3, #1
2001218c:	d11e      	bne.n	200121cc <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
2001218e:	68fb      	ldr	r3, [r7, #12]
20012190:	2202      	movs	r2, #2
20012192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
20012196:	68fb      	ldr	r3, [r7, #12]
20012198:	681b      	ldr	r3, [r3, #0]
2001219a:	681a      	ldr	r2, [r3, #0]
2001219c:	68fb      	ldr	r3, [r7, #12]
2001219e:	681b      	ldr	r3, [r3, #0]
200121a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
200121a4:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
200121a6:	68fb      	ldr	r3, [r7, #12]
200121a8:	681b      	ldr	r3, [r3, #0]
200121aa:	683a      	ldr	r2, [r7, #0]
200121ac:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
200121ae:	6a3b      	ldr	r3, [r7, #32]
200121b0:	687a      	ldr	r2, [r7, #4]
200121b2:	68b9      	ldr	r1, [r7, #8]
200121b4:	68f8      	ldr	r0, [r7, #12]
200121b6:	f001 f973 	bl	200134a0 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
200121ba:	68fb      	ldr	r3, [r7, #12]
200121bc:	681b      	ldr	r3, [r3, #0]
200121be:	681a      	ldr	r2, [r3, #0]
200121c0:	68fb      	ldr	r3, [r7, #12]
200121c2:	681b      	ldr	r3, [r3, #0]
200121c4:	f042 0201 	orr.w	r2, r2, #1
200121c8:	601a      	str	r2, [r3, #0]
200121ca:	e001      	b.n	200121d0 <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
200121cc:	2302      	movs	r3, #2
200121ce:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
200121d0:	7dfb      	ldrb	r3, [r7, #23]
}
200121d2:	4618      	mov	r0, r3
200121d4:	3718      	adds	r7, #24
200121d6:	46bd      	mov	sp, r7
200121d8:	bd80      	pop	{r7, pc}
	...

200121dc <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
200121dc:	b580      	push	{r7, lr}
200121de:	b086      	sub	sp, #24
200121e0:	af00      	add	r7, sp, #0
200121e2:	60f8      	str	r0, [r7, #12]
200121e4:	60b9      	str	r1, [r7, #8]
200121e6:	607a      	str	r2, [r7, #4]
200121e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200121ea:	2300      	movs	r3, #0
200121ec:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
200121ee:	68fb      	ldr	r3, [r7, #12]
200121f0:	689b      	ldr	r3, [r3, #8]
200121f2:	2b80      	cmp	r3, #128	; 0x80
200121f4:	d106      	bne.n	20012204 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
200121f6:	68fb      	ldr	r3, [r7, #12]
200121f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200121fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
200121fe:	2301      	movs	r3, #1
20012200:	f001 b913 	b.w	2001342a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
20012204:	68fb      	ldr	r3, [r7, #12]
20012206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20012208:	2b00      	cmp	r3, #0
2001220a:	d007      	beq.n	2001221c <HAL_DMAEx_MultiBufferStart_IT+0x40>
2001220c:	68fb      	ldr	r3, [r7, #12]
2001220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20012210:	2b00      	cmp	r3, #0
20012212:	d003      	beq.n	2001221c <HAL_DMAEx_MultiBufferStart_IT+0x40>
20012214:	68fb      	ldr	r3, [r7, #12]
20012216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20012218:	2b00      	cmp	r3, #0
2001221a:	d105      	bne.n	20012228 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2001221c:	68fb      	ldr	r3, [r7, #12]
2001221e:	2240      	movs	r2, #64	; 0x40
20012220:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20012222:	2301      	movs	r3, #1
20012224:	f001 b901 	b.w	2001342a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
20012228:	68fb      	ldr	r3, [r7, #12]
2001222a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
2001222e:	2b01      	cmp	r3, #1
20012230:	d102      	bne.n	20012238 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
20012232:	2302      	movs	r3, #2
20012234:	f001 b8f9 	b.w	2001342a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
20012238:	68fb      	ldr	r3, [r7, #12]
2001223a:	2201      	movs	r2, #1
2001223c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
20012240:	68fb      	ldr	r3, [r7, #12]
20012242:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20012246:	b2db      	uxtb	r3, r3
20012248:	2b01      	cmp	r3, #1
2001224a:	f041 80e7 	bne.w	2001341c <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
2001224e:	68fb      	ldr	r3, [r7, #12]
20012250:	2202      	movs	r2, #2
20012252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20012256:	68fb      	ldr	r3, [r7, #12]
20012258:	2200      	movs	r2, #0
2001225a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
2001225c:	68fb      	ldr	r3, [r7, #12]
2001225e:	681b      	ldr	r3, [r3, #0]
20012260:	681a      	ldr	r2, [r3, #0]
20012262:	68fb      	ldr	r3, [r7, #12]
20012264:	681b      	ldr	r3, [r3, #0]
20012266:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2001226a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
2001226c:	68fb      	ldr	r3, [r7, #12]
2001226e:	681b      	ldr	r3, [r3, #0]
20012270:	683a      	ldr	r2, [r7, #0]
20012272:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
20012274:	6a3b      	ldr	r3, [r7, #32]
20012276:	687a      	ldr	r2, [r7, #4]
20012278:	68b9      	ldr	r1, [r7, #8]
2001227a:	68f8      	ldr	r0, [r7, #12]
2001227c:	f001 f910 	bl	200134a0 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20012280:	68fb      	ldr	r3, [r7, #12]
20012282:	681b      	ldr	r3, [r3, #0]
20012284:	461a      	mov	r2, r3
20012286:	4b99      	ldr	r3, [pc, #612]	; (200124ec <HAL_DMAEx_MultiBufferStart_IT+0x310>)
20012288:	429a      	cmp	r2, r3
2001228a:	d960      	bls.n	2001234e <HAL_DMAEx_MultiBufferStart_IT+0x172>
2001228c:	68fb      	ldr	r3, [r7, #12]
2001228e:	681b      	ldr	r3, [r3, #0]
20012290:	4a97      	ldr	r2, [pc, #604]	; (200124f0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
20012292:	4293      	cmp	r3, r2
20012294:	d057      	beq.n	20012346 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
20012296:	68fb      	ldr	r3, [r7, #12]
20012298:	681b      	ldr	r3, [r3, #0]
2001229a:	4a96      	ldr	r2, [pc, #600]	; (200124f4 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
2001229c:	4293      	cmp	r3, r2
2001229e:	d050      	beq.n	20012342 <HAL_DMAEx_MultiBufferStart_IT+0x166>
200122a0:	68fb      	ldr	r3, [r7, #12]
200122a2:	681b      	ldr	r3, [r3, #0]
200122a4:	4a94      	ldr	r2, [pc, #592]	; (200124f8 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
200122a6:	4293      	cmp	r3, r2
200122a8:	d049      	beq.n	2001233e <HAL_DMAEx_MultiBufferStart_IT+0x162>
200122aa:	68fb      	ldr	r3, [r7, #12]
200122ac:	681b      	ldr	r3, [r3, #0]
200122ae:	4a93      	ldr	r2, [pc, #588]	; (200124fc <HAL_DMAEx_MultiBufferStart_IT+0x320>)
200122b0:	4293      	cmp	r3, r2
200122b2:	d042      	beq.n	2001233a <HAL_DMAEx_MultiBufferStart_IT+0x15e>
200122b4:	68fb      	ldr	r3, [r7, #12]
200122b6:	681b      	ldr	r3, [r3, #0]
200122b8:	4a91      	ldr	r2, [pc, #580]	; (20012500 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
200122ba:	4293      	cmp	r3, r2
200122bc:	d03a      	beq.n	20012334 <HAL_DMAEx_MultiBufferStart_IT+0x158>
200122be:	68fb      	ldr	r3, [r7, #12]
200122c0:	681b      	ldr	r3, [r3, #0]
200122c2:	4a90      	ldr	r2, [pc, #576]	; (20012504 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
200122c4:	4293      	cmp	r3, r2
200122c6:	d032      	beq.n	2001232e <HAL_DMAEx_MultiBufferStart_IT+0x152>
200122c8:	68fb      	ldr	r3, [r7, #12]
200122ca:	681b      	ldr	r3, [r3, #0]
200122cc:	4a8e      	ldr	r2, [pc, #568]	; (20012508 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
200122ce:	4293      	cmp	r3, r2
200122d0:	d02a      	beq.n	20012328 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
200122d2:	68fb      	ldr	r3, [r7, #12]
200122d4:	681b      	ldr	r3, [r3, #0]
200122d6:	4a8d      	ldr	r2, [pc, #564]	; (2001250c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
200122d8:	4293      	cmp	r3, r2
200122da:	d022      	beq.n	20012322 <HAL_DMAEx_MultiBufferStart_IT+0x146>
200122dc:	68fb      	ldr	r3, [r7, #12]
200122de:	681b      	ldr	r3, [r3, #0]
200122e0:	4a8b      	ldr	r2, [pc, #556]	; (20012510 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
200122e2:	4293      	cmp	r3, r2
200122e4:	d01a      	beq.n	2001231c <HAL_DMAEx_MultiBufferStart_IT+0x140>
200122e6:	68fb      	ldr	r3, [r7, #12]
200122e8:	681b      	ldr	r3, [r3, #0]
200122ea:	4a8a      	ldr	r2, [pc, #552]	; (20012514 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
200122ec:	4293      	cmp	r3, r2
200122ee:	d012      	beq.n	20012316 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
200122f0:	68fb      	ldr	r3, [r7, #12]
200122f2:	681b      	ldr	r3, [r3, #0]
200122f4:	4a88      	ldr	r2, [pc, #544]	; (20012518 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
200122f6:	4293      	cmp	r3, r2
200122f8:	d00a      	beq.n	20012310 <HAL_DMAEx_MultiBufferStart_IT+0x134>
200122fa:	68fb      	ldr	r3, [r7, #12]
200122fc:	681b      	ldr	r3, [r3, #0]
200122fe:	4a87      	ldr	r2, [pc, #540]	; (2001251c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
20012300:	4293      	cmp	r3, r2
20012302:	d102      	bne.n	2001230a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
20012304:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20012308:	e01e      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2001230a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
2001230e:	e01b      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20012310:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20012314:	e018      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20012316:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2001231a:	e015      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2001231c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20012320:	e012      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20012322:	f44f 6300 	mov.w	r3, #2048	; 0x800
20012326:	e00f      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20012328:	f44f 6300 	mov.w	r3, #2048	; 0x800
2001232c:	e00c      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2001232e:	f44f 6300 	mov.w	r3, #2048	; 0x800
20012332:	e009      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20012334:	f44f 6300 	mov.w	r3, #2048	; 0x800
20012338:	e006      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2001233a:	2320      	movs	r3, #32
2001233c:	e004      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2001233e:	2320      	movs	r3, #32
20012340:	e002      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20012342:	2320      	movs	r3, #32
20012344:	e000      	b.n	20012348 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20012346:	2320      	movs	r3, #32
20012348:	4a75      	ldr	r2, [pc, #468]	; (20012520 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
2001234a:	60d3      	str	r3, [r2, #12]
2001234c:	e150      	b.n	200125f0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
2001234e:	68fb      	ldr	r3, [r7, #12]
20012350:	681b      	ldr	r3, [r3, #0]
20012352:	461a      	mov	r2, r3
20012354:	4b73      	ldr	r3, [pc, #460]	; (20012524 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
20012356:	429a      	cmp	r2, r3
20012358:	d960      	bls.n	2001241c <HAL_DMAEx_MultiBufferStart_IT+0x240>
2001235a:	68fb      	ldr	r3, [r7, #12]
2001235c:	681b      	ldr	r3, [r3, #0]
2001235e:	4a64      	ldr	r2, [pc, #400]	; (200124f0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
20012360:	4293      	cmp	r3, r2
20012362:	d057      	beq.n	20012414 <HAL_DMAEx_MultiBufferStart_IT+0x238>
20012364:	68fb      	ldr	r3, [r7, #12]
20012366:	681b      	ldr	r3, [r3, #0]
20012368:	4a62      	ldr	r2, [pc, #392]	; (200124f4 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
2001236a:	4293      	cmp	r3, r2
2001236c:	d050      	beq.n	20012410 <HAL_DMAEx_MultiBufferStart_IT+0x234>
2001236e:	68fb      	ldr	r3, [r7, #12]
20012370:	681b      	ldr	r3, [r3, #0]
20012372:	4a61      	ldr	r2, [pc, #388]	; (200124f8 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
20012374:	4293      	cmp	r3, r2
20012376:	d049      	beq.n	2001240c <HAL_DMAEx_MultiBufferStart_IT+0x230>
20012378:	68fb      	ldr	r3, [r7, #12]
2001237a:	681b      	ldr	r3, [r3, #0]
2001237c:	4a5f      	ldr	r2, [pc, #380]	; (200124fc <HAL_DMAEx_MultiBufferStart_IT+0x320>)
2001237e:	4293      	cmp	r3, r2
20012380:	d042      	beq.n	20012408 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
20012382:	68fb      	ldr	r3, [r7, #12]
20012384:	681b      	ldr	r3, [r3, #0]
20012386:	4a5e      	ldr	r2, [pc, #376]	; (20012500 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
20012388:	4293      	cmp	r3, r2
2001238a:	d03a      	beq.n	20012402 <HAL_DMAEx_MultiBufferStart_IT+0x226>
2001238c:	68fb      	ldr	r3, [r7, #12]
2001238e:	681b      	ldr	r3, [r3, #0]
20012390:	4a5c      	ldr	r2, [pc, #368]	; (20012504 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
20012392:	4293      	cmp	r3, r2
20012394:	d032      	beq.n	200123fc <HAL_DMAEx_MultiBufferStart_IT+0x220>
20012396:	68fb      	ldr	r3, [r7, #12]
20012398:	681b      	ldr	r3, [r3, #0]
2001239a:	4a5b      	ldr	r2, [pc, #364]	; (20012508 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
2001239c:	4293      	cmp	r3, r2
2001239e:	d02a      	beq.n	200123f6 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
200123a0:	68fb      	ldr	r3, [r7, #12]
200123a2:	681b      	ldr	r3, [r3, #0]
200123a4:	4a59      	ldr	r2, [pc, #356]	; (2001250c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
200123a6:	4293      	cmp	r3, r2
200123a8:	d022      	beq.n	200123f0 <HAL_DMAEx_MultiBufferStart_IT+0x214>
200123aa:	68fb      	ldr	r3, [r7, #12]
200123ac:	681b      	ldr	r3, [r3, #0]
200123ae:	4a58      	ldr	r2, [pc, #352]	; (20012510 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
200123b0:	4293      	cmp	r3, r2
200123b2:	d01a      	beq.n	200123ea <HAL_DMAEx_MultiBufferStart_IT+0x20e>
200123b4:	68fb      	ldr	r3, [r7, #12]
200123b6:	681b      	ldr	r3, [r3, #0]
200123b8:	4a56      	ldr	r2, [pc, #344]	; (20012514 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
200123ba:	4293      	cmp	r3, r2
200123bc:	d012      	beq.n	200123e4 <HAL_DMAEx_MultiBufferStart_IT+0x208>
200123be:	68fb      	ldr	r3, [r7, #12]
200123c0:	681b      	ldr	r3, [r3, #0]
200123c2:	4a55      	ldr	r2, [pc, #340]	; (20012518 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
200123c4:	4293      	cmp	r3, r2
200123c6:	d00a      	beq.n	200123de <HAL_DMAEx_MultiBufferStart_IT+0x202>
200123c8:	68fb      	ldr	r3, [r7, #12]
200123ca:	681b      	ldr	r3, [r3, #0]
200123cc:	4a53      	ldr	r2, [pc, #332]	; (2001251c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
200123ce:	4293      	cmp	r3, r2
200123d0:	d102      	bne.n	200123d8 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
200123d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200123d6:	e01e      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200123d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200123dc:	e01b      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200123de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200123e2:	e018      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200123e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200123e8:	e015      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200123ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200123ee:	e012      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200123f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
200123f4:	e00f      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200123f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
200123fa:	e00c      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200123fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
20012400:	e009      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20012402:	f44f 6300 	mov.w	r3, #2048	; 0x800
20012406:	e006      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20012408:	2320      	movs	r3, #32
2001240a:	e004      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2001240c:	2320      	movs	r3, #32
2001240e:	e002      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20012410:	2320      	movs	r3, #32
20012412:	e000      	b.n	20012416 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20012414:	2320      	movs	r3, #32
20012416:	4a42      	ldr	r2, [pc, #264]	; (20012520 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
20012418:	6093      	str	r3, [r2, #8]
2001241a:	e0e9      	b.n	200125f0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
2001241c:	68fb      	ldr	r3, [r7, #12]
2001241e:	681b      	ldr	r3, [r3, #0]
20012420:	461a      	mov	r2, r3
20012422:	4b41      	ldr	r3, [pc, #260]	; (20012528 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
20012424:	429a      	cmp	r2, r3
20012426:	f240 8083 	bls.w	20012530 <HAL_DMAEx_MultiBufferStart_IT+0x354>
2001242a:	68fb      	ldr	r3, [r7, #12]
2001242c:	681b      	ldr	r3, [r3, #0]
2001242e:	4a30      	ldr	r2, [pc, #192]	; (200124f0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
20012430:	4293      	cmp	r3, r2
20012432:	d057      	beq.n	200124e4 <HAL_DMAEx_MultiBufferStart_IT+0x308>
20012434:	68fb      	ldr	r3, [r7, #12]
20012436:	681b      	ldr	r3, [r3, #0]
20012438:	4a2e      	ldr	r2, [pc, #184]	; (200124f4 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
2001243a:	4293      	cmp	r3, r2
2001243c:	d050      	beq.n	200124e0 <HAL_DMAEx_MultiBufferStart_IT+0x304>
2001243e:	68fb      	ldr	r3, [r7, #12]
20012440:	681b      	ldr	r3, [r3, #0]
20012442:	4a2d      	ldr	r2, [pc, #180]	; (200124f8 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
20012444:	4293      	cmp	r3, r2
20012446:	d049      	beq.n	200124dc <HAL_DMAEx_MultiBufferStart_IT+0x300>
20012448:	68fb      	ldr	r3, [r7, #12]
2001244a:	681b      	ldr	r3, [r3, #0]
2001244c:	4a2b      	ldr	r2, [pc, #172]	; (200124fc <HAL_DMAEx_MultiBufferStart_IT+0x320>)
2001244e:	4293      	cmp	r3, r2
20012450:	d042      	beq.n	200124d8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
20012452:	68fb      	ldr	r3, [r7, #12]
20012454:	681b      	ldr	r3, [r3, #0]
20012456:	4a2a      	ldr	r2, [pc, #168]	; (20012500 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
20012458:	4293      	cmp	r3, r2
2001245a:	d03a      	beq.n	200124d2 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
2001245c:	68fb      	ldr	r3, [r7, #12]
2001245e:	681b      	ldr	r3, [r3, #0]
20012460:	4a28      	ldr	r2, [pc, #160]	; (20012504 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
20012462:	4293      	cmp	r3, r2
20012464:	d032      	beq.n	200124cc <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
20012466:	68fb      	ldr	r3, [r7, #12]
20012468:	681b      	ldr	r3, [r3, #0]
2001246a:	4a27      	ldr	r2, [pc, #156]	; (20012508 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
2001246c:	4293      	cmp	r3, r2
2001246e:	d02a      	beq.n	200124c6 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
20012470:	68fb      	ldr	r3, [r7, #12]
20012472:	681b      	ldr	r3, [r3, #0]
20012474:	4a25      	ldr	r2, [pc, #148]	; (2001250c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
20012476:	4293      	cmp	r3, r2
20012478:	d022      	beq.n	200124c0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
2001247a:	68fb      	ldr	r3, [r7, #12]
2001247c:	681b      	ldr	r3, [r3, #0]
2001247e:	4a24      	ldr	r2, [pc, #144]	; (20012510 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
20012480:	4293      	cmp	r3, r2
20012482:	d01a      	beq.n	200124ba <HAL_DMAEx_MultiBufferStart_IT+0x2de>
20012484:	68fb      	ldr	r3, [r7, #12]
20012486:	681b      	ldr	r3, [r3, #0]
20012488:	4a22      	ldr	r2, [pc, #136]	; (20012514 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
2001248a:	4293      	cmp	r3, r2
2001248c:	d012      	beq.n	200124b4 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
2001248e:	68fb      	ldr	r3, [r7, #12]
20012490:	681b      	ldr	r3, [r3, #0]
20012492:	4a21      	ldr	r2, [pc, #132]	; (20012518 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
20012494:	4293      	cmp	r3, r2
20012496:	d00a      	beq.n	200124ae <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
20012498:	68fb      	ldr	r3, [r7, #12]
2001249a:	681b      	ldr	r3, [r3, #0]
2001249c:	4a1f      	ldr	r2, [pc, #124]	; (2001251c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
2001249e:	4293      	cmp	r3, r2
200124a0:	d102      	bne.n	200124a8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
200124a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200124a6:	e01e      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200124ac:	e01b      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200124b2:	e018      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200124b8:	e015      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200124be:	e012      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
200124c4:	e00f      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
200124ca:	e00c      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
200124d0:	e009      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
200124d6:	e006      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124d8:	2320      	movs	r3, #32
200124da:	e004      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124dc:	2320      	movs	r3, #32
200124de:	e002      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124e0:	2320      	movs	r3, #32
200124e2:	e000      	b.n	200124e6 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
200124e4:	2320      	movs	r3, #32
200124e6:	4a11      	ldr	r2, [pc, #68]	; (2001252c <HAL_DMAEx_MultiBufferStart_IT+0x350>)
200124e8:	60d3      	str	r3, [r2, #12]
200124ea:	e081      	b.n	200125f0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
200124ec:	40026458 	.word	0x40026458
200124f0:	40026010 	.word	0x40026010
200124f4:	40026410 	.word	0x40026410
200124f8:	40026070 	.word	0x40026070
200124fc:	40026470 	.word	0x40026470
20012500:	40026028 	.word	0x40026028
20012504:	40026428 	.word	0x40026428
20012508:	40026088 	.word	0x40026088
2001250c:	40026488 	.word	0x40026488
20012510:	40026040 	.word	0x40026040
20012514:	40026440 	.word	0x40026440
20012518:	400260a0 	.word	0x400260a0
2001251c:	400264a0 	.word	0x400264a0
20012520:	40026400 	.word	0x40026400
20012524:	400260b8 	.word	0x400260b8
20012528:	40026058 	.word	0x40026058
2001252c:	40026000 	.word	0x40026000
20012530:	68fb      	ldr	r3, [r7, #12]
20012532:	681b      	ldr	r3, [r3, #0]
20012534:	4a96      	ldr	r2, [pc, #600]	; (20012790 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
20012536:	4293      	cmp	r3, r2
20012538:	d057      	beq.n	200125ea <HAL_DMAEx_MultiBufferStart_IT+0x40e>
2001253a:	68fb      	ldr	r3, [r7, #12]
2001253c:	681b      	ldr	r3, [r3, #0]
2001253e:	4a95      	ldr	r2, [pc, #596]	; (20012794 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
20012540:	4293      	cmp	r3, r2
20012542:	d050      	beq.n	200125e6 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
20012544:	68fb      	ldr	r3, [r7, #12]
20012546:	681b      	ldr	r3, [r3, #0]
20012548:	4a93      	ldr	r2, [pc, #588]	; (20012798 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
2001254a:	4293      	cmp	r3, r2
2001254c:	d049      	beq.n	200125e2 <HAL_DMAEx_MultiBufferStart_IT+0x406>
2001254e:	68fb      	ldr	r3, [r7, #12]
20012550:	681b      	ldr	r3, [r3, #0]
20012552:	4a92      	ldr	r2, [pc, #584]	; (2001279c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
20012554:	4293      	cmp	r3, r2
20012556:	d042      	beq.n	200125de <HAL_DMAEx_MultiBufferStart_IT+0x402>
20012558:	68fb      	ldr	r3, [r7, #12]
2001255a:	681b      	ldr	r3, [r3, #0]
2001255c:	4a90      	ldr	r2, [pc, #576]	; (200127a0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
2001255e:	4293      	cmp	r3, r2
20012560:	d03a      	beq.n	200125d8 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
20012562:	68fb      	ldr	r3, [r7, #12]
20012564:	681b      	ldr	r3, [r3, #0]
20012566:	4a8f      	ldr	r2, [pc, #572]	; (200127a4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
20012568:	4293      	cmp	r3, r2
2001256a:	d032      	beq.n	200125d2 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
2001256c:	68fb      	ldr	r3, [r7, #12]
2001256e:	681b      	ldr	r3, [r3, #0]
20012570:	4a8d      	ldr	r2, [pc, #564]	; (200127a8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
20012572:	4293      	cmp	r3, r2
20012574:	d02a      	beq.n	200125cc <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
20012576:	68fb      	ldr	r3, [r7, #12]
20012578:	681b      	ldr	r3, [r3, #0]
2001257a:	4a8c      	ldr	r2, [pc, #560]	; (200127ac <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
2001257c:	4293      	cmp	r3, r2
2001257e:	d022      	beq.n	200125c6 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
20012580:	68fb      	ldr	r3, [r7, #12]
20012582:	681b      	ldr	r3, [r3, #0]
20012584:	4a8a      	ldr	r2, [pc, #552]	; (200127b0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
20012586:	4293      	cmp	r3, r2
20012588:	d01a      	beq.n	200125c0 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
2001258a:	68fb      	ldr	r3, [r7, #12]
2001258c:	681b      	ldr	r3, [r3, #0]
2001258e:	4a89      	ldr	r2, [pc, #548]	; (200127b4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
20012590:	4293      	cmp	r3, r2
20012592:	d012      	beq.n	200125ba <HAL_DMAEx_MultiBufferStart_IT+0x3de>
20012594:	68fb      	ldr	r3, [r7, #12]
20012596:	681b      	ldr	r3, [r3, #0]
20012598:	4a87      	ldr	r2, [pc, #540]	; (200127b8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
2001259a:	4293      	cmp	r3, r2
2001259c:	d00a      	beq.n	200125b4 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
2001259e:	68fb      	ldr	r3, [r7, #12]
200125a0:	681b      	ldr	r3, [r3, #0]
200125a2:	4a86      	ldr	r2, [pc, #536]	; (200127bc <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
200125a4:	4293      	cmp	r3, r2
200125a6:	d102      	bne.n	200125ae <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
200125a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200125ac:	e01e      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200125b2:	e01b      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200125b8:	e018      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200125be:	e015      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200125c4:	e012      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
200125ca:	e00f      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
200125d0:	e00c      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
200125d6:	e009      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
200125dc:	e006      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125de:	2320      	movs	r3, #32
200125e0:	e004      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125e2:	2320      	movs	r3, #32
200125e4:	e002      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125e6:	2320      	movs	r3, #32
200125e8:	e000      	b.n	200125ec <HAL_DMAEx_MultiBufferStart_IT+0x410>
200125ea:	2320      	movs	r3, #32
200125ec:	4a74      	ldr	r2, [pc, #464]	; (200127c0 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
200125ee:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
200125f0:	68fb      	ldr	r3, [r7, #12]
200125f2:	681b      	ldr	r3, [r3, #0]
200125f4:	461a      	mov	r2, r3
200125f6:	4b73      	ldr	r3, [pc, #460]	; (200127c4 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
200125f8:	429a      	cmp	r2, r3
200125fa:	d960      	bls.n	200126be <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
200125fc:	68fb      	ldr	r3, [r7, #12]
200125fe:	681b      	ldr	r3, [r3, #0]
20012600:	4a63      	ldr	r2, [pc, #396]	; (20012790 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
20012602:	4293      	cmp	r3, r2
20012604:	d057      	beq.n	200126b6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20012606:	68fb      	ldr	r3, [r7, #12]
20012608:	681b      	ldr	r3, [r3, #0]
2001260a:	4a62      	ldr	r2, [pc, #392]	; (20012794 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
2001260c:	4293      	cmp	r3, r2
2001260e:	d050      	beq.n	200126b2 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
20012610:	68fb      	ldr	r3, [r7, #12]
20012612:	681b      	ldr	r3, [r3, #0]
20012614:	4a60      	ldr	r2, [pc, #384]	; (20012798 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
20012616:	4293      	cmp	r3, r2
20012618:	d049      	beq.n	200126ae <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
2001261a:	68fb      	ldr	r3, [r7, #12]
2001261c:	681b      	ldr	r3, [r3, #0]
2001261e:	4a5f      	ldr	r2, [pc, #380]	; (2001279c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
20012620:	4293      	cmp	r3, r2
20012622:	d042      	beq.n	200126aa <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
20012624:	68fb      	ldr	r3, [r7, #12]
20012626:	681b      	ldr	r3, [r3, #0]
20012628:	4a5d      	ldr	r2, [pc, #372]	; (200127a0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
2001262a:	4293      	cmp	r3, r2
2001262c:	d03a      	beq.n	200126a4 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
2001262e:	68fb      	ldr	r3, [r7, #12]
20012630:	681b      	ldr	r3, [r3, #0]
20012632:	4a5c      	ldr	r2, [pc, #368]	; (200127a4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
20012634:	4293      	cmp	r3, r2
20012636:	d032      	beq.n	2001269e <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
20012638:	68fb      	ldr	r3, [r7, #12]
2001263a:	681b      	ldr	r3, [r3, #0]
2001263c:	4a5a      	ldr	r2, [pc, #360]	; (200127a8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
2001263e:	4293      	cmp	r3, r2
20012640:	d02a      	beq.n	20012698 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
20012642:	68fb      	ldr	r3, [r7, #12]
20012644:	681b      	ldr	r3, [r3, #0]
20012646:	4a59      	ldr	r2, [pc, #356]	; (200127ac <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
20012648:	4293      	cmp	r3, r2
2001264a:	d022      	beq.n	20012692 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
2001264c:	68fb      	ldr	r3, [r7, #12]
2001264e:	681b      	ldr	r3, [r3, #0]
20012650:	4a57      	ldr	r2, [pc, #348]	; (200127b0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
20012652:	4293      	cmp	r3, r2
20012654:	d01a      	beq.n	2001268c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
20012656:	68fb      	ldr	r3, [r7, #12]
20012658:	681b      	ldr	r3, [r3, #0]
2001265a:	4a56      	ldr	r2, [pc, #344]	; (200127b4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
2001265c:	4293      	cmp	r3, r2
2001265e:	d012      	beq.n	20012686 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
20012660:	68fb      	ldr	r3, [r7, #12]
20012662:	681b      	ldr	r3, [r3, #0]
20012664:	4a54      	ldr	r2, [pc, #336]	; (200127b8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
20012666:	4293      	cmp	r3, r2
20012668:	d00a      	beq.n	20012680 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
2001266a:	68fb      	ldr	r3, [r7, #12]
2001266c:	681b      	ldr	r3, [r3, #0]
2001266e:	4a53      	ldr	r2, [pc, #332]	; (200127bc <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
20012670:	4293      	cmp	r3, r2
20012672:	d102      	bne.n	2001267a <HAL_DMAEx_MultiBufferStart_IT+0x49e>
20012674:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20012678:	e01e      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
2001267a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
2001267e:	e01b      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
20012680:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20012684:	e018      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
20012686:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2001268a:	e015      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
2001268c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20012690:	e012      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
20012692:	f44f 6380 	mov.w	r3, #1024	; 0x400
20012696:	e00f      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
20012698:	f44f 6380 	mov.w	r3, #1024	; 0x400
2001269c:	e00c      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
2001269e:	f44f 6380 	mov.w	r3, #1024	; 0x400
200126a2:	e009      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
200126a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
200126a8:	e006      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
200126aa:	2310      	movs	r3, #16
200126ac:	e004      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
200126ae:	2310      	movs	r3, #16
200126b0:	e002      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
200126b2:	2310      	movs	r3, #16
200126b4:	e000      	b.n	200126b8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
200126b6:	2310      	movs	r3, #16
200126b8:	4a43      	ldr	r2, [pc, #268]	; (200127c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
200126ba:	60d3      	str	r3, [r2, #12]
200126bc:	e14f      	b.n	2001295e <HAL_DMAEx_MultiBufferStart_IT+0x782>
200126be:	68fb      	ldr	r3, [r7, #12]
200126c0:	681b      	ldr	r3, [r3, #0]
200126c2:	461a      	mov	r2, r3
200126c4:	4b41      	ldr	r3, [pc, #260]	; (200127cc <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
200126c6:	429a      	cmp	r2, r3
200126c8:	f240 8082 	bls.w	200127d0 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
200126cc:	68fb      	ldr	r3, [r7, #12]
200126ce:	681b      	ldr	r3, [r3, #0]
200126d0:	4a2f      	ldr	r2, [pc, #188]	; (20012790 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
200126d2:	4293      	cmp	r3, r2
200126d4:	d057      	beq.n	20012786 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
200126d6:	68fb      	ldr	r3, [r7, #12]
200126d8:	681b      	ldr	r3, [r3, #0]
200126da:	4a2e      	ldr	r2, [pc, #184]	; (20012794 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
200126dc:	4293      	cmp	r3, r2
200126de:	d050      	beq.n	20012782 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
200126e0:	68fb      	ldr	r3, [r7, #12]
200126e2:	681b      	ldr	r3, [r3, #0]
200126e4:	4a2c      	ldr	r2, [pc, #176]	; (20012798 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
200126e6:	4293      	cmp	r3, r2
200126e8:	d049      	beq.n	2001277e <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
200126ea:	68fb      	ldr	r3, [r7, #12]
200126ec:	681b      	ldr	r3, [r3, #0]
200126ee:	4a2b      	ldr	r2, [pc, #172]	; (2001279c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
200126f0:	4293      	cmp	r3, r2
200126f2:	d042      	beq.n	2001277a <HAL_DMAEx_MultiBufferStart_IT+0x59e>
200126f4:	68fb      	ldr	r3, [r7, #12]
200126f6:	681b      	ldr	r3, [r3, #0]
200126f8:	4a29      	ldr	r2, [pc, #164]	; (200127a0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
200126fa:	4293      	cmp	r3, r2
200126fc:	d03a      	beq.n	20012774 <HAL_DMAEx_MultiBufferStart_IT+0x598>
200126fe:	68fb      	ldr	r3, [r7, #12]
20012700:	681b      	ldr	r3, [r3, #0]
20012702:	4a28      	ldr	r2, [pc, #160]	; (200127a4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
20012704:	4293      	cmp	r3, r2
20012706:	d032      	beq.n	2001276e <HAL_DMAEx_MultiBufferStart_IT+0x592>
20012708:	68fb      	ldr	r3, [r7, #12]
2001270a:	681b      	ldr	r3, [r3, #0]
2001270c:	4a26      	ldr	r2, [pc, #152]	; (200127a8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
2001270e:	4293      	cmp	r3, r2
20012710:	d02a      	beq.n	20012768 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
20012712:	68fb      	ldr	r3, [r7, #12]
20012714:	681b      	ldr	r3, [r3, #0]
20012716:	4a25      	ldr	r2, [pc, #148]	; (200127ac <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
20012718:	4293      	cmp	r3, r2
2001271a:	d022      	beq.n	20012762 <HAL_DMAEx_MultiBufferStart_IT+0x586>
2001271c:	68fb      	ldr	r3, [r7, #12]
2001271e:	681b      	ldr	r3, [r3, #0]
20012720:	4a23      	ldr	r2, [pc, #140]	; (200127b0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
20012722:	4293      	cmp	r3, r2
20012724:	d01a      	beq.n	2001275c <HAL_DMAEx_MultiBufferStart_IT+0x580>
20012726:	68fb      	ldr	r3, [r7, #12]
20012728:	681b      	ldr	r3, [r3, #0]
2001272a:	4a22      	ldr	r2, [pc, #136]	; (200127b4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
2001272c:	4293      	cmp	r3, r2
2001272e:	d012      	beq.n	20012756 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
20012730:	68fb      	ldr	r3, [r7, #12]
20012732:	681b      	ldr	r3, [r3, #0]
20012734:	4a20      	ldr	r2, [pc, #128]	; (200127b8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
20012736:	4293      	cmp	r3, r2
20012738:	d00a      	beq.n	20012750 <HAL_DMAEx_MultiBufferStart_IT+0x574>
2001273a:	68fb      	ldr	r3, [r7, #12]
2001273c:	681b      	ldr	r3, [r3, #0]
2001273e:	4a1f      	ldr	r2, [pc, #124]	; (200127bc <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
20012740:	4293      	cmp	r3, r2
20012742:	d102      	bne.n	2001274a <HAL_DMAEx_MultiBufferStart_IT+0x56e>
20012744:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20012748:	e01e      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
2001274a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
2001274e:	e01b      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
20012750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20012754:	e018      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
20012756:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2001275a:	e015      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
2001275c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20012760:	e012      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
20012762:	f44f 6380 	mov.w	r3, #1024	; 0x400
20012766:	e00f      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
20012768:	f44f 6380 	mov.w	r3, #1024	; 0x400
2001276c:	e00c      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
2001276e:	f44f 6380 	mov.w	r3, #1024	; 0x400
20012772:	e009      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
20012774:	f44f 6380 	mov.w	r3, #1024	; 0x400
20012778:	e006      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
2001277a:	2310      	movs	r3, #16
2001277c:	e004      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
2001277e:	2310      	movs	r3, #16
20012780:	e002      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
20012782:	2310      	movs	r3, #16
20012784:	e000      	b.n	20012788 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
20012786:	2310      	movs	r3, #16
20012788:	4a0f      	ldr	r2, [pc, #60]	; (200127c8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
2001278a:	6093      	str	r3, [r2, #8]
2001278c:	e0e7      	b.n	2001295e <HAL_DMAEx_MultiBufferStart_IT+0x782>
2001278e:	bf00      	nop
20012790:	40026010 	.word	0x40026010
20012794:	40026410 	.word	0x40026410
20012798:	40026070 	.word	0x40026070
2001279c:	40026470 	.word	0x40026470
200127a0:	40026028 	.word	0x40026028
200127a4:	40026428 	.word	0x40026428
200127a8:	40026088 	.word	0x40026088
200127ac:	40026488 	.word	0x40026488
200127b0:	40026040 	.word	0x40026040
200127b4:	40026440 	.word	0x40026440
200127b8:	400260a0 	.word	0x400260a0
200127bc:	400264a0 	.word	0x400264a0
200127c0:	40026000 	.word	0x40026000
200127c4:	40026458 	.word	0x40026458
200127c8:	40026400 	.word	0x40026400
200127cc:	400260b8 	.word	0x400260b8
200127d0:	68fb      	ldr	r3, [r7, #12]
200127d2:	681b      	ldr	r3, [r3, #0]
200127d4:	461a      	mov	r2, r3
200127d6:	4b96      	ldr	r3, [pc, #600]	; (20012a30 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
200127d8:	429a      	cmp	r2, r3
200127da:	d960      	bls.n	2001289e <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
200127dc:	68fb      	ldr	r3, [r7, #12]
200127de:	681b      	ldr	r3, [r3, #0]
200127e0:	4a94      	ldr	r2, [pc, #592]	; (20012a34 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
200127e2:	4293      	cmp	r3, r2
200127e4:	d057      	beq.n	20012896 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
200127e6:	68fb      	ldr	r3, [r7, #12]
200127e8:	681b      	ldr	r3, [r3, #0]
200127ea:	4a93      	ldr	r2, [pc, #588]	; (20012a38 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
200127ec:	4293      	cmp	r3, r2
200127ee:	d050      	beq.n	20012892 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
200127f0:	68fb      	ldr	r3, [r7, #12]
200127f2:	681b      	ldr	r3, [r3, #0]
200127f4:	4a91      	ldr	r2, [pc, #580]	; (20012a3c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
200127f6:	4293      	cmp	r3, r2
200127f8:	d049      	beq.n	2001288e <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
200127fa:	68fb      	ldr	r3, [r7, #12]
200127fc:	681b      	ldr	r3, [r3, #0]
200127fe:	4a90      	ldr	r2, [pc, #576]	; (20012a40 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
20012800:	4293      	cmp	r3, r2
20012802:	d042      	beq.n	2001288a <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
20012804:	68fb      	ldr	r3, [r7, #12]
20012806:	681b      	ldr	r3, [r3, #0]
20012808:	4a8e      	ldr	r2, [pc, #568]	; (20012a44 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
2001280a:	4293      	cmp	r3, r2
2001280c:	d03a      	beq.n	20012884 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
2001280e:	68fb      	ldr	r3, [r7, #12]
20012810:	681b      	ldr	r3, [r3, #0]
20012812:	4a8d      	ldr	r2, [pc, #564]	; (20012a48 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
20012814:	4293      	cmp	r3, r2
20012816:	d032      	beq.n	2001287e <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
20012818:	68fb      	ldr	r3, [r7, #12]
2001281a:	681b      	ldr	r3, [r3, #0]
2001281c:	4a8b      	ldr	r2, [pc, #556]	; (20012a4c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
2001281e:	4293      	cmp	r3, r2
20012820:	d02a      	beq.n	20012878 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
20012822:	68fb      	ldr	r3, [r7, #12]
20012824:	681b      	ldr	r3, [r3, #0]
20012826:	4a8a      	ldr	r2, [pc, #552]	; (20012a50 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
20012828:	4293      	cmp	r3, r2
2001282a:	d022      	beq.n	20012872 <HAL_DMAEx_MultiBufferStart_IT+0x696>
2001282c:	68fb      	ldr	r3, [r7, #12]
2001282e:	681b      	ldr	r3, [r3, #0]
20012830:	4a88      	ldr	r2, [pc, #544]	; (20012a54 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
20012832:	4293      	cmp	r3, r2
20012834:	d01a      	beq.n	2001286c <HAL_DMAEx_MultiBufferStart_IT+0x690>
20012836:	68fb      	ldr	r3, [r7, #12]
20012838:	681b      	ldr	r3, [r3, #0]
2001283a:	4a87      	ldr	r2, [pc, #540]	; (20012a58 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
2001283c:	4293      	cmp	r3, r2
2001283e:	d012      	beq.n	20012866 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
20012840:	68fb      	ldr	r3, [r7, #12]
20012842:	681b      	ldr	r3, [r3, #0]
20012844:	4a85      	ldr	r2, [pc, #532]	; (20012a5c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
20012846:	4293      	cmp	r3, r2
20012848:	d00a      	beq.n	20012860 <HAL_DMAEx_MultiBufferStart_IT+0x684>
2001284a:	68fb      	ldr	r3, [r7, #12]
2001284c:	681b      	ldr	r3, [r3, #0]
2001284e:	4a84      	ldr	r2, [pc, #528]	; (20012a60 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
20012850:	4293      	cmp	r3, r2
20012852:	d102      	bne.n	2001285a <HAL_DMAEx_MultiBufferStart_IT+0x67e>
20012854:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20012858:	e01e      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
2001285a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
2001285e:	e01b      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
20012860:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20012864:	e018      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
20012866:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2001286a:	e015      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
2001286c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20012870:	e012      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
20012872:	f44f 6380 	mov.w	r3, #1024	; 0x400
20012876:	e00f      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
20012878:	f44f 6380 	mov.w	r3, #1024	; 0x400
2001287c:	e00c      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
2001287e:	f44f 6380 	mov.w	r3, #1024	; 0x400
20012882:	e009      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
20012884:	f44f 6380 	mov.w	r3, #1024	; 0x400
20012888:	e006      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
2001288a:	2310      	movs	r3, #16
2001288c:	e004      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
2001288e:	2310      	movs	r3, #16
20012890:	e002      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
20012892:	2310      	movs	r3, #16
20012894:	e000      	b.n	20012898 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
20012896:	2310      	movs	r3, #16
20012898:	4a72      	ldr	r2, [pc, #456]	; (20012a64 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
2001289a:	60d3      	str	r3, [r2, #12]
2001289c:	e05f      	b.n	2001295e <HAL_DMAEx_MultiBufferStart_IT+0x782>
2001289e:	68fb      	ldr	r3, [r7, #12]
200128a0:	681b      	ldr	r3, [r3, #0]
200128a2:	4a64      	ldr	r2, [pc, #400]	; (20012a34 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
200128a4:	4293      	cmp	r3, r2
200128a6:	d057      	beq.n	20012958 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
200128a8:	68fb      	ldr	r3, [r7, #12]
200128aa:	681b      	ldr	r3, [r3, #0]
200128ac:	4a62      	ldr	r2, [pc, #392]	; (20012a38 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
200128ae:	4293      	cmp	r3, r2
200128b0:	d050      	beq.n	20012954 <HAL_DMAEx_MultiBufferStart_IT+0x778>
200128b2:	68fb      	ldr	r3, [r7, #12]
200128b4:	681b      	ldr	r3, [r3, #0]
200128b6:	4a61      	ldr	r2, [pc, #388]	; (20012a3c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
200128b8:	4293      	cmp	r3, r2
200128ba:	d049      	beq.n	20012950 <HAL_DMAEx_MultiBufferStart_IT+0x774>
200128bc:	68fb      	ldr	r3, [r7, #12]
200128be:	681b      	ldr	r3, [r3, #0]
200128c0:	4a5f      	ldr	r2, [pc, #380]	; (20012a40 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
200128c2:	4293      	cmp	r3, r2
200128c4:	d042      	beq.n	2001294c <HAL_DMAEx_MultiBufferStart_IT+0x770>
200128c6:	68fb      	ldr	r3, [r7, #12]
200128c8:	681b      	ldr	r3, [r3, #0]
200128ca:	4a5e      	ldr	r2, [pc, #376]	; (20012a44 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
200128cc:	4293      	cmp	r3, r2
200128ce:	d03a      	beq.n	20012946 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
200128d0:	68fb      	ldr	r3, [r7, #12]
200128d2:	681b      	ldr	r3, [r3, #0]
200128d4:	4a5c      	ldr	r2, [pc, #368]	; (20012a48 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
200128d6:	4293      	cmp	r3, r2
200128d8:	d032      	beq.n	20012940 <HAL_DMAEx_MultiBufferStart_IT+0x764>
200128da:	68fb      	ldr	r3, [r7, #12]
200128dc:	681b      	ldr	r3, [r3, #0]
200128de:	4a5b      	ldr	r2, [pc, #364]	; (20012a4c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
200128e0:	4293      	cmp	r3, r2
200128e2:	d02a      	beq.n	2001293a <HAL_DMAEx_MultiBufferStart_IT+0x75e>
200128e4:	68fb      	ldr	r3, [r7, #12]
200128e6:	681b      	ldr	r3, [r3, #0]
200128e8:	4a59      	ldr	r2, [pc, #356]	; (20012a50 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
200128ea:	4293      	cmp	r3, r2
200128ec:	d022      	beq.n	20012934 <HAL_DMAEx_MultiBufferStart_IT+0x758>
200128ee:	68fb      	ldr	r3, [r7, #12]
200128f0:	681b      	ldr	r3, [r3, #0]
200128f2:	4a58      	ldr	r2, [pc, #352]	; (20012a54 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
200128f4:	4293      	cmp	r3, r2
200128f6:	d01a      	beq.n	2001292e <HAL_DMAEx_MultiBufferStart_IT+0x752>
200128f8:	68fb      	ldr	r3, [r7, #12]
200128fa:	681b      	ldr	r3, [r3, #0]
200128fc:	4a56      	ldr	r2, [pc, #344]	; (20012a58 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
200128fe:	4293      	cmp	r3, r2
20012900:	d012      	beq.n	20012928 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
20012902:	68fb      	ldr	r3, [r7, #12]
20012904:	681b      	ldr	r3, [r3, #0]
20012906:	4a55      	ldr	r2, [pc, #340]	; (20012a5c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
20012908:	4293      	cmp	r3, r2
2001290a:	d00a      	beq.n	20012922 <HAL_DMAEx_MultiBufferStart_IT+0x746>
2001290c:	68fb      	ldr	r3, [r7, #12]
2001290e:	681b      	ldr	r3, [r3, #0]
20012910:	4a53      	ldr	r2, [pc, #332]	; (20012a60 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
20012912:	4293      	cmp	r3, r2
20012914:	d102      	bne.n	2001291c <HAL_DMAEx_MultiBufferStart_IT+0x740>
20012916:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2001291a:	e01e      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
2001291c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
20012920:	e01b      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
20012922:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20012926:	e018      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
20012928:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2001292c:	e015      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
2001292e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20012932:	e012      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
20012934:	f44f 6380 	mov.w	r3, #1024	; 0x400
20012938:	e00f      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
2001293a:	f44f 6380 	mov.w	r3, #1024	; 0x400
2001293e:	e00c      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
20012940:	f44f 6380 	mov.w	r3, #1024	; 0x400
20012944:	e009      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
20012946:	f44f 6380 	mov.w	r3, #1024	; 0x400
2001294a:	e006      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
2001294c:	2310      	movs	r3, #16
2001294e:	e004      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
20012950:	2310      	movs	r3, #16
20012952:	e002      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
20012954:	2310      	movs	r3, #16
20012956:	e000      	b.n	2001295a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
20012958:	2310      	movs	r3, #16
2001295a:	4a42      	ldr	r2, [pc, #264]	; (20012a64 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
2001295c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
2001295e:	68fb      	ldr	r3, [r7, #12]
20012960:	681b      	ldr	r3, [r3, #0]
20012962:	461a      	mov	r2, r3
20012964:	4b40      	ldr	r3, [pc, #256]	; (20012a68 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
20012966:	429a      	cmp	r2, r3
20012968:	f240 8082 	bls.w	20012a70 <HAL_DMAEx_MultiBufferStart_IT+0x894>
2001296c:	68fb      	ldr	r3, [r7, #12]
2001296e:	681b      	ldr	r3, [r3, #0]
20012970:	4a30      	ldr	r2, [pc, #192]	; (20012a34 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
20012972:	4293      	cmp	r3, r2
20012974:	d057      	beq.n	20012a26 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
20012976:	68fb      	ldr	r3, [r7, #12]
20012978:	681b      	ldr	r3, [r3, #0]
2001297a:	4a2f      	ldr	r2, [pc, #188]	; (20012a38 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
2001297c:	4293      	cmp	r3, r2
2001297e:	d050      	beq.n	20012a22 <HAL_DMAEx_MultiBufferStart_IT+0x846>
20012980:	68fb      	ldr	r3, [r7, #12]
20012982:	681b      	ldr	r3, [r3, #0]
20012984:	4a2d      	ldr	r2, [pc, #180]	; (20012a3c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
20012986:	4293      	cmp	r3, r2
20012988:	d049      	beq.n	20012a1e <HAL_DMAEx_MultiBufferStart_IT+0x842>
2001298a:	68fb      	ldr	r3, [r7, #12]
2001298c:	681b      	ldr	r3, [r3, #0]
2001298e:	4a2c      	ldr	r2, [pc, #176]	; (20012a40 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
20012990:	4293      	cmp	r3, r2
20012992:	d042      	beq.n	20012a1a <HAL_DMAEx_MultiBufferStart_IT+0x83e>
20012994:	68fb      	ldr	r3, [r7, #12]
20012996:	681b      	ldr	r3, [r3, #0]
20012998:	4a2a      	ldr	r2, [pc, #168]	; (20012a44 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
2001299a:	4293      	cmp	r3, r2
2001299c:	d03a      	beq.n	20012a14 <HAL_DMAEx_MultiBufferStart_IT+0x838>
2001299e:	68fb      	ldr	r3, [r7, #12]
200129a0:	681b      	ldr	r3, [r3, #0]
200129a2:	4a29      	ldr	r2, [pc, #164]	; (20012a48 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
200129a4:	4293      	cmp	r3, r2
200129a6:	d032      	beq.n	20012a0e <HAL_DMAEx_MultiBufferStart_IT+0x832>
200129a8:	68fb      	ldr	r3, [r7, #12]
200129aa:	681b      	ldr	r3, [r3, #0]
200129ac:	4a27      	ldr	r2, [pc, #156]	; (20012a4c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
200129ae:	4293      	cmp	r3, r2
200129b0:	d02a      	beq.n	20012a08 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
200129b2:	68fb      	ldr	r3, [r7, #12]
200129b4:	681b      	ldr	r3, [r3, #0]
200129b6:	4a26      	ldr	r2, [pc, #152]	; (20012a50 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
200129b8:	4293      	cmp	r3, r2
200129ba:	d022      	beq.n	20012a02 <HAL_DMAEx_MultiBufferStart_IT+0x826>
200129bc:	68fb      	ldr	r3, [r7, #12]
200129be:	681b      	ldr	r3, [r3, #0]
200129c0:	4a24      	ldr	r2, [pc, #144]	; (20012a54 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
200129c2:	4293      	cmp	r3, r2
200129c4:	d01a      	beq.n	200129fc <HAL_DMAEx_MultiBufferStart_IT+0x820>
200129c6:	68fb      	ldr	r3, [r7, #12]
200129c8:	681b      	ldr	r3, [r3, #0]
200129ca:	4a23      	ldr	r2, [pc, #140]	; (20012a58 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
200129cc:	4293      	cmp	r3, r2
200129ce:	d012      	beq.n	200129f6 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
200129d0:	68fb      	ldr	r3, [r7, #12]
200129d2:	681b      	ldr	r3, [r3, #0]
200129d4:	4a21      	ldr	r2, [pc, #132]	; (20012a5c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
200129d6:	4293      	cmp	r3, r2
200129d8:	d00a      	beq.n	200129f0 <HAL_DMAEx_MultiBufferStart_IT+0x814>
200129da:	68fb      	ldr	r3, [r7, #12]
200129dc:	681b      	ldr	r3, [r3, #0]
200129de:	4a20      	ldr	r2, [pc, #128]	; (20012a60 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
200129e0:	4293      	cmp	r3, r2
200129e2:	d102      	bne.n	200129ea <HAL_DMAEx_MultiBufferStart_IT+0x80e>
200129e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
200129e8:	e01e      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
200129ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
200129ee:	e01b      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
200129f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
200129f4:	e018      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
200129f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
200129fa:	e015      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
200129fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012a00:	e012      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20012a02:	f44f 7300 	mov.w	r3, #512	; 0x200
20012a06:	e00f      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20012a08:	f44f 7300 	mov.w	r3, #512	; 0x200
20012a0c:	e00c      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20012a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
20012a12:	e009      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20012a14:	f44f 7300 	mov.w	r3, #512	; 0x200
20012a18:	e006      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20012a1a:	2308      	movs	r3, #8
20012a1c:	e004      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20012a1e:	2308      	movs	r3, #8
20012a20:	e002      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20012a22:	2308      	movs	r3, #8
20012a24:	e000      	b.n	20012a28 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20012a26:	2308      	movs	r3, #8
20012a28:	4a10      	ldr	r2, [pc, #64]	; (20012a6c <HAL_DMAEx_MultiBufferStart_IT+0x890>)
20012a2a:	60d3      	str	r3, [r2, #12]
20012a2c:	e16f      	b.n	20012d0e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
20012a2e:	bf00      	nop
20012a30:	40026058 	.word	0x40026058
20012a34:	40026010 	.word	0x40026010
20012a38:	40026410 	.word	0x40026410
20012a3c:	40026070 	.word	0x40026070
20012a40:	40026470 	.word	0x40026470
20012a44:	40026028 	.word	0x40026028
20012a48:	40026428 	.word	0x40026428
20012a4c:	40026088 	.word	0x40026088
20012a50:	40026488 	.word	0x40026488
20012a54:	40026040 	.word	0x40026040
20012a58:	40026440 	.word	0x40026440
20012a5c:	400260a0 	.word	0x400260a0
20012a60:	400264a0 	.word	0x400264a0
20012a64:	40026000 	.word	0x40026000
20012a68:	40026458 	.word	0x40026458
20012a6c:	40026400 	.word	0x40026400
20012a70:	68fb      	ldr	r3, [r7, #12]
20012a72:	681b      	ldr	r3, [r3, #0]
20012a74:	461a      	mov	r2, r3
20012a76:	4b94      	ldr	r3, [pc, #592]	; (20012cc8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20012a78:	429a      	cmp	r2, r3
20012a7a:	d960      	bls.n	20012b3e <HAL_DMAEx_MultiBufferStart_IT+0x962>
20012a7c:	68fb      	ldr	r3, [r7, #12]
20012a7e:	681b      	ldr	r3, [r3, #0]
20012a80:	4a92      	ldr	r2, [pc, #584]	; (20012ccc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20012a82:	4293      	cmp	r3, r2
20012a84:	d057      	beq.n	20012b36 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20012a86:	68fb      	ldr	r3, [r7, #12]
20012a88:	681b      	ldr	r3, [r3, #0]
20012a8a:	4a91      	ldr	r2, [pc, #580]	; (20012cd0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20012a8c:	4293      	cmp	r3, r2
20012a8e:	d050      	beq.n	20012b32 <HAL_DMAEx_MultiBufferStart_IT+0x956>
20012a90:	68fb      	ldr	r3, [r7, #12]
20012a92:	681b      	ldr	r3, [r3, #0]
20012a94:	4a8f      	ldr	r2, [pc, #572]	; (20012cd4 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
20012a96:	4293      	cmp	r3, r2
20012a98:	d049      	beq.n	20012b2e <HAL_DMAEx_MultiBufferStart_IT+0x952>
20012a9a:	68fb      	ldr	r3, [r7, #12]
20012a9c:	681b      	ldr	r3, [r3, #0]
20012a9e:	4a8e      	ldr	r2, [pc, #568]	; (20012cd8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
20012aa0:	4293      	cmp	r3, r2
20012aa2:	d042      	beq.n	20012b2a <HAL_DMAEx_MultiBufferStart_IT+0x94e>
20012aa4:	68fb      	ldr	r3, [r7, #12]
20012aa6:	681b      	ldr	r3, [r3, #0]
20012aa8:	4a8c      	ldr	r2, [pc, #560]	; (20012cdc <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
20012aaa:	4293      	cmp	r3, r2
20012aac:	d03a      	beq.n	20012b24 <HAL_DMAEx_MultiBufferStart_IT+0x948>
20012aae:	68fb      	ldr	r3, [r7, #12]
20012ab0:	681b      	ldr	r3, [r3, #0]
20012ab2:	4a8b      	ldr	r2, [pc, #556]	; (20012ce0 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
20012ab4:	4293      	cmp	r3, r2
20012ab6:	d032      	beq.n	20012b1e <HAL_DMAEx_MultiBufferStart_IT+0x942>
20012ab8:	68fb      	ldr	r3, [r7, #12]
20012aba:	681b      	ldr	r3, [r3, #0]
20012abc:	4a89      	ldr	r2, [pc, #548]	; (20012ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
20012abe:	4293      	cmp	r3, r2
20012ac0:	d02a      	beq.n	20012b18 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
20012ac2:	68fb      	ldr	r3, [r7, #12]
20012ac4:	681b      	ldr	r3, [r3, #0]
20012ac6:	4a88      	ldr	r2, [pc, #544]	; (20012ce8 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
20012ac8:	4293      	cmp	r3, r2
20012aca:	d022      	beq.n	20012b12 <HAL_DMAEx_MultiBufferStart_IT+0x936>
20012acc:	68fb      	ldr	r3, [r7, #12]
20012ace:	681b      	ldr	r3, [r3, #0]
20012ad0:	4a86      	ldr	r2, [pc, #536]	; (20012cec <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
20012ad2:	4293      	cmp	r3, r2
20012ad4:	d01a      	beq.n	20012b0c <HAL_DMAEx_MultiBufferStart_IT+0x930>
20012ad6:	68fb      	ldr	r3, [r7, #12]
20012ad8:	681b      	ldr	r3, [r3, #0]
20012ada:	4a85      	ldr	r2, [pc, #532]	; (20012cf0 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
20012adc:	4293      	cmp	r3, r2
20012ade:	d012      	beq.n	20012b06 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
20012ae0:	68fb      	ldr	r3, [r7, #12]
20012ae2:	681b      	ldr	r3, [r3, #0]
20012ae4:	4a83      	ldr	r2, [pc, #524]	; (20012cf4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
20012ae6:	4293      	cmp	r3, r2
20012ae8:	d00a      	beq.n	20012b00 <HAL_DMAEx_MultiBufferStart_IT+0x924>
20012aea:	68fb      	ldr	r3, [r7, #12]
20012aec:	681b      	ldr	r3, [r3, #0]
20012aee:	4a82      	ldr	r2, [pc, #520]	; (20012cf8 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
20012af0:	4293      	cmp	r3, r2
20012af2:	d102      	bne.n	20012afa <HAL_DMAEx_MultiBufferStart_IT+0x91e>
20012af4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012af8:	e01e      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20012afe:	e01b      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012b00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012b04:	e018      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012b06:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012b0a:	e015      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012b0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012b10:	e012      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012b12:	f44f 7300 	mov.w	r3, #512	; 0x200
20012b16:	e00f      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012b18:	f44f 7300 	mov.w	r3, #512	; 0x200
20012b1c:	e00c      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
20012b22:	e009      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012b24:	f44f 7300 	mov.w	r3, #512	; 0x200
20012b28:	e006      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012b2a:	2308      	movs	r3, #8
20012b2c:	e004      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012b2e:	2308      	movs	r3, #8
20012b30:	e002      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012b32:	2308      	movs	r3, #8
20012b34:	e000      	b.n	20012b38 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20012b36:	2308      	movs	r3, #8
20012b38:	4a70      	ldr	r2, [pc, #448]	; (20012cfc <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
20012b3a:	6093      	str	r3, [r2, #8]
20012b3c:	e0e7      	b.n	20012d0e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
20012b3e:	68fb      	ldr	r3, [r7, #12]
20012b40:	681b      	ldr	r3, [r3, #0]
20012b42:	461a      	mov	r2, r3
20012b44:	4b6e      	ldr	r3, [pc, #440]	; (20012d00 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
20012b46:	429a      	cmp	r2, r3
20012b48:	d960      	bls.n	20012c0c <HAL_DMAEx_MultiBufferStart_IT+0xa30>
20012b4a:	68fb      	ldr	r3, [r7, #12]
20012b4c:	681b      	ldr	r3, [r3, #0]
20012b4e:	4a5f      	ldr	r2, [pc, #380]	; (20012ccc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20012b50:	4293      	cmp	r3, r2
20012b52:	d057      	beq.n	20012c04 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20012b54:	68fb      	ldr	r3, [r7, #12]
20012b56:	681b      	ldr	r3, [r3, #0]
20012b58:	4a5d      	ldr	r2, [pc, #372]	; (20012cd0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20012b5a:	4293      	cmp	r3, r2
20012b5c:	d050      	beq.n	20012c00 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
20012b5e:	68fb      	ldr	r3, [r7, #12]
20012b60:	681b      	ldr	r3, [r3, #0]
20012b62:	4a5c      	ldr	r2, [pc, #368]	; (20012cd4 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
20012b64:	4293      	cmp	r3, r2
20012b66:	d049      	beq.n	20012bfc <HAL_DMAEx_MultiBufferStart_IT+0xa20>
20012b68:	68fb      	ldr	r3, [r7, #12]
20012b6a:	681b      	ldr	r3, [r3, #0]
20012b6c:	4a5a      	ldr	r2, [pc, #360]	; (20012cd8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
20012b6e:	4293      	cmp	r3, r2
20012b70:	d042      	beq.n	20012bf8 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
20012b72:	68fb      	ldr	r3, [r7, #12]
20012b74:	681b      	ldr	r3, [r3, #0]
20012b76:	4a59      	ldr	r2, [pc, #356]	; (20012cdc <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
20012b78:	4293      	cmp	r3, r2
20012b7a:	d03a      	beq.n	20012bf2 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
20012b7c:	68fb      	ldr	r3, [r7, #12]
20012b7e:	681b      	ldr	r3, [r3, #0]
20012b80:	4a57      	ldr	r2, [pc, #348]	; (20012ce0 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
20012b82:	4293      	cmp	r3, r2
20012b84:	d032      	beq.n	20012bec <HAL_DMAEx_MultiBufferStart_IT+0xa10>
20012b86:	68fb      	ldr	r3, [r7, #12]
20012b88:	681b      	ldr	r3, [r3, #0]
20012b8a:	4a56      	ldr	r2, [pc, #344]	; (20012ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
20012b8c:	4293      	cmp	r3, r2
20012b8e:	d02a      	beq.n	20012be6 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
20012b90:	68fb      	ldr	r3, [r7, #12]
20012b92:	681b      	ldr	r3, [r3, #0]
20012b94:	4a54      	ldr	r2, [pc, #336]	; (20012ce8 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
20012b96:	4293      	cmp	r3, r2
20012b98:	d022      	beq.n	20012be0 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
20012b9a:	68fb      	ldr	r3, [r7, #12]
20012b9c:	681b      	ldr	r3, [r3, #0]
20012b9e:	4a53      	ldr	r2, [pc, #332]	; (20012cec <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
20012ba0:	4293      	cmp	r3, r2
20012ba2:	d01a      	beq.n	20012bda <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
20012ba4:	68fb      	ldr	r3, [r7, #12]
20012ba6:	681b      	ldr	r3, [r3, #0]
20012ba8:	4a51      	ldr	r2, [pc, #324]	; (20012cf0 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
20012baa:	4293      	cmp	r3, r2
20012bac:	d012      	beq.n	20012bd4 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
20012bae:	68fb      	ldr	r3, [r7, #12]
20012bb0:	681b      	ldr	r3, [r3, #0]
20012bb2:	4a50      	ldr	r2, [pc, #320]	; (20012cf4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
20012bb4:	4293      	cmp	r3, r2
20012bb6:	d00a      	beq.n	20012bce <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
20012bb8:	68fb      	ldr	r3, [r7, #12]
20012bba:	681b      	ldr	r3, [r3, #0]
20012bbc:	4a4e      	ldr	r2, [pc, #312]	; (20012cf8 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
20012bbe:	4293      	cmp	r3, r2
20012bc0:	d102      	bne.n	20012bc8 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
20012bc2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012bc6:	e01e      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20012bcc:	e01b      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012bce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012bd2:	e018      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012bd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012bd8:	e015      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012bda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012bde:	e012      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012be0:	f44f 7300 	mov.w	r3, #512	; 0x200
20012be4:	e00f      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012be6:	f44f 7300 	mov.w	r3, #512	; 0x200
20012bea:	e00c      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012bec:	f44f 7300 	mov.w	r3, #512	; 0x200
20012bf0:	e009      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
20012bf6:	e006      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012bf8:	2308      	movs	r3, #8
20012bfa:	e004      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012bfc:	2308      	movs	r3, #8
20012bfe:	e002      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012c00:	2308      	movs	r3, #8
20012c02:	e000      	b.n	20012c06 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20012c04:	2308      	movs	r3, #8
20012c06:	4a3f      	ldr	r2, [pc, #252]	; (20012d04 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
20012c08:	60d3      	str	r3, [r2, #12]
20012c0a:	e080      	b.n	20012d0e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
20012c0c:	68fb      	ldr	r3, [r7, #12]
20012c0e:	681b      	ldr	r3, [r3, #0]
20012c10:	4a2e      	ldr	r2, [pc, #184]	; (20012ccc <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20012c12:	4293      	cmp	r3, r2
20012c14:	d078      	beq.n	20012d08 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20012c16:	68fb      	ldr	r3, [r7, #12]
20012c18:	681b      	ldr	r3, [r3, #0]
20012c1a:	4a2d      	ldr	r2, [pc, #180]	; (20012cd0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20012c1c:	4293      	cmp	r3, r2
20012c1e:	d050      	beq.n	20012cc2 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
20012c20:	68fb      	ldr	r3, [r7, #12]
20012c22:	681b      	ldr	r3, [r3, #0]
20012c24:	4a2b      	ldr	r2, [pc, #172]	; (20012cd4 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
20012c26:	4293      	cmp	r3, r2
20012c28:	d049      	beq.n	20012cbe <HAL_DMAEx_MultiBufferStart_IT+0xae2>
20012c2a:	68fb      	ldr	r3, [r7, #12]
20012c2c:	681b      	ldr	r3, [r3, #0]
20012c2e:	4a2a      	ldr	r2, [pc, #168]	; (20012cd8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
20012c30:	4293      	cmp	r3, r2
20012c32:	d042      	beq.n	20012cba <HAL_DMAEx_MultiBufferStart_IT+0xade>
20012c34:	68fb      	ldr	r3, [r7, #12]
20012c36:	681b      	ldr	r3, [r3, #0]
20012c38:	4a28      	ldr	r2, [pc, #160]	; (20012cdc <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
20012c3a:	4293      	cmp	r3, r2
20012c3c:	d03a      	beq.n	20012cb4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
20012c3e:	68fb      	ldr	r3, [r7, #12]
20012c40:	681b      	ldr	r3, [r3, #0]
20012c42:	4a27      	ldr	r2, [pc, #156]	; (20012ce0 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
20012c44:	4293      	cmp	r3, r2
20012c46:	d032      	beq.n	20012cae <HAL_DMAEx_MultiBufferStart_IT+0xad2>
20012c48:	68fb      	ldr	r3, [r7, #12]
20012c4a:	681b      	ldr	r3, [r3, #0]
20012c4c:	4a25      	ldr	r2, [pc, #148]	; (20012ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
20012c4e:	4293      	cmp	r3, r2
20012c50:	d02a      	beq.n	20012ca8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
20012c52:	68fb      	ldr	r3, [r7, #12]
20012c54:	681b      	ldr	r3, [r3, #0]
20012c56:	4a24      	ldr	r2, [pc, #144]	; (20012ce8 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
20012c58:	4293      	cmp	r3, r2
20012c5a:	d022      	beq.n	20012ca2 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
20012c5c:	68fb      	ldr	r3, [r7, #12]
20012c5e:	681b      	ldr	r3, [r3, #0]
20012c60:	4a22      	ldr	r2, [pc, #136]	; (20012cec <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
20012c62:	4293      	cmp	r3, r2
20012c64:	d01a      	beq.n	20012c9c <HAL_DMAEx_MultiBufferStart_IT+0xac0>
20012c66:	68fb      	ldr	r3, [r7, #12]
20012c68:	681b      	ldr	r3, [r3, #0]
20012c6a:	4a21      	ldr	r2, [pc, #132]	; (20012cf0 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
20012c6c:	4293      	cmp	r3, r2
20012c6e:	d012      	beq.n	20012c96 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
20012c70:	68fb      	ldr	r3, [r7, #12]
20012c72:	681b      	ldr	r3, [r3, #0]
20012c74:	4a1f      	ldr	r2, [pc, #124]	; (20012cf4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
20012c76:	4293      	cmp	r3, r2
20012c78:	d00a      	beq.n	20012c90 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
20012c7a:	68fb      	ldr	r3, [r7, #12]
20012c7c:	681b      	ldr	r3, [r3, #0]
20012c7e:	4a1e      	ldr	r2, [pc, #120]	; (20012cf8 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
20012c80:	4293      	cmp	r3, r2
20012c82:	d102      	bne.n	20012c8a <HAL_DMAEx_MultiBufferStart_IT+0xaae>
20012c84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012c88:	e03f      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20012c8e:	e03c      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012c90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012c94:	e039      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012c96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012c9a:	e036      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012c9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20012ca0:	e033      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
20012ca6:	e030      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
20012cac:	e02d      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012cae:	f44f 7300 	mov.w	r3, #512	; 0x200
20012cb2:	e02a      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
20012cb8:	e027      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012cba:	2308      	movs	r3, #8
20012cbc:	e025      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012cbe:	2308      	movs	r3, #8
20012cc0:	e023      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012cc2:	2308      	movs	r3, #8
20012cc4:	e021      	b.n	20012d0a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20012cc6:	bf00      	nop
20012cc8:	400260b8 	.word	0x400260b8
20012ccc:	40026010 	.word	0x40026010
20012cd0:	40026410 	.word	0x40026410
20012cd4:	40026070 	.word	0x40026070
20012cd8:	40026470 	.word	0x40026470
20012cdc:	40026028 	.word	0x40026028
20012ce0:	40026428 	.word	0x40026428
20012ce4:	40026088 	.word	0x40026088
20012ce8:	40026488 	.word	0x40026488
20012cec:	40026040 	.word	0x40026040
20012cf0:	40026440 	.word	0x40026440
20012cf4:	400260a0 	.word	0x400260a0
20012cf8:	400264a0 	.word	0x400264a0
20012cfc:	40026400 	.word	0x40026400
20012d00:	40026058 	.word	0x40026058
20012d04:	40026000 	.word	0x40026000
20012d08:	2308      	movs	r3, #8
20012d0a:	4a9a      	ldr	r2, [pc, #616]	; (20012f74 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
20012d0c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20012d0e:	68fb      	ldr	r3, [r7, #12]
20012d10:	681b      	ldr	r3, [r3, #0]
20012d12:	461a      	mov	r2, r3
20012d14:	4b98      	ldr	r3, [pc, #608]	; (20012f78 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
20012d16:	429a      	cmp	r2, r3
20012d18:	d960      	bls.n	20012ddc <HAL_DMAEx_MultiBufferStart_IT+0xc00>
20012d1a:	68fb      	ldr	r3, [r7, #12]
20012d1c:	681b      	ldr	r3, [r3, #0]
20012d1e:	4a97      	ldr	r2, [pc, #604]	; (20012f7c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
20012d20:	4293      	cmp	r3, r2
20012d22:	d057      	beq.n	20012dd4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20012d24:	68fb      	ldr	r3, [r7, #12]
20012d26:	681b      	ldr	r3, [r3, #0]
20012d28:	4a95      	ldr	r2, [pc, #596]	; (20012f80 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
20012d2a:	4293      	cmp	r3, r2
20012d2c:	d050      	beq.n	20012dd0 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
20012d2e:	68fb      	ldr	r3, [r7, #12]
20012d30:	681b      	ldr	r3, [r3, #0]
20012d32:	4a94      	ldr	r2, [pc, #592]	; (20012f84 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
20012d34:	4293      	cmp	r3, r2
20012d36:	d049      	beq.n	20012dcc <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
20012d38:	68fb      	ldr	r3, [r7, #12]
20012d3a:	681b      	ldr	r3, [r3, #0]
20012d3c:	4a92      	ldr	r2, [pc, #584]	; (20012f88 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
20012d3e:	4293      	cmp	r3, r2
20012d40:	d042      	beq.n	20012dc8 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
20012d42:	68fb      	ldr	r3, [r7, #12]
20012d44:	681b      	ldr	r3, [r3, #0]
20012d46:	4a91      	ldr	r2, [pc, #580]	; (20012f8c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
20012d48:	4293      	cmp	r3, r2
20012d4a:	d03a      	beq.n	20012dc2 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
20012d4c:	68fb      	ldr	r3, [r7, #12]
20012d4e:	681b      	ldr	r3, [r3, #0]
20012d50:	4a8f      	ldr	r2, [pc, #572]	; (20012f90 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
20012d52:	4293      	cmp	r3, r2
20012d54:	d032      	beq.n	20012dbc <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
20012d56:	68fb      	ldr	r3, [r7, #12]
20012d58:	681b      	ldr	r3, [r3, #0]
20012d5a:	4a8e      	ldr	r2, [pc, #568]	; (20012f94 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
20012d5c:	4293      	cmp	r3, r2
20012d5e:	d02a      	beq.n	20012db6 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
20012d60:	68fb      	ldr	r3, [r7, #12]
20012d62:	681b      	ldr	r3, [r3, #0]
20012d64:	4a8c      	ldr	r2, [pc, #560]	; (20012f98 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
20012d66:	4293      	cmp	r3, r2
20012d68:	d022      	beq.n	20012db0 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
20012d6a:	68fb      	ldr	r3, [r7, #12]
20012d6c:	681b      	ldr	r3, [r3, #0]
20012d6e:	4a8b      	ldr	r2, [pc, #556]	; (20012f9c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
20012d70:	4293      	cmp	r3, r2
20012d72:	d01a      	beq.n	20012daa <HAL_DMAEx_MultiBufferStart_IT+0xbce>
20012d74:	68fb      	ldr	r3, [r7, #12]
20012d76:	681b      	ldr	r3, [r3, #0]
20012d78:	4a89      	ldr	r2, [pc, #548]	; (20012fa0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
20012d7a:	4293      	cmp	r3, r2
20012d7c:	d012      	beq.n	20012da4 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
20012d7e:	68fb      	ldr	r3, [r7, #12]
20012d80:	681b      	ldr	r3, [r3, #0]
20012d82:	4a88      	ldr	r2, [pc, #544]	; (20012fa4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
20012d84:	4293      	cmp	r3, r2
20012d86:	d00a      	beq.n	20012d9e <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
20012d88:	68fb      	ldr	r3, [r7, #12]
20012d8a:	681b      	ldr	r3, [r3, #0]
20012d8c:	4a86      	ldr	r2, [pc, #536]	; (20012fa8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
20012d8e:	4293      	cmp	r3, r2
20012d90:	d102      	bne.n	20012d98 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
20012d92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012d96:	e01e      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20012d9c:	e01b      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012d9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012da2:	e018      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012da4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012da8:	e015      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012daa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012dae:	e012      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012db0:	f44f 7380 	mov.w	r3, #256	; 0x100
20012db4:	e00f      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012db6:	f44f 7380 	mov.w	r3, #256	; 0x100
20012dba:	e00c      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
20012dc0:	e009      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
20012dc6:	e006      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012dc8:	2304      	movs	r3, #4
20012dca:	e004      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012dcc:	2304      	movs	r3, #4
20012dce:	e002      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012dd0:	2304      	movs	r3, #4
20012dd2:	e000      	b.n	20012dd6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20012dd4:	2304      	movs	r3, #4
20012dd6:	4a75      	ldr	r2, [pc, #468]	; (20012fac <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
20012dd8:	60d3      	str	r3, [r2, #12]
20012dda:	e151      	b.n	20013080 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
20012ddc:	68fb      	ldr	r3, [r7, #12]
20012dde:	681b      	ldr	r3, [r3, #0]
20012de0:	461a      	mov	r2, r3
20012de2:	4b73      	ldr	r3, [pc, #460]	; (20012fb0 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
20012de4:	429a      	cmp	r2, r3
20012de6:	d960      	bls.n	20012eaa <HAL_DMAEx_MultiBufferStart_IT+0xcce>
20012de8:	68fb      	ldr	r3, [r7, #12]
20012dea:	681b      	ldr	r3, [r3, #0]
20012dec:	4a63      	ldr	r2, [pc, #396]	; (20012f7c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
20012dee:	4293      	cmp	r3, r2
20012df0:	d057      	beq.n	20012ea2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20012df2:	68fb      	ldr	r3, [r7, #12]
20012df4:	681b      	ldr	r3, [r3, #0]
20012df6:	4a62      	ldr	r2, [pc, #392]	; (20012f80 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
20012df8:	4293      	cmp	r3, r2
20012dfa:	d050      	beq.n	20012e9e <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
20012dfc:	68fb      	ldr	r3, [r7, #12]
20012dfe:	681b      	ldr	r3, [r3, #0]
20012e00:	4a60      	ldr	r2, [pc, #384]	; (20012f84 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
20012e02:	4293      	cmp	r3, r2
20012e04:	d049      	beq.n	20012e9a <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
20012e06:	68fb      	ldr	r3, [r7, #12]
20012e08:	681b      	ldr	r3, [r3, #0]
20012e0a:	4a5f      	ldr	r2, [pc, #380]	; (20012f88 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
20012e0c:	4293      	cmp	r3, r2
20012e0e:	d042      	beq.n	20012e96 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
20012e10:	68fb      	ldr	r3, [r7, #12]
20012e12:	681b      	ldr	r3, [r3, #0]
20012e14:	4a5d      	ldr	r2, [pc, #372]	; (20012f8c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
20012e16:	4293      	cmp	r3, r2
20012e18:	d03a      	beq.n	20012e90 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
20012e1a:	68fb      	ldr	r3, [r7, #12]
20012e1c:	681b      	ldr	r3, [r3, #0]
20012e1e:	4a5c      	ldr	r2, [pc, #368]	; (20012f90 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
20012e20:	4293      	cmp	r3, r2
20012e22:	d032      	beq.n	20012e8a <HAL_DMAEx_MultiBufferStart_IT+0xcae>
20012e24:	68fb      	ldr	r3, [r7, #12]
20012e26:	681b      	ldr	r3, [r3, #0]
20012e28:	4a5a      	ldr	r2, [pc, #360]	; (20012f94 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
20012e2a:	4293      	cmp	r3, r2
20012e2c:	d02a      	beq.n	20012e84 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
20012e2e:	68fb      	ldr	r3, [r7, #12]
20012e30:	681b      	ldr	r3, [r3, #0]
20012e32:	4a59      	ldr	r2, [pc, #356]	; (20012f98 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
20012e34:	4293      	cmp	r3, r2
20012e36:	d022      	beq.n	20012e7e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
20012e38:	68fb      	ldr	r3, [r7, #12]
20012e3a:	681b      	ldr	r3, [r3, #0]
20012e3c:	4a57      	ldr	r2, [pc, #348]	; (20012f9c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
20012e3e:	4293      	cmp	r3, r2
20012e40:	d01a      	beq.n	20012e78 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
20012e42:	68fb      	ldr	r3, [r7, #12]
20012e44:	681b      	ldr	r3, [r3, #0]
20012e46:	4a56      	ldr	r2, [pc, #344]	; (20012fa0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
20012e48:	4293      	cmp	r3, r2
20012e4a:	d012      	beq.n	20012e72 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
20012e4c:	68fb      	ldr	r3, [r7, #12]
20012e4e:	681b      	ldr	r3, [r3, #0]
20012e50:	4a54      	ldr	r2, [pc, #336]	; (20012fa4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
20012e52:	4293      	cmp	r3, r2
20012e54:	d00a      	beq.n	20012e6c <HAL_DMAEx_MultiBufferStart_IT+0xc90>
20012e56:	68fb      	ldr	r3, [r7, #12]
20012e58:	681b      	ldr	r3, [r3, #0]
20012e5a:	4a53      	ldr	r2, [pc, #332]	; (20012fa8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
20012e5c:	4293      	cmp	r3, r2
20012e5e:	d102      	bne.n	20012e66 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
20012e60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012e64:	e01e      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012e66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20012e6a:	e01b      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012e6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012e70:	e018      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012e72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012e76:	e015      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012e78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012e7c:	e012      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
20012e82:	e00f      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012e84:	f44f 7380 	mov.w	r3, #256	; 0x100
20012e88:	e00c      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
20012e8e:	e009      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012e90:	f44f 7380 	mov.w	r3, #256	; 0x100
20012e94:	e006      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012e96:	2304      	movs	r3, #4
20012e98:	e004      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012e9a:	2304      	movs	r3, #4
20012e9c:	e002      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012e9e:	2304      	movs	r3, #4
20012ea0:	e000      	b.n	20012ea4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20012ea2:	2304      	movs	r3, #4
20012ea4:	4a41      	ldr	r2, [pc, #260]	; (20012fac <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
20012ea6:	6093      	str	r3, [r2, #8]
20012ea8:	e0ea      	b.n	20013080 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
20012eaa:	68fb      	ldr	r3, [r7, #12]
20012eac:	681b      	ldr	r3, [r3, #0]
20012eae:	461a      	mov	r2, r3
20012eb0:	4b40      	ldr	r3, [pc, #256]	; (20012fb4 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
20012eb2:	429a      	cmp	r2, r3
20012eb4:	f240 8084 	bls.w	20012fc0 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
20012eb8:	68fb      	ldr	r3, [r7, #12]
20012eba:	681b      	ldr	r3, [r3, #0]
20012ebc:	4a2f      	ldr	r2, [pc, #188]	; (20012f7c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
20012ebe:	4293      	cmp	r3, r2
20012ec0:	d07a      	beq.n	20012fb8 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
20012ec2:	68fb      	ldr	r3, [r7, #12]
20012ec4:	681b      	ldr	r3, [r3, #0]
20012ec6:	4a2e      	ldr	r2, [pc, #184]	; (20012f80 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
20012ec8:	4293      	cmp	r3, r2
20012eca:	d050      	beq.n	20012f6e <HAL_DMAEx_MultiBufferStart_IT+0xd92>
20012ecc:	68fb      	ldr	r3, [r7, #12]
20012ece:	681b      	ldr	r3, [r3, #0]
20012ed0:	4a2c      	ldr	r2, [pc, #176]	; (20012f84 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
20012ed2:	4293      	cmp	r3, r2
20012ed4:	d049      	beq.n	20012f6a <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
20012ed6:	68fb      	ldr	r3, [r7, #12]
20012ed8:	681b      	ldr	r3, [r3, #0]
20012eda:	4a2b      	ldr	r2, [pc, #172]	; (20012f88 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
20012edc:	4293      	cmp	r3, r2
20012ede:	d042      	beq.n	20012f66 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
20012ee0:	68fb      	ldr	r3, [r7, #12]
20012ee2:	681b      	ldr	r3, [r3, #0]
20012ee4:	4a29      	ldr	r2, [pc, #164]	; (20012f8c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
20012ee6:	4293      	cmp	r3, r2
20012ee8:	d03a      	beq.n	20012f60 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
20012eea:	68fb      	ldr	r3, [r7, #12]
20012eec:	681b      	ldr	r3, [r3, #0]
20012eee:	4a28      	ldr	r2, [pc, #160]	; (20012f90 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
20012ef0:	4293      	cmp	r3, r2
20012ef2:	d032      	beq.n	20012f5a <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
20012ef4:	68fb      	ldr	r3, [r7, #12]
20012ef6:	681b      	ldr	r3, [r3, #0]
20012ef8:	4a26      	ldr	r2, [pc, #152]	; (20012f94 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
20012efa:	4293      	cmp	r3, r2
20012efc:	d02a      	beq.n	20012f54 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
20012efe:	68fb      	ldr	r3, [r7, #12]
20012f00:	681b      	ldr	r3, [r3, #0]
20012f02:	4a25      	ldr	r2, [pc, #148]	; (20012f98 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
20012f04:	4293      	cmp	r3, r2
20012f06:	d022      	beq.n	20012f4e <HAL_DMAEx_MultiBufferStart_IT+0xd72>
20012f08:	68fb      	ldr	r3, [r7, #12]
20012f0a:	681b      	ldr	r3, [r3, #0]
20012f0c:	4a23      	ldr	r2, [pc, #140]	; (20012f9c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
20012f0e:	4293      	cmp	r3, r2
20012f10:	d01a      	beq.n	20012f48 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
20012f12:	68fb      	ldr	r3, [r7, #12]
20012f14:	681b      	ldr	r3, [r3, #0]
20012f16:	4a22      	ldr	r2, [pc, #136]	; (20012fa0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
20012f18:	4293      	cmp	r3, r2
20012f1a:	d012      	beq.n	20012f42 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
20012f1c:	68fb      	ldr	r3, [r7, #12]
20012f1e:	681b      	ldr	r3, [r3, #0]
20012f20:	4a20      	ldr	r2, [pc, #128]	; (20012fa4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
20012f22:	4293      	cmp	r3, r2
20012f24:	d00a      	beq.n	20012f3c <HAL_DMAEx_MultiBufferStart_IT+0xd60>
20012f26:	68fb      	ldr	r3, [r7, #12]
20012f28:	681b      	ldr	r3, [r3, #0]
20012f2a:	4a1f      	ldr	r2, [pc, #124]	; (20012fa8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
20012f2c:	4293      	cmp	r3, r2
20012f2e:	d102      	bne.n	20012f36 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
20012f30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012f34:	e041      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20012f3a:	e03e      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012f40:	e03b      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012f46:	e038      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20012f4c:	e035      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
20012f52:	e032      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f54:	f44f 7380 	mov.w	r3, #256	; 0x100
20012f58:	e02f      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
20012f5e:	e02c      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f60:	f44f 7380 	mov.w	r3, #256	; 0x100
20012f64:	e029      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f66:	2304      	movs	r3, #4
20012f68:	e027      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f6a:	2304      	movs	r3, #4
20012f6c:	e025      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f6e:	2304      	movs	r3, #4
20012f70:	e023      	b.n	20012fba <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20012f72:	bf00      	nop
20012f74:	40026000 	.word	0x40026000
20012f78:	40026458 	.word	0x40026458
20012f7c:	40026010 	.word	0x40026010
20012f80:	40026410 	.word	0x40026410
20012f84:	40026070 	.word	0x40026070
20012f88:	40026470 	.word	0x40026470
20012f8c:	40026028 	.word	0x40026028
20012f90:	40026428 	.word	0x40026428
20012f94:	40026088 	.word	0x40026088
20012f98:	40026488 	.word	0x40026488
20012f9c:	40026040 	.word	0x40026040
20012fa0:	40026440 	.word	0x40026440
20012fa4:	400260a0 	.word	0x400260a0
20012fa8:	400264a0 	.word	0x400264a0
20012fac:	40026400 	.word	0x40026400
20012fb0:	400260b8 	.word	0x400260b8
20012fb4:	40026058 	.word	0x40026058
20012fb8:	2304      	movs	r3, #4
20012fba:	4a94      	ldr	r2, [pc, #592]	; (2001320c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
20012fbc:	60d3      	str	r3, [r2, #12]
20012fbe:	e05f      	b.n	20013080 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
20012fc0:	68fb      	ldr	r3, [r7, #12]
20012fc2:	681b      	ldr	r3, [r3, #0]
20012fc4:	4a92      	ldr	r2, [pc, #584]	; (20013210 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
20012fc6:	4293      	cmp	r3, r2
20012fc8:	d057      	beq.n	2001307a <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
20012fca:	68fb      	ldr	r3, [r7, #12]
20012fcc:	681b      	ldr	r3, [r3, #0]
20012fce:	4a91      	ldr	r2, [pc, #580]	; (20013214 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
20012fd0:	4293      	cmp	r3, r2
20012fd2:	d050      	beq.n	20013076 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
20012fd4:	68fb      	ldr	r3, [r7, #12]
20012fd6:	681b      	ldr	r3, [r3, #0]
20012fd8:	4a8f      	ldr	r2, [pc, #572]	; (20013218 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
20012fda:	4293      	cmp	r3, r2
20012fdc:	d049      	beq.n	20013072 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
20012fde:	68fb      	ldr	r3, [r7, #12]
20012fe0:	681b      	ldr	r3, [r3, #0]
20012fe2:	4a8e      	ldr	r2, [pc, #568]	; (2001321c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
20012fe4:	4293      	cmp	r3, r2
20012fe6:	d042      	beq.n	2001306e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
20012fe8:	68fb      	ldr	r3, [r7, #12]
20012fea:	681b      	ldr	r3, [r3, #0]
20012fec:	4a8c      	ldr	r2, [pc, #560]	; (20013220 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
20012fee:	4293      	cmp	r3, r2
20012ff0:	d03a      	beq.n	20013068 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
20012ff2:	68fb      	ldr	r3, [r7, #12]
20012ff4:	681b      	ldr	r3, [r3, #0]
20012ff6:	4a8b      	ldr	r2, [pc, #556]	; (20013224 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
20012ff8:	4293      	cmp	r3, r2
20012ffa:	d032      	beq.n	20013062 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
20012ffc:	68fb      	ldr	r3, [r7, #12]
20012ffe:	681b      	ldr	r3, [r3, #0]
20013000:	4a89      	ldr	r2, [pc, #548]	; (20013228 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
20013002:	4293      	cmp	r3, r2
20013004:	d02a      	beq.n	2001305c <HAL_DMAEx_MultiBufferStart_IT+0xe80>
20013006:	68fb      	ldr	r3, [r7, #12]
20013008:	681b      	ldr	r3, [r3, #0]
2001300a:	4a88      	ldr	r2, [pc, #544]	; (2001322c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
2001300c:	4293      	cmp	r3, r2
2001300e:	d022      	beq.n	20013056 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
20013010:	68fb      	ldr	r3, [r7, #12]
20013012:	681b      	ldr	r3, [r3, #0]
20013014:	4a86      	ldr	r2, [pc, #536]	; (20013230 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
20013016:	4293      	cmp	r3, r2
20013018:	d01a      	beq.n	20013050 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
2001301a:	68fb      	ldr	r3, [r7, #12]
2001301c:	681b      	ldr	r3, [r3, #0]
2001301e:	4a85      	ldr	r2, [pc, #532]	; (20013234 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
20013020:	4293      	cmp	r3, r2
20013022:	d012      	beq.n	2001304a <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
20013024:	68fb      	ldr	r3, [r7, #12]
20013026:	681b      	ldr	r3, [r3, #0]
20013028:	4a83      	ldr	r2, [pc, #524]	; (20013238 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
2001302a:	4293      	cmp	r3, r2
2001302c:	d00a      	beq.n	20013044 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
2001302e:	68fb      	ldr	r3, [r7, #12]
20013030:	681b      	ldr	r3, [r3, #0]
20013032:	4a82      	ldr	r2, [pc, #520]	; (2001323c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
20013034:	4293      	cmp	r3, r2
20013036:	d102      	bne.n	2001303e <HAL_DMAEx_MultiBufferStart_IT+0xe62>
20013038:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2001303c:	e01e      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
2001303e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20013042:	e01b      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20013044:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20013048:	e018      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
2001304a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2001304e:	e015      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20013050:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20013054:	e012      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20013056:	f44f 7380 	mov.w	r3, #256	; 0x100
2001305a:	e00f      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
2001305c:	f44f 7380 	mov.w	r3, #256	; 0x100
20013060:	e00c      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20013062:	f44f 7380 	mov.w	r3, #256	; 0x100
20013066:	e009      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20013068:	f44f 7380 	mov.w	r3, #256	; 0x100
2001306c:	e006      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
2001306e:	2304      	movs	r3, #4
20013070:	e004      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20013072:	2304      	movs	r3, #4
20013074:	e002      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20013076:	2304      	movs	r3, #4
20013078:	e000      	b.n	2001307c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
2001307a:	2304      	movs	r3, #4
2001307c:	4a63      	ldr	r2, [pc, #396]	; (2001320c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
2001307e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20013080:	68fb      	ldr	r3, [r7, #12]
20013082:	681b      	ldr	r3, [r3, #0]
20013084:	461a      	mov	r2, r3
20013086:	4b6e      	ldr	r3, [pc, #440]	; (20013240 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
20013088:	429a      	cmp	r2, r3
2001308a:	d95c      	bls.n	20013146 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
2001308c:	68fb      	ldr	r3, [r7, #12]
2001308e:	681b      	ldr	r3, [r3, #0]
20013090:	4a5f      	ldr	r2, [pc, #380]	; (20013210 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
20013092:	4293      	cmp	r3, r2
20013094:	d053      	beq.n	2001313e <HAL_DMAEx_MultiBufferStart_IT+0xf62>
20013096:	68fb      	ldr	r3, [r7, #12]
20013098:	681b      	ldr	r3, [r3, #0]
2001309a:	4a5e      	ldr	r2, [pc, #376]	; (20013214 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
2001309c:	4293      	cmp	r3, r2
2001309e:	d04c      	beq.n	2001313a <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
200130a0:	68fb      	ldr	r3, [r7, #12]
200130a2:	681b      	ldr	r3, [r3, #0]
200130a4:	4a5c      	ldr	r2, [pc, #368]	; (20013218 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
200130a6:	4293      	cmp	r3, r2
200130a8:	d045      	beq.n	20013136 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
200130aa:	68fb      	ldr	r3, [r7, #12]
200130ac:	681b      	ldr	r3, [r3, #0]
200130ae:	4a5b      	ldr	r2, [pc, #364]	; (2001321c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
200130b0:	4293      	cmp	r3, r2
200130b2:	d03e      	beq.n	20013132 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
200130b4:	68fb      	ldr	r3, [r7, #12]
200130b6:	681b      	ldr	r3, [r3, #0]
200130b8:	4a59      	ldr	r2, [pc, #356]	; (20013220 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
200130ba:	4293      	cmp	r3, r2
200130bc:	d037      	beq.n	2001312e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
200130be:	68fb      	ldr	r3, [r7, #12]
200130c0:	681b      	ldr	r3, [r3, #0]
200130c2:	4a58      	ldr	r2, [pc, #352]	; (20013224 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
200130c4:	4293      	cmp	r3, r2
200130c6:	d030      	beq.n	2001312a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
200130c8:	68fb      	ldr	r3, [r7, #12]
200130ca:	681b      	ldr	r3, [r3, #0]
200130cc:	4a56      	ldr	r2, [pc, #344]	; (20013228 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
200130ce:	4293      	cmp	r3, r2
200130d0:	d029      	beq.n	20013126 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
200130d2:	68fb      	ldr	r3, [r7, #12]
200130d4:	681b      	ldr	r3, [r3, #0]
200130d6:	4a55      	ldr	r2, [pc, #340]	; (2001322c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
200130d8:	4293      	cmp	r3, r2
200130da:	d022      	beq.n	20013122 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
200130dc:	68fb      	ldr	r3, [r7, #12]
200130de:	681b      	ldr	r3, [r3, #0]
200130e0:	4a53      	ldr	r2, [pc, #332]	; (20013230 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
200130e2:	4293      	cmp	r3, r2
200130e4:	d01a      	beq.n	2001311c <HAL_DMAEx_MultiBufferStart_IT+0xf40>
200130e6:	68fb      	ldr	r3, [r7, #12]
200130e8:	681b      	ldr	r3, [r3, #0]
200130ea:	4a52      	ldr	r2, [pc, #328]	; (20013234 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
200130ec:	4293      	cmp	r3, r2
200130ee:	d012      	beq.n	20013116 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
200130f0:	68fb      	ldr	r3, [r7, #12]
200130f2:	681b      	ldr	r3, [r3, #0]
200130f4:	4a50      	ldr	r2, [pc, #320]	; (20013238 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
200130f6:	4293      	cmp	r3, r2
200130f8:	d00a      	beq.n	20013110 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
200130fa:	68fb      	ldr	r3, [r7, #12]
200130fc:	681b      	ldr	r3, [r3, #0]
200130fe:	4a4f      	ldr	r2, [pc, #316]	; (2001323c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
20013100:	4293      	cmp	r3, r2
20013102:	d102      	bne.n	2001310a <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
20013104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20013108:	e01a      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
2001310a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2001310e:	e017      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20013110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20013114:	e014      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20013116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2001311a:	e011      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
2001311c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20013120:	e00e      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20013122:	2340      	movs	r3, #64	; 0x40
20013124:	e00c      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20013126:	2340      	movs	r3, #64	; 0x40
20013128:	e00a      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
2001312a:	2340      	movs	r3, #64	; 0x40
2001312c:	e008      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
2001312e:	2340      	movs	r3, #64	; 0x40
20013130:	e006      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20013132:	2301      	movs	r3, #1
20013134:	e004      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20013136:	2301      	movs	r3, #1
20013138:	e002      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
2001313a:	2301      	movs	r3, #1
2001313c:	e000      	b.n	20013140 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
2001313e:	2301      	movs	r3, #1
20013140:	4a40      	ldr	r2, [pc, #256]	; (20013244 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
20013142:	60d3      	str	r3, [r2, #12]
20013144:	e141      	b.n	200133ca <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
20013146:	68fb      	ldr	r3, [r7, #12]
20013148:	681b      	ldr	r3, [r3, #0]
2001314a:	461a      	mov	r2, r3
2001314c:	4b3e      	ldr	r3, [pc, #248]	; (20013248 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
2001314e:	429a      	cmp	r2, r3
20013150:	d97c      	bls.n	2001324c <HAL_DMAEx_MultiBufferStart_IT+0x1070>
20013152:	68fb      	ldr	r3, [r7, #12]
20013154:	681b      	ldr	r3, [r3, #0]
20013156:	4a2e      	ldr	r2, [pc, #184]	; (20013210 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
20013158:	4293      	cmp	r3, r2
2001315a:	d053      	beq.n	20013204 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
2001315c:	68fb      	ldr	r3, [r7, #12]
2001315e:	681b      	ldr	r3, [r3, #0]
20013160:	4a2c      	ldr	r2, [pc, #176]	; (20013214 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
20013162:	4293      	cmp	r3, r2
20013164:	d04c      	beq.n	20013200 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
20013166:	68fb      	ldr	r3, [r7, #12]
20013168:	681b      	ldr	r3, [r3, #0]
2001316a:	4a2b      	ldr	r2, [pc, #172]	; (20013218 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
2001316c:	4293      	cmp	r3, r2
2001316e:	d045      	beq.n	200131fc <HAL_DMAEx_MultiBufferStart_IT+0x1020>
20013170:	68fb      	ldr	r3, [r7, #12]
20013172:	681b      	ldr	r3, [r3, #0]
20013174:	4a29      	ldr	r2, [pc, #164]	; (2001321c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
20013176:	4293      	cmp	r3, r2
20013178:	d03e      	beq.n	200131f8 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
2001317a:	68fb      	ldr	r3, [r7, #12]
2001317c:	681b      	ldr	r3, [r3, #0]
2001317e:	4a28      	ldr	r2, [pc, #160]	; (20013220 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
20013180:	4293      	cmp	r3, r2
20013182:	d037      	beq.n	200131f4 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
20013184:	68fb      	ldr	r3, [r7, #12]
20013186:	681b      	ldr	r3, [r3, #0]
20013188:	4a26      	ldr	r2, [pc, #152]	; (20013224 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
2001318a:	4293      	cmp	r3, r2
2001318c:	d030      	beq.n	200131f0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
2001318e:	68fb      	ldr	r3, [r7, #12]
20013190:	681b      	ldr	r3, [r3, #0]
20013192:	4a25      	ldr	r2, [pc, #148]	; (20013228 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
20013194:	4293      	cmp	r3, r2
20013196:	d029      	beq.n	200131ec <HAL_DMAEx_MultiBufferStart_IT+0x1010>
20013198:	68fb      	ldr	r3, [r7, #12]
2001319a:	681b      	ldr	r3, [r3, #0]
2001319c:	4a23      	ldr	r2, [pc, #140]	; (2001322c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
2001319e:	4293      	cmp	r3, r2
200131a0:	d022      	beq.n	200131e8 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
200131a2:	68fb      	ldr	r3, [r7, #12]
200131a4:	681b      	ldr	r3, [r3, #0]
200131a6:	4a22      	ldr	r2, [pc, #136]	; (20013230 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
200131a8:	4293      	cmp	r3, r2
200131aa:	d01a      	beq.n	200131e2 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
200131ac:	68fb      	ldr	r3, [r7, #12]
200131ae:	681b      	ldr	r3, [r3, #0]
200131b0:	4a20      	ldr	r2, [pc, #128]	; (20013234 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
200131b2:	4293      	cmp	r3, r2
200131b4:	d012      	beq.n	200131dc <HAL_DMAEx_MultiBufferStart_IT+0x1000>
200131b6:	68fb      	ldr	r3, [r7, #12]
200131b8:	681b      	ldr	r3, [r3, #0]
200131ba:	4a1f      	ldr	r2, [pc, #124]	; (20013238 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
200131bc:	4293      	cmp	r3, r2
200131be:	d00a      	beq.n	200131d6 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
200131c0:	68fb      	ldr	r3, [r7, #12]
200131c2:	681b      	ldr	r3, [r3, #0]
200131c4:	4a1d      	ldr	r2, [pc, #116]	; (2001323c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
200131c6:	4293      	cmp	r3, r2
200131c8:	d102      	bne.n	200131d0 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
200131ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200131ce:	e01a      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
200131d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
200131d4:	e017      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
200131d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200131da:	e014      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
200131dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200131e0:	e011      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
200131e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200131e6:	e00e      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
200131e8:	2340      	movs	r3, #64	; 0x40
200131ea:	e00c      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
200131ec:	2340      	movs	r3, #64	; 0x40
200131ee:	e00a      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
200131f0:	2340      	movs	r3, #64	; 0x40
200131f2:	e008      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
200131f4:	2340      	movs	r3, #64	; 0x40
200131f6:	e006      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
200131f8:	2301      	movs	r3, #1
200131fa:	e004      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
200131fc:	2301      	movs	r3, #1
200131fe:	e002      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20013200:	2301      	movs	r3, #1
20013202:	e000      	b.n	20013206 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20013204:	2301      	movs	r3, #1
20013206:	4a0f      	ldr	r2, [pc, #60]	; (20013244 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
20013208:	6093      	str	r3, [r2, #8]
2001320a:	e0de      	b.n	200133ca <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
2001320c:	40026000 	.word	0x40026000
20013210:	40026010 	.word	0x40026010
20013214:	40026410 	.word	0x40026410
20013218:	40026070 	.word	0x40026070
2001321c:	40026470 	.word	0x40026470
20013220:	40026028 	.word	0x40026028
20013224:	40026428 	.word	0x40026428
20013228:	40026088 	.word	0x40026088
2001322c:	40026488 	.word	0x40026488
20013230:	40026040 	.word	0x40026040
20013234:	40026440 	.word	0x40026440
20013238:	400260a0 	.word	0x400260a0
2001323c:	400264a0 	.word	0x400264a0
20013240:	40026458 	.word	0x40026458
20013244:	40026400 	.word	0x40026400
20013248:	400260b8 	.word	0x400260b8
2001324c:	68fb      	ldr	r3, [r7, #12]
2001324e:	681b      	ldr	r3, [r3, #0]
20013250:	461a      	mov	r2, r3
20013252:	4b78      	ldr	r3, [pc, #480]	; (20013434 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
20013254:	429a      	cmp	r2, r3
20013256:	d95c      	bls.n	20013312 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
20013258:	68fb      	ldr	r3, [r7, #12]
2001325a:	681b      	ldr	r3, [r3, #0]
2001325c:	4a76      	ldr	r2, [pc, #472]	; (20013438 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
2001325e:	4293      	cmp	r3, r2
20013260:	d053      	beq.n	2001330a <HAL_DMAEx_MultiBufferStart_IT+0x112e>
20013262:	68fb      	ldr	r3, [r7, #12]
20013264:	681b      	ldr	r3, [r3, #0]
20013266:	4a75      	ldr	r2, [pc, #468]	; (2001343c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
20013268:	4293      	cmp	r3, r2
2001326a:	d04c      	beq.n	20013306 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
2001326c:	68fb      	ldr	r3, [r7, #12]
2001326e:	681b      	ldr	r3, [r3, #0]
20013270:	4a73      	ldr	r2, [pc, #460]	; (20013440 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
20013272:	4293      	cmp	r3, r2
20013274:	d045      	beq.n	20013302 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
20013276:	68fb      	ldr	r3, [r7, #12]
20013278:	681b      	ldr	r3, [r3, #0]
2001327a:	4a72      	ldr	r2, [pc, #456]	; (20013444 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
2001327c:	4293      	cmp	r3, r2
2001327e:	d03e      	beq.n	200132fe <HAL_DMAEx_MultiBufferStart_IT+0x1122>
20013280:	68fb      	ldr	r3, [r7, #12]
20013282:	681b      	ldr	r3, [r3, #0]
20013284:	4a70      	ldr	r2, [pc, #448]	; (20013448 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
20013286:	4293      	cmp	r3, r2
20013288:	d037      	beq.n	200132fa <HAL_DMAEx_MultiBufferStart_IT+0x111e>
2001328a:	68fb      	ldr	r3, [r7, #12]
2001328c:	681b      	ldr	r3, [r3, #0]
2001328e:	4a6f      	ldr	r2, [pc, #444]	; (2001344c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
20013290:	4293      	cmp	r3, r2
20013292:	d030      	beq.n	200132f6 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
20013294:	68fb      	ldr	r3, [r7, #12]
20013296:	681b      	ldr	r3, [r3, #0]
20013298:	4a6d      	ldr	r2, [pc, #436]	; (20013450 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
2001329a:	4293      	cmp	r3, r2
2001329c:	d029      	beq.n	200132f2 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
2001329e:	68fb      	ldr	r3, [r7, #12]
200132a0:	681b      	ldr	r3, [r3, #0]
200132a2:	4a6c      	ldr	r2, [pc, #432]	; (20013454 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
200132a4:	4293      	cmp	r3, r2
200132a6:	d022      	beq.n	200132ee <HAL_DMAEx_MultiBufferStart_IT+0x1112>
200132a8:	68fb      	ldr	r3, [r7, #12]
200132aa:	681b      	ldr	r3, [r3, #0]
200132ac:	4a6a      	ldr	r2, [pc, #424]	; (20013458 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
200132ae:	4293      	cmp	r3, r2
200132b0:	d01a      	beq.n	200132e8 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
200132b2:	68fb      	ldr	r3, [r7, #12]
200132b4:	681b      	ldr	r3, [r3, #0]
200132b6:	4a69      	ldr	r2, [pc, #420]	; (2001345c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
200132b8:	4293      	cmp	r3, r2
200132ba:	d012      	beq.n	200132e2 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
200132bc:	68fb      	ldr	r3, [r7, #12]
200132be:	681b      	ldr	r3, [r3, #0]
200132c0:	4a67      	ldr	r2, [pc, #412]	; (20013460 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
200132c2:	4293      	cmp	r3, r2
200132c4:	d00a      	beq.n	200132dc <HAL_DMAEx_MultiBufferStart_IT+0x1100>
200132c6:	68fb      	ldr	r3, [r7, #12]
200132c8:	681b      	ldr	r3, [r3, #0]
200132ca:	4a66      	ldr	r2, [pc, #408]	; (20013464 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
200132cc:	4293      	cmp	r3, r2
200132ce:	d102      	bne.n	200132d6 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
200132d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200132d4:	e01a      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
200132d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
200132da:	e017      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
200132dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200132e0:	e014      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
200132e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200132e6:	e011      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
200132e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200132ec:	e00e      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
200132ee:	2340      	movs	r3, #64	; 0x40
200132f0:	e00c      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
200132f2:	2340      	movs	r3, #64	; 0x40
200132f4:	e00a      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
200132f6:	2340      	movs	r3, #64	; 0x40
200132f8:	e008      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
200132fa:	2340      	movs	r3, #64	; 0x40
200132fc:	e006      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
200132fe:	2301      	movs	r3, #1
20013300:	e004      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
20013302:	2301      	movs	r3, #1
20013304:	e002      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
20013306:	2301      	movs	r3, #1
20013308:	e000      	b.n	2001330c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
2001330a:	2301      	movs	r3, #1
2001330c:	4a56      	ldr	r2, [pc, #344]	; (20013468 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
2001330e:	60d3      	str	r3, [r2, #12]
20013310:	e05b      	b.n	200133ca <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
20013312:	68fb      	ldr	r3, [r7, #12]
20013314:	681b      	ldr	r3, [r3, #0]
20013316:	4a48      	ldr	r2, [pc, #288]	; (20013438 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
20013318:	4293      	cmp	r3, r2
2001331a:	d053      	beq.n	200133c4 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
2001331c:	68fb      	ldr	r3, [r7, #12]
2001331e:	681b      	ldr	r3, [r3, #0]
20013320:	4a46      	ldr	r2, [pc, #280]	; (2001343c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
20013322:	4293      	cmp	r3, r2
20013324:	d04c      	beq.n	200133c0 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
20013326:	68fb      	ldr	r3, [r7, #12]
20013328:	681b      	ldr	r3, [r3, #0]
2001332a:	4a45      	ldr	r2, [pc, #276]	; (20013440 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
2001332c:	4293      	cmp	r3, r2
2001332e:	d045      	beq.n	200133bc <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
20013330:	68fb      	ldr	r3, [r7, #12]
20013332:	681b      	ldr	r3, [r3, #0]
20013334:	4a43      	ldr	r2, [pc, #268]	; (20013444 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
20013336:	4293      	cmp	r3, r2
20013338:	d03e      	beq.n	200133b8 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
2001333a:	68fb      	ldr	r3, [r7, #12]
2001333c:	681b      	ldr	r3, [r3, #0]
2001333e:	4a42      	ldr	r2, [pc, #264]	; (20013448 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
20013340:	4293      	cmp	r3, r2
20013342:	d037      	beq.n	200133b4 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
20013344:	68fb      	ldr	r3, [r7, #12]
20013346:	681b      	ldr	r3, [r3, #0]
20013348:	4a40      	ldr	r2, [pc, #256]	; (2001344c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
2001334a:	4293      	cmp	r3, r2
2001334c:	d030      	beq.n	200133b0 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
2001334e:	68fb      	ldr	r3, [r7, #12]
20013350:	681b      	ldr	r3, [r3, #0]
20013352:	4a3f      	ldr	r2, [pc, #252]	; (20013450 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
20013354:	4293      	cmp	r3, r2
20013356:	d029      	beq.n	200133ac <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
20013358:	68fb      	ldr	r3, [r7, #12]
2001335a:	681b      	ldr	r3, [r3, #0]
2001335c:	4a3d      	ldr	r2, [pc, #244]	; (20013454 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
2001335e:	4293      	cmp	r3, r2
20013360:	d022      	beq.n	200133a8 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
20013362:	68fb      	ldr	r3, [r7, #12]
20013364:	681b      	ldr	r3, [r3, #0]
20013366:	4a3c      	ldr	r2, [pc, #240]	; (20013458 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
20013368:	4293      	cmp	r3, r2
2001336a:	d01a      	beq.n	200133a2 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
2001336c:	68fb      	ldr	r3, [r7, #12]
2001336e:	681b      	ldr	r3, [r3, #0]
20013370:	4a3a      	ldr	r2, [pc, #232]	; (2001345c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
20013372:	4293      	cmp	r3, r2
20013374:	d012      	beq.n	2001339c <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
20013376:	68fb      	ldr	r3, [r7, #12]
20013378:	681b      	ldr	r3, [r3, #0]
2001337a:	4a39      	ldr	r2, [pc, #228]	; (20013460 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
2001337c:	4293      	cmp	r3, r2
2001337e:	d00a      	beq.n	20013396 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
20013380:	68fb      	ldr	r3, [r7, #12]
20013382:	681b      	ldr	r3, [r3, #0]
20013384:	4a37      	ldr	r2, [pc, #220]	; (20013464 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
20013386:	4293      	cmp	r3, r2
20013388:	d102      	bne.n	20013390 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
2001338a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2001338e:	e01a      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20013390:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20013394:	e017      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20013396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2001339a:	e014      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
2001339c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200133a0:	e011      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200133a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200133a6:	e00e      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200133a8:	2340      	movs	r3, #64	; 0x40
200133aa:	e00c      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200133ac:	2340      	movs	r3, #64	; 0x40
200133ae:	e00a      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200133b0:	2340      	movs	r3, #64	; 0x40
200133b2:	e008      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200133b4:	2340      	movs	r3, #64	; 0x40
200133b6:	e006      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200133b8:	2301      	movs	r3, #1
200133ba:	e004      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200133bc:	2301      	movs	r3, #1
200133be:	e002      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200133c0:	2301      	movs	r3, #1
200133c2:	e000      	b.n	200133c6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200133c4:	2301      	movs	r3, #1
200133c6:	4a28      	ldr	r2, [pc, #160]	; (20013468 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
200133c8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
200133ca:	68fb      	ldr	r3, [r7, #12]
200133cc:	681b      	ldr	r3, [r3, #0]
200133ce:	681a      	ldr	r2, [r3, #0]
200133d0:	68fb      	ldr	r3, [r7, #12]
200133d2:	681b      	ldr	r3, [r3, #0]
200133d4:	f042 0216 	orr.w	r2, r2, #22
200133d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
200133da:	68fb      	ldr	r3, [r7, #12]
200133dc:	681b      	ldr	r3, [r3, #0]
200133de:	695a      	ldr	r2, [r3, #20]
200133e0:	68fb      	ldr	r3, [r7, #12]
200133e2:	681b      	ldr	r3, [r3, #0]
200133e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
200133e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
200133ea:	68fb      	ldr	r3, [r7, #12]
200133ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200133ee:	2b00      	cmp	r3, #0
200133f0:	d103      	bne.n	200133fa <HAL_DMAEx_MultiBufferStart_IT+0x121e>
200133f2:	68fb      	ldr	r3, [r7, #12]
200133f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200133f6:	2b00      	cmp	r3, #0
200133f8:	d007      	beq.n	2001340a <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
200133fa:	68fb      	ldr	r3, [r7, #12]
200133fc:	681b      	ldr	r3, [r3, #0]
200133fe:	681a      	ldr	r2, [r3, #0]
20013400:	68fb      	ldr	r3, [r7, #12]
20013402:	681b      	ldr	r3, [r3, #0]
20013404:	f042 0208 	orr.w	r2, r2, #8
20013408:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
2001340a:	68fb      	ldr	r3, [r7, #12]
2001340c:	681b      	ldr	r3, [r3, #0]
2001340e:	681a      	ldr	r2, [r3, #0]
20013410:	68fb      	ldr	r3, [r7, #12]
20013412:	681b      	ldr	r3, [r3, #0]
20013414:	f042 0201 	orr.w	r2, r2, #1
20013418:	601a      	str	r2, [r3, #0]
2001341a:	e005      	b.n	20013428 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
2001341c:	68fb      	ldr	r3, [r7, #12]
2001341e:	2200      	movs	r2, #0
20013420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
20013424:	2302      	movs	r3, #2
20013426:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
20013428:	7dfb      	ldrb	r3, [r7, #23]
}
2001342a:	4618      	mov	r0, r3
2001342c:	3718      	adds	r7, #24
2001342e:	46bd      	mov	sp, r7
20013430:	bd80      	pop	{r7, pc}
20013432:	bf00      	nop
20013434:	40026058 	.word	0x40026058
20013438:	40026010 	.word	0x40026010
2001343c:	40026410 	.word	0x40026410
20013440:	40026070 	.word	0x40026070
20013444:	40026470 	.word	0x40026470
20013448:	40026028 	.word	0x40026028
2001344c:	40026428 	.word	0x40026428
20013450:	40026088 	.word	0x40026088
20013454:	40026488 	.word	0x40026488
20013458:	40026040 	.word	0x40026040
2001345c:	40026440 	.word	0x40026440
20013460:	400260a0 	.word	0x400260a0
20013464:	400264a0 	.word	0x400264a0
20013468:	40026000 	.word	0x40026000

2001346c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
2001346c:	b480      	push	{r7}
2001346e:	b085      	sub	sp, #20
20013470:	af00      	add	r7, sp, #0
20013472:	60f8      	str	r0, [r7, #12]
20013474:	60b9      	str	r1, [r7, #8]
20013476:	4613      	mov	r3, r2
20013478:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
2001347a:	79fb      	ldrb	r3, [r7, #7]
2001347c:	2b00      	cmp	r3, #0
2001347e:	d104      	bne.n	2001348a <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
20013480:	68fb      	ldr	r3, [r7, #12]
20013482:	681b      	ldr	r3, [r3, #0]
20013484:	68ba      	ldr	r2, [r7, #8]
20013486:	60da      	str	r2, [r3, #12]
20013488:	e003      	b.n	20013492 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
2001348a:	68fb      	ldr	r3, [r7, #12]
2001348c:	681b      	ldr	r3, [r3, #0]
2001348e:	68ba      	ldr	r2, [r7, #8]
20013490:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
20013492:	2300      	movs	r3, #0
}
20013494:	4618      	mov	r0, r3
20013496:	3714      	adds	r7, #20
20013498:	46bd      	mov	sp, r7
2001349a:	f85d 7b04 	ldr.w	r7, [sp], #4
2001349e:	4770      	bx	lr

200134a0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
200134a0:	b480      	push	{r7}
200134a2:	b085      	sub	sp, #20
200134a4:	af00      	add	r7, sp, #0
200134a6:	60f8      	str	r0, [r7, #12]
200134a8:	60b9      	str	r1, [r7, #8]
200134aa:	607a      	str	r2, [r7, #4]
200134ac:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
200134ae:	68fb      	ldr	r3, [r7, #12]
200134b0:	681b      	ldr	r3, [r3, #0]
200134b2:	683a      	ldr	r2, [r7, #0]
200134b4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
200134b6:	68fb      	ldr	r3, [r7, #12]
200134b8:	689b      	ldr	r3, [r3, #8]
200134ba:	2b40      	cmp	r3, #64	; 0x40
200134bc:	d108      	bne.n	200134d0 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
200134be:	68fb      	ldr	r3, [r7, #12]
200134c0:	681b      	ldr	r3, [r3, #0]
200134c2:	687a      	ldr	r2, [r7, #4]
200134c4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
200134c6:	68fb      	ldr	r3, [r7, #12]
200134c8:	681b      	ldr	r3, [r3, #0]
200134ca:	68ba      	ldr	r2, [r7, #8]
200134cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
200134ce:	e007      	b.n	200134e0 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
200134d0:	68fb      	ldr	r3, [r7, #12]
200134d2:	681b      	ldr	r3, [r3, #0]
200134d4:	68ba      	ldr	r2, [r7, #8]
200134d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
200134d8:	68fb      	ldr	r3, [r7, #12]
200134da:	681b      	ldr	r3, [r3, #0]
200134dc:	687a      	ldr	r2, [r7, #4]
200134de:	60da      	str	r2, [r3, #12]
}
200134e0:	bf00      	nop
200134e2:	3714      	adds	r7, #20
200134e4:	46bd      	mov	sp, r7
200134e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200134ea:	4770      	bx	lr

200134ec <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
200134ec:	b480      	push	{r7}
200134ee:	b087      	sub	sp, #28
200134f0:	af00      	add	r7, sp, #0
200134f2:	6078      	str	r0, [r7, #4]
200134f4:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
200134f6:	687b      	ldr	r3, [r7, #4]
200134f8:	2b00      	cmp	r3, #0
200134fa:	d002      	beq.n	20013502 <HAL_EXTI_SetConfigLine+0x16>
200134fc:	683b      	ldr	r3, [r7, #0]
200134fe:	2b00      	cmp	r3, #0
20013500:	d101      	bne.n	20013506 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
20013502:	2301      	movs	r3, #1
20013504:	e08f      	b.n	20013626 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
20013506:	683b      	ldr	r3, [r7, #0]
20013508:	681a      	ldr	r2, [r3, #0]
2001350a:	687b      	ldr	r3, [r7, #4]
2001350c:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
2001350e:	683b      	ldr	r3, [r7, #0]
20013510:	681b      	ldr	r3, [r3, #0]
20013512:	f003 031f 	and.w	r3, r3, #31
20013516:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20013518:	2201      	movs	r2, #1
2001351a:	697b      	ldr	r3, [r7, #20]
2001351c:	fa02 f303 	lsl.w	r3, r2, r3
20013520:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
20013522:	683b      	ldr	r3, [r7, #0]
20013524:	681b      	ldr	r3, [r3, #0]
20013526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2001352a:	2b00      	cmp	r3, #0
2001352c:	d052      	beq.n	200135d4 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
2001352e:	683b      	ldr	r3, [r7, #0]
20013530:	689b      	ldr	r3, [r3, #8]
20013532:	f003 0301 	and.w	r3, r3, #1
20013536:	2b00      	cmp	r3, #0
20013538:	d006      	beq.n	20013548 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
2001353a:	4b3e      	ldr	r3, [pc, #248]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
2001353c:	689a      	ldr	r2, [r3, #8]
2001353e:	493d      	ldr	r1, [pc, #244]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
20013540:	693b      	ldr	r3, [r7, #16]
20013542:	4313      	orrs	r3, r2
20013544:	608b      	str	r3, [r1, #8]
20013546:	e006      	b.n	20013556 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
20013548:	4b3a      	ldr	r3, [pc, #232]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
2001354a:	689a      	ldr	r2, [r3, #8]
2001354c:	693b      	ldr	r3, [r7, #16]
2001354e:	43db      	mvns	r3, r3
20013550:	4938      	ldr	r1, [pc, #224]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
20013552:	4013      	ands	r3, r2
20013554:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
20013556:	683b      	ldr	r3, [r7, #0]
20013558:	689b      	ldr	r3, [r3, #8]
2001355a:	f003 0302 	and.w	r3, r3, #2
2001355e:	2b00      	cmp	r3, #0
20013560:	d006      	beq.n	20013570 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
20013562:	4b34      	ldr	r3, [pc, #208]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
20013564:	68da      	ldr	r2, [r3, #12]
20013566:	4933      	ldr	r1, [pc, #204]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
20013568:	693b      	ldr	r3, [r7, #16]
2001356a:	4313      	orrs	r3, r2
2001356c:	60cb      	str	r3, [r1, #12]
2001356e:	e006      	b.n	2001357e <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
20013570:	4b30      	ldr	r3, [pc, #192]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
20013572:	68da      	ldr	r2, [r3, #12]
20013574:	693b      	ldr	r3, [r7, #16]
20013576:	43db      	mvns	r3, r3
20013578:	492e      	ldr	r1, [pc, #184]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
2001357a:	4013      	ands	r3, r2
2001357c:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
2001357e:	683b      	ldr	r3, [r7, #0]
20013580:	681b      	ldr	r3, [r3, #0]
20013582:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
20013586:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
2001358a:	d123      	bne.n	200135d4 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
2001358c:	4a2a      	ldr	r2, [pc, #168]	; (20013638 <HAL_EXTI_SetConfigLine+0x14c>)
2001358e:	697b      	ldr	r3, [r7, #20]
20013590:	089b      	lsrs	r3, r3, #2
20013592:	3302      	adds	r3, #2
20013594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20013598:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
2001359a:	697b      	ldr	r3, [r7, #20]
2001359c:	f003 0303 	and.w	r3, r3, #3
200135a0:	009b      	lsls	r3, r3, #2
200135a2:	220f      	movs	r2, #15
200135a4:	fa02 f303 	lsl.w	r3, r2, r3
200135a8:	43db      	mvns	r3, r3
200135aa:	68fa      	ldr	r2, [r7, #12]
200135ac:	4013      	ands	r3, r2
200135ae:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
200135b0:	683b      	ldr	r3, [r7, #0]
200135b2:	68da      	ldr	r2, [r3, #12]
200135b4:	697b      	ldr	r3, [r7, #20]
200135b6:	f003 0303 	and.w	r3, r3, #3
200135ba:	009b      	lsls	r3, r3, #2
200135bc:	fa02 f303 	lsl.w	r3, r2, r3
200135c0:	68fa      	ldr	r2, [r7, #12]
200135c2:	4313      	orrs	r3, r2
200135c4:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
200135c6:	491c      	ldr	r1, [pc, #112]	; (20013638 <HAL_EXTI_SetConfigLine+0x14c>)
200135c8:	697b      	ldr	r3, [r7, #20]
200135ca:	089b      	lsrs	r3, r3, #2
200135cc:	3302      	adds	r3, #2
200135ce:	68fa      	ldr	r2, [r7, #12]
200135d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
200135d4:	683b      	ldr	r3, [r7, #0]
200135d6:	685b      	ldr	r3, [r3, #4]
200135d8:	f003 0301 	and.w	r3, r3, #1
200135dc:	2b00      	cmp	r3, #0
200135de:	d006      	beq.n	200135ee <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
200135e0:	4b14      	ldr	r3, [pc, #80]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
200135e2:	681a      	ldr	r2, [r3, #0]
200135e4:	4913      	ldr	r1, [pc, #76]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
200135e6:	693b      	ldr	r3, [r7, #16]
200135e8:	4313      	orrs	r3, r2
200135ea:	600b      	str	r3, [r1, #0]
200135ec:	e006      	b.n	200135fc <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
200135ee:	4b11      	ldr	r3, [pc, #68]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
200135f0:	681a      	ldr	r2, [r3, #0]
200135f2:	693b      	ldr	r3, [r7, #16]
200135f4:	43db      	mvns	r3, r3
200135f6:	490f      	ldr	r1, [pc, #60]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
200135f8:	4013      	ands	r3, r2
200135fa:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
200135fc:	683b      	ldr	r3, [r7, #0]
200135fe:	685b      	ldr	r3, [r3, #4]
20013600:	f003 0302 	and.w	r3, r3, #2
20013604:	2b00      	cmp	r3, #0
20013606:	d006      	beq.n	20013616 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
20013608:	4b0a      	ldr	r3, [pc, #40]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
2001360a:	685a      	ldr	r2, [r3, #4]
2001360c:	4909      	ldr	r1, [pc, #36]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
2001360e:	693b      	ldr	r3, [r7, #16]
20013610:	4313      	orrs	r3, r2
20013612:	604b      	str	r3, [r1, #4]
20013614:	e006      	b.n	20013624 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
20013616:	4b07      	ldr	r3, [pc, #28]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
20013618:	685a      	ldr	r2, [r3, #4]
2001361a:	693b      	ldr	r3, [r7, #16]
2001361c:	43db      	mvns	r3, r3
2001361e:	4905      	ldr	r1, [pc, #20]	; (20013634 <HAL_EXTI_SetConfigLine+0x148>)
20013620:	4013      	ands	r3, r2
20013622:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
20013624:	2300      	movs	r3, #0
}
20013626:	4618      	mov	r0, r3
20013628:	371c      	adds	r7, #28
2001362a:	46bd      	mov	sp, r7
2001362c:	f85d 7b04 	ldr.w	r7, [sp], #4
20013630:	4770      	bx	lr
20013632:	bf00      	nop
20013634:	40013c00 	.word	0x40013c00
20013638:	40013800 	.word	0x40013800

2001363c <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
2001363c:	b480      	push	{r7}
2001363e:	b087      	sub	sp, #28
20013640:	af00      	add	r7, sp, #0
20013642:	6078      	str	r0, [r7, #4]
20013644:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
20013646:	687b      	ldr	r3, [r7, #4]
20013648:	2b00      	cmp	r3, #0
2001364a:	d002      	beq.n	20013652 <HAL_EXTI_GetConfigLine+0x16>
2001364c:	683b      	ldr	r3, [r7, #0]
2001364e:	2b00      	cmp	r3, #0
20013650:	d101      	bne.n	20013656 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
20013652:	2301      	movs	r3, #1
20013654:	e06a      	b.n	2001372c <HAL_EXTI_GetConfigLine+0xf0>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
20013656:	687b      	ldr	r3, [r7, #4]
20013658:	681a      	ldr	r2, [r3, #0]
2001365a:	683b      	ldr	r3, [r7, #0]
2001365c:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
2001365e:	683b      	ldr	r3, [r7, #0]
20013660:	681b      	ldr	r3, [r3, #0]
20013662:	f003 031f 	and.w	r3, r3, #31
20013666:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20013668:	2201      	movs	r2, #1
2001366a:	697b      	ldr	r3, [r7, #20]
2001366c:	fa02 f303 	lsl.w	r3, r2, r3
20013670:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
20013672:	4b31      	ldr	r3, [pc, #196]	; (20013738 <HAL_EXTI_GetConfigLine+0xfc>)
20013674:	681a      	ldr	r2, [r3, #0]
20013676:	693b      	ldr	r3, [r7, #16]
20013678:	4013      	ands	r3, r2
2001367a:	2b00      	cmp	r3, #0
2001367c:	d003      	beq.n	20013686 <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
2001367e:	683b      	ldr	r3, [r7, #0]
20013680:	2201      	movs	r2, #1
20013682:	605a      	str	r2, [r3, #4]
20013684:	e002      	b.n	2001368c <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
20013686:	683b      	ldr	r3, [r7, #0]
20013688:	2200      	movs	r2, #0
2001368a:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
2001368c:	4b2a      	ldr	r3, [pc, #168]	; (20013738 <HAL_EXTI_GetConfigLine+0xfc>)
2001368e:	685a      	ldr	r2, [r3, #4]
20013690:	693b      	ldr	r3, [r7, #16]
20013692:	4013      	ands	r3, r2
20013694:	2b00      	cmp	r3, #0
20013696:	d005      	beq.n	200136a4 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
20013698:	683b      	ldr	r3, [r7, #0]
2001369a:	685b      	ldr	r3, [r3, #4]
2001369c:	f043 0202 	orr.w	r2, r3, #2
200136a0:	683b      	ldr	r3, [r7, #0]
200136a2:	605a      	str	r2, [r3, #4]
  }

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
200136a4:	683b      	ldr	r3, [r7, #0]
200136a6:	681b      	ldr	r3, [r3, #0]
200136a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200136ac:	2b00      	cmp	r3, #0
200136ae:	d036      	beq.n	2001371e <HAL_EXTI_GetConfigLine+0xe2>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
200136b0:	4b21      	ldr	r3, [pc, #132]	; (20013738 <HAL_EXTI_GetConfigLine+0xfc>)
200136b2:	689a      	ldr	r2, [r3, #8]
200136b4:	693b      	ldr	r3, [r7, #16]
200136b6:	4013      	ands	r3, r2
200136b8:	2b00      	cmp	r3, #0
200136ba:	d003      	beq.n	200136c4 <HAL_EXTI_GetConfigLine+0x88>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
200136bc:	683b      	ldr	r3, [r7, #0]
200136be:	2201      	movs	r2, #1
200136c0:	609a      	str	r2, [r3, #8]
200136c2:	e002      	b.n	200136ca <HAL_EXTI_GetConfigLine+0x8e>
    }
    else
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
200136c4:	683b      	ldr	r3, [r7, #0]
200136c6:	2200      	movs	r2, #0
200136c8:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
200136ca:	4b1b      	ldr	r3, [pc, #108]	; (20013738 <HAL_EXTI_GetConfigLine+0xfc>)
200136cc:	68da      	ldr	r2, [r3, #12]
200136ce:	693b      	ldr	r3, [r7, #16]
200136d0:	4013      	ands	r3, r2
200136d2:	2b00      	cmp	r3, #0
200136d4:	d005      	beq.n	200136e2 <HAL_EXTI_GetConfigLine+0xa6>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
200136d6:	683b      	ldr	r3, [r7, #0]
200136d8:	689b      	ldr	r3, [r3, #8]
200136da:	f043 0202 	orr.w	r2, r3, #2
200136de:	683b      	ldr	r3, [r7, #0]
200136e0:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
200136e2:	683b      	ldr	r3, [r7, #0]
200136e4:	681b      	ldr	r3, [r3, #0]
200136e6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
200136ea:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
200136ee:	d112      	bne.n	20013716 <HAL_EXTI_GetConfigLine+0xda>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
200136f0:	4a12      	ldr	r2, [pc, #72]	; (2001373c <HAL_EXTI_GetConfigLine+0x100>)
200136f2:	697b      	ldr	r3, [r7, #20]
200136f4:	089b      	lsrs	r3, r3, #2
200136f6:	3302      	adds	r3, #2
200136f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200136fc:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
200136fe:	697b      	ldr	r3, [r7, #20]
20013700:	43db      	mvns	r3, r3
20013702:	f003 0303 	and.w	r3, r3, #3
20013706:	009b      	lsls	r3, r3, #2
20013708:	68fa      	ldr	r2, [r7, #12]
2001370a:	fa02 f303 	lsl.w	r3, r2, r3
2001370e:	0e1a      	lsrs	r2, r3, #24
20013710:	683b      	ldr	r3, [r7, #0]
20013712:	60da      	str	r2, [r3, #12]
20013714:	e009      	b.n	2001372a <HAL_EXTI_GetConfigLine+0xee>
    }
    else
    {
      pExtiConfig->GPIOSel = 0x00u;
20013716:	683b      	ldr	r3, [r7, #0]
20013718:	2200      	movs	r2, #0
2001371a:	60da      	str	r2, [r3, #12]
2001371c:	e005      	b.n	2001372a <HAL_EXTI_GetConfigLine+0xee>
    }
  }
  else
  {
    /* No Trigger selected */
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
2001371e:	683b      	ldr	r3, [r7, #0]
20013720:	2200      	movs	r2, #0
20013722:	609a      	str	r2, [r3, #8]
    pExtiConfig->GPIOSel = 0x00u;
20013724:	683b      	ldr	r3, [r7, #0]
20013726:	2200      	movs	r2, #0
20013728:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
2001372a:	2300      	movs	r3, #0
}
2001372c:	4618      	mov	r0, r3
2001372e:	371c      	adds	r7, #28
20013730:	46bd      	mov	sp, r7
20013732:	f85d 7b04 	ldr.w	r7, [sp], #4
20013736:	4770      	bx	lr
20013738:	40013c00 	.word	0x40013c00
2001373c:	40013800 	.word	0x40013800

20013740 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
20013740:	b480      	push	{r7}
20013742:	b087      	sub	sp, #28
20013744:	af00      	add	r7, sp, #0
20013746:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
20013748:	687b      	ldr	r3, [r7, #4]
2001374a:	2b00      	cmp	r3, #0
2001374c:	d101      	bne.n	20013752 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
2001374e:	2301      	movs	r3, #1
20013750:	e04c      	b.n	200137ec <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
20013752:	687b      	ldr	r3, [r7, #4]
20013754:	681b      	ldr	r3, [r3, #0]
20013756:	f003 031f 	and.w	r3, r3, #31
2001375a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
2001375c:	2201      	movs	r2, #1
2001375e:	697b      	ldr	r3, [r7, #20]
20013760:	fa02 f303 	lsl.w	r3, r2, r3
20013764:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
20013766:	4b24      	ldr	r3, [pc, #144]	; (200137f8 <HAL_EXTI_ClearConfigLine+0xb8>)
20013768:	681a      	ldr	r2, [r3, #0]
2001376a:	693b      	ldr	r3, [r7, #16]
2001376c:	43db      	mvns	r3, r3
2001376e:	4922      	ldr	r1, [pc, #136]	; (200137f8 <HAL_EXTI_ClearConfigLine+0xb8>)
20013770:	4013      	ands	r3, r2
20013772:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
20013774:	4b20      	ldr	r3, [pc, #128]	; (200137f8 <HAL_EXTI_ClearConfigLine+0xb8>)
20013776:	685a      	ldr	r2, [r3, #4]
20013778:	693b      	ldr	r3, [r7, #16]
2001377a:	43db      	mvns	r3, r3
2001377c:	491e      	ldr	r1, [pc, #120]	; (200137f8 <HAL_EXTI_ClearConfigLine+0xb8>)
2001377e:	4013      	ands	r3, r2
20013780:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
20013782:	687b      	ldr	r3, [r7, #4]
20013784:	681b      	ldr	r3, [r3, #0]
20013786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2001378a:	2b00      	cmp	r3, #0
2001378c:	d02d      	beq.n	200137ea <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
2001378e:	4b1a      	ldr	r3, [pc, #104]	; (200137f8 <HAL_EXTI_ClearConfigLine+0xb8>)
20013790:	689a      	ldr	r2, [r3, #8]
20013792:	693b      	ldr	r3, [r7, #16]
20013794:	43db      	mvns	r3, r3
20013796:	4918      	ldr	r1, [pc, #96]	; (200137f8 <HAL_EXTI_ClearConfigLine+0xb8>)
20013798:	4013      	ands	r3, r2
2001379a:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
2001379c:	4b16      	ldr	r3, [pc, #88]	; (200137f8 <HAL_EXTI_ClearConfigLine+0xb8>)
2001379e:	68da      	ldr	r2, [r3, #12]
200137a0:	693b      	ldr	r3, [r7, #16]
200137a2:	43db      	mvns	r3, r3
200137a4:	4914      	ldr	r1, [pc, #80]	; (200137f8 <HAL_EXTI_ClearConfigLine+0xb8>)
200137a6:	4013      	ands	r3, r2
200137a8:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
200137aa:	687b      	ldr	r3, [r7, #4]
200137ac:	681b      	ldr	r3, [r3, #0]
200137ae:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
200137b2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
200137b6:	d118      	bne.n	200137ea <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
200137b8:	4a10      	ldr	r2, [pc, #64]	; (200137fc <HAL_EXTI_ClearConfigLine+0xbc>)
200137ba:	697b      	ldr	r3, [r7, #20]
200137bc:	089b      	lsrs	r3, r3, #2
200137be:	3302      	adds	r3, #2
200137c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200137c4:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
200137c6:	697b      	ldr	r3, [r7, #20]
200137c8:	f003 0303 	and.w	r3, r3, #3
200137cc:	009b      	lsls	r3, r3, #2
200137ce:	220f      	movs	r2, #15
200137d0:	fa02 f303 	lsl.w	r3, r2, r3
200137d4:	43db      	mvns	r3, r3
200137d6:	68fa      	ldr	r2, [r7, #12]
200137d8:	4013      	ands	r3, r2
200137da:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
200137dc:	4907      	ldr	r1, [pc, #28]	; (200137fc <HAL_EXTI_ClearConfigLine+0xbc>)
200137de:	697b      	ldr	r3, [r7, #20]
200137e0:	089b      	lsrs	r3, r3, #2
200137e2:	3302      	adds	r3, #2
200137e4:	68fa      	ldr	r2, [r7, #12]
200137e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
200137ea:	2300      	movs	r3, #0
}
200137ec:	4618      	mov	r0, r3
200137ee:	371c      	adds	r7, #28
200137f0:	46bd      	mov	sp, r7
200137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
200137f6:	4770      	bx	lr
200137f8:	40013c00 	.word	0x40013c00
200137fc:	40013800 	.word	0x40013800

20013800 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
20013800:	b480      	push	{r7}
20013802:	b087      	sub	sp, #28
20013804:	af00      	add	r7, sp, #0
20013806:	60f8      	str	r0, [r7, #12]
20013808:	460b      	mov	r3, r1
2001380a:	607a      	str	r2, [r7, #4]
2001380c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
2001380e:	2300      	movs	r3, #0
20013810:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
20013812:	7afb      	ldrb	r3, [r7, #11]
20013814:	2b00      	cmp	r3, #0
20013816:	d103      	bne.n	20013820 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
20013818:	68fb      	ldr	r3, [r7, #12]
2001381a:	687a      	ldr	r2, [r7, #4]
2001381c:	605a      	str	r2, [r3, #4]
      break;
2001381e:	e002      	b.n	20013826 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
20013820:	2301      	movs	r3, #1
20013822:	75fb      	strb	r3, [r7, #23]
      break;
20013824:	bf00      	nop
  }

  return status;
20013826:	7dfb      	ldrb	r3, [r7, #23]
}
20013828:	4618      	mov	r0, r3
2001382a:	371c      	adds	r7, #28
2001382c:	46bd      	mov	sp, r7
2001382e:	f85d 7b04 	ldr.w	r7, [sp], #4
20013832:	4770      	bx	lr

20013834 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
20013834:	b480      	push	{r7}
20013836:	b083      	sub	sp, #12
20013838:	af00      	add	r7, sp, #0
2001383a:	6078      	str	r0, [r7, #4]
2001383c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
2001383e:	687b      	ldr	r3, [r7, #4]
20013840:	2b00      	cmp	r3, #0
20013842:	d101      	bne.n	20013848 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
20013844:	2301      	movs	r3, #1
20013846:	e003      	b.n	20013850 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
20013848:	687b      	ldr	r3, [r7, #4]
2001384a:	683a      	ldr	r2, [r7, #0]
2001384c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
2001384e:	2300      	movs	r3, #0
  }
}
20013850:	4618      	mov	r0, r3
20013852:	370c      	adds	r7, #12
20013854:	46bd      	mov	sp, r7
20013856:	f85d 7b04 	ldr.w	r7, [sp], #4
2001385a:	4770      	bx	lr

2001385c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
2001385c:	b580      	push	{r7, lr}
2001385e:	b084      	sub	sp, #16
20013860:	af00      	add	r7, sp, #0
20013862:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20013864:	687b      	ldr	r3, [r7, #4]
20013866:	681b      	ldr	r3, [r3, #0]
20013868:	f003 031f 	and.w	r3, r3, #31
2001386c:	2201      	movs	r2, #1
2001386e:	fa02 f303 	lsl.w	r3, r2, r3
20013872:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
20013874:	4b0a      	ldr	r3, [pc, #40]	; (200138a0 <HAL_EXTI_IRQHandler+0x44>)
20013876:	695b      	ldr	r3, [r3, #20]
20013878:	68fa      	ldr	r2, [r7, #12]
2001387a:	4013      	ands	r3, r2
2001387c:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
2001387e:	68bb      	ldr	r3, [r7, #8]
20013880:	2b00      	cmp	r3, #0
20013882:	d009      	beq.n	20013898 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
20013884:	4a06      	ldr	r2, [pc, #24]	; (200138a0 <HAL_EXTI_IRQHandler+0x44>)
20013886:	68fb      	ldr	r3, [r7, #12]
20013888:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
2001388a:	687b      	ldr	r3, [r7, #4]
2001388c:	685b      	ldr	r3, [r3, #4]
2001388e:	2b00      	cmp	r3, #0
20013890:	d002      	beq.n	20013898 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
20013892:	687b      	ldr	r3, [r7, #4]
20013894:	685b      	ldr	r3, [r3, #4]
20013896:	4798      	blx	r3
    }
  }
}
20013898:	bf00      	nop
2001389a:	3710      	adds	r7, #16
2001389c:	46bd      	mov	sp, r7
2001389e:	bd80      	pop	{r7, pc}
200138a0:	40013c00 	.word	0x40013c00

200138a4 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
200138a4:	b480      	push	{r7}
200138a6:	b087      	sub	sp, #28
200138a8:	af00      	add	r7, sp, #0
200138aa:	6078      	str	r0, [r7, #4]
200138ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
200138ae:	687b      	ldr	r3, [r7, #4]
200138b0:	681b      	ldr	r3, [r3, #0]
200138b2:	f003 031f 	and.w	r3, r3, #31
200138b6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
200138b8:	2201      	movs	r2, #1
200138ba:	697b      	ldr	r3, [r7, #20]
200138bc:	fa02 f303 	lsl.w	r3, r2, r3
200138c0:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
200138c2:	4b07      	ldr	r3, [pc, #28]	; (200138e0 <HAL_EXTI_GetPending+0x3c>)
200138c4:	695a      	ldr	r2, [r3, #20]
200138c6:	693b      	ldr	r3, [r7, #16]
200138c8:	401a      	ands	r2, r3
200138ca:	697b      	ldr	r3, [r7, #20]
200138cc:	fa22 f303 	lsr.w	r3, r2, r3
200138d0:	60fb      	str	r3, [r7, #12]
  return regval;
200138d2:	68fb      	ldr	r3, [r7, #12]
}
200138d4:	4618      	mov	r0, r3
200138d6:	371c      	adds	r7, #28
200138d8:	46bd      	mov	sp, r7
200138da:	f85d 7b04 	ldr.w	r7, [sp], #4
200138de:	4770      	bx	lr
200138e0:	40013c00 	.word	0x40013c00

200138e4 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
200138e4:	b480      	push	{r7}
200138e6:	b085      	sub	sp, #20
200138e8:	af00      	add	r7, sp, #0
200138ea:	6078      	str	r0, [r7, #4]
200138ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
200138ee:	687b      	ldr	r3, [r7, #4]
200138f0:	681b      	ldr	r3, [r3, #0]
200138f2:	f003 031f 	and.w	r3, r3, #31
200138f6:	2201      	movs	r2, #1
200138f8:	fa02 f303 	lsl.w	r3, r2, r3
200138fc:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
200138fe:	4a04      	ldr	r2, [pc, #16]	; (20013910 <HAL_EXTI_ClearPending+0x2c>)
20013900:	68fb      	ldr	r3, [r7, #12]
20013902:	6153      	str	r3, [r2, #20]
}
20013904:	bf00      	nop
20013906:	3714      	adds	r7, #20
20013908:	46bd      	mov	sp, r7
2001390a:	f85d 7b04 	ldr.w	r7, [sp], #4
2001390e:	4770      	bx	lr
20013910:	40013c00 	.word	0x40013c00

20013914 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
20013914:	b480      	push	{r7}
20013916:	b085      	sub	sp, #20
20013918:	af00      	add	r7, sp, #0
2001391a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
2001391c:	687b      	ldr	r3, [r7, #4]
2001391e:	681b      	ldr	r3, [r3, #0]
20013920:	f003 031f 	and.w	r3, r3, #31
20013924:	2201      	movs	r2, #1
20013926:	fa02 f303 	lsl.w	r3, r2, r3
2001392a:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
2001392c:	4a04      	ldr	r2, [pc, #16]	; (20013940 <HAL_EXTI_GenerateSWI+0x2c>)
2001392e:	68fb      	ldr	r3, [r7, #12]
20013930:	6113      	str	r3, [r2, #16]
}
20013932:	bf00      	nop
20013934:	3714      	adds	r7, #20
20013936:	46bd      	mov	sp, r7
20013938:	f85d 7b04 	ldr.w	r7, [sp], #4
2001393c:	4770      	bx	lr
2001393e:	bf00      	nop
20013940:	40013c00 	.word	0x40013c00

20013944 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20013944:	b580      	push	{r7, lr}
20013946:	b086      	sub	sp, #24
20013948:	af00      	add	r7, sp, #0
2001394a:	60f8      	str	r0, [r7, #12]
2001394c:	60b9      	str	r1, [r7, #8]
2001394e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
20013952:	2301      	movs	r3, #1
20013954:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20013956:	4b23      	ldr	r3, [pc, #140]	; (200139e4 <HAL_FLASH_Program+0xa0>)
20013958:	7e1b      	ldrb	r3, [r3, #24]
2001395a:	2b01      	cmp	r3, #1
2001395c:	d101      	bne.n	20013962 <HAL_FLASH_Program+0x1e>
2001395e:	2302      	movs	r3, #2
20013960:	e03b      	b.n	200139da <HAL_FLASH_Program+0x96>
20013962:	4b20      	ldr	r3, [pc, #128]	; (200139e4 <HAL_FLASH_Program+0xa0>)
20013964:	2201      	movs	r2, #1
20013966:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20013968:	f24c 3050 	movw	r0, #50000	; 0xc350
2001396c:	f000 f9be 	bl	20013cec <FLASH_WaitForLastOperation>
20013970:	4603      	mov	r3, r0
20013972:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
20013974:	7dfb      	ldrb	r3, [r7, #23]
20013976:	2b00      	cmp	r3, #0
20013978:	d12b      	bne.n	200139d2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
2001397a:	68fb      	ldr	r3, [r7, #12]
2001397c:	2b00      	cmp	r3, #0
2001397e:	d105      	bne.n	2001398c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
20013980:	783b      	ldrb	r3, [r7, #0]
20013982:	4619      	mov	r1, r3
20013984:	68b8      	ldr	r0, [r7, #8]
20013986:	f000 fa67 	bl	20013e58 <FLASH_Program_Byte>
2001398a:	e016      	b.n	200139ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
2001398c:	68fb      	ldr	r3, [r7, #12]
2001398e:	2b01      	cmp	r3, #1
20013990:	d105      	bne.n	2001399e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
20013992:	883b      	ldrh	r3, [r7, #0]
20013994:	4619      	mov	r1, r3
20013996:	68b8      	ldr	r0, [r7, #8]
20013998:	f000 fa3a 	bl	20013e10 <FLASH_Program_HalfWord>
2001399c:	e00d      	b.n	200139ba <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
2001399e:	68fb      	ldr	r3, [r7, #12]
200139a0:	2b02      	cmp	r3, #2
200139a2:	d105      	bne.n	200139b0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
200139a4:	683b      	ldr	r3, [r7, #0]
200139a6:	4619      	mov	r1, r3
200139a8:	68b8      	ldr	r0, [r7, #8]
200139aa:	f000 fa0f 	bl	20013dcc <FLASH_Program_Word>
200139ae:	e004      	b.n	200139ba <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
200139b0:	e9d7 2300 	ldrd	r2, r3, [r7]
200139b4:	68b8      	ldr	r0, [r7, #8]
200139b6:	f000 f9d9 	bl	20013d6c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200139ba:	f24c 3050 	movw	r0, #50000	; 0xc350
200139be:	f000 f995 	bl	20013cec <FLASH_WaitForLastOperation>
200139c2:	4603      	mov	r3, r0
200139c4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
200139c6:	4b08      	ldr	r3, [pc, #32]	; (200139e8 <HAL_FLASH_Program+0xa4>)
200139c8:	691b      	ldr	r3, [r3, #16]
200139ca:	4a07      	ldr	r2, [pc, #28]	; (200139e8 <HAL_FLASH_Program+0xa4>)
200139cc:	f023 0301 	bic.w	r3, r3, #1
200139d0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
200139d2:	4b04      	ldr	r3, [pc, #16]	; (200139e4 <HAL_FLASH_Program+0xa0>)
200139d4:	2200      	movs	r2, #0
200139d6:	761a      	strb	r2, [r3, #24]
  
  return status;
200139d8:	7dfb      	ldrb	r3, [r7, #23]
}
200139da:	4618      	mov	r0, r3
200139dc:	3718      	adds	r7, #24
200139de:	46bd      	mov	sp, r7
200139e0:	bd80      	pop	{r7, pc}
200139e2:	bf00      	nop
200139e4:	2000f5d0 	.word	0x2000f5d0
200139e8:	40023c00 	.word	0x40023c00

200139ec <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
200139ec:	b580      	push	{r7, lr}
200139ee:	b086      	sub	sp, #24
200139f0:	af00      	add	r7, sp, #0
200139f2:	60f8      	str	r0, [r7, #12]
200139f4:	60b9      	str	r1, [r7, #8]
200139f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
200139fa:	2300      	movs	r3, #0
200139fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
200139fe:	4b20      	ldr	r3, [pc, #128]	; (20013a80 <HAL_FLASH_Program_IT+0x94>)
20013a00:	7e1b      	ldrb	r3, [r3, #24]
20013a02:	2b01      	cmp	r3, #1
20013a04:	d101      	bne.n	20013a0a <HAL_FLASH_Program_IT+0x1e>
20013a06:	2302      	movs	r3, #2
20013a08:	e035      	b.n	20013a76 <HAL_FLASH_Program_IT+0x8a>
20013a0a:	4b1d      	ldr	r3, [pc, #116]	; (20013a80 <HAL_FLASH_Program_IT+0x94>)
20013a0c:	2201      	movs	r2, #1
20013a0e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
20013a10:	4b1c      	ldr	r3, [pc, #112]	; (20013a84 <HAL_FLASH_Program_IT+0x98>)
20013a12:	691b      	ldr	r3, [r3, #16]
20013a14:	4a1b      	ldr	r2, [pc, #108]	; (20013a84 <HAL_FLASH_Program_IT+0x98>)
20013a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20013a1a:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
20013a1c:	4b19      	ldr	r3, [pc, #100]	; (20013a84 <HAL_FLASH_Program_IT+0x98>)
20013a1e:	691b      	ldr	r3, [r3, #16]
20013a20:	4a18      	ldr	r2, [pc, #96]	; (20013a84 <HAL_FLASH_Program_IT+0x98>)
20013a22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
20013a26:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
20013a28:	4b15      	ldr	r3, [pc, #84]	; (20013a80 <HAL_FLASH_Program_IT+0x94>)
20013a2a:	2203      	movs	r2, #3
20013a2c:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
20013a2e:	4a14      	ldr	r2, [pc, #80]	; (20013a80 <HAL_FLASH_Program_IT+0x94>)
20013a30:	68bb      	ldr	r3, [r7, #8]
20013a32:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
20013a34:	68fb      	ldr	r3, [r7, #12]
20013a36:	2b00      	cmp	r3, #0
20013a38:	d105      	bne.n	20013a46 <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
20013a3a:	783b      	ldrb	r3, [r7, #0]
20013a3c:	4619      	mov	r1, r3
20013a3e:	68b8      	ldr	r0, [r7, #8]
20013a40:	f000 fa0a 	bl	20013e58 <FLASH_Program_Byte>
20013a44:	e016      	b.n	20013a74 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20013a46:	68fb      	ldr	r3, [r7, #12]
20013a48:	2b01      	cmp	r3, #1
20013a4a:	d105      	bne.n	20013a58 <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
20013a4c:	883b      	ldrh	r3, [r7, #0]
20013a4e:	4619      	mov	r1, r3
20013a50:	68b8      	ldr	r0, [r7, #8]
20013a52:	f000 f9dd 	bl	20013e10 <FLASH_Program_HalfWord>
20013a56:	e00d      	b.n	20013a74 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
20013a58:	68fb      	ldr	r3, [r7, #12]
20013a5a:	2b02      	cmp	r3, #2
20013a5c:	d105      	bne.n	20013a6a <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
20013a5e:	683b      	ldr	r3, [r7, #0]
20013a60:	4619      	mov	r1, r3
20013a62:	68b8      	ldr	r0, [r7, #8]
20013a64:	f000 f9b2 	bl	20013dcc <FLASH_Program_Word>
20013a68:	e004      	b.n	20013a74 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
20013a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
20013a6e:	68b8      	ldr	r0, [r7, #8]
20013a70:	f000 f97c 	bl	20013d6c <FLASH_Program_DoubleWord>
  }

  return status;
20013a74:	7dfb      	ldrb	r3, [r7, #23]
}
20013a76:	4618      	mov	r0, r3
20013a78:	3718      	adds	r7, #24
20013a7a:	46bd      	mov	sp, r7
20013a7c:	bd80      	pop	{r7, pc}
20013a7e:	bf00      	nop
20013a80:	2000f5d0 	.word	0x2000f5d0
20013a84:	40023c00 	.word	0x40023c00

20013a88 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
20013a88:	b580      	push	{r7, lr}
20013a8a:	b082      	sub	sp, #8
20013a8c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
20013a8e:	2300      	movs	r3, #0
20013a90:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20013a92:	4b4b      	ldr	r3, [pc, #300]	; (20013bc0 <HAL_FLASH_IRQHandler+0x138>)
20013a94:	68db      	ldr	r3, [r3, #12]
20013a96:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
20013a9a:	2b00      	cmp	r3, #0
20013a9c:	d020      	beq.n	20013ae0 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
20013a9e:	4b49      	ldr	r3, [pc, #292]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013aa0:	781b      	ldrb	r3, [r3, #0]
20013aa2:	b2db      	uxtb	r3, r3
20013aa4:	2b01      	cmp	r3, #1
20013aa6:	d107      	bne.n	20013ab8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
20013aa8:	4b46      	ldr	r3, [pc, #280]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013aaa:	68db      	ldr	r3, [r3, #12]
20013aac:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
20013aae:	4b45      	ldr	r3, [pc, #276]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20013ab4:	60da      	str	r2, [r3, #12]
20013ab6:	e00b      	b.n	20013ad0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
20013ab8:	4b42      	ldr	r3, [pc, #264]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013aba:	781b      	ldrb	r3, [r3, #0]
20013abc:	b2db      	uxtb	r3, r3
20013abe:	2b02      	cmp	r3, #2
20013ac0:	d103      	bne.n	20013aca <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
20013ac2:	4b40      	ldr	r3, [pc, #256]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013ac4:	691b      	ldr	r3, [r3, #16]
20013ac6:	607b      	str	r3, [r7, #4]
20013ac8:	e002      	b.n	20013ad0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
20013aca:	4b3e      	ldr	r3, [pc, #248]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013acc:	695b      	ldr	r3, [r3, #20]
20013ace:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
20013ad0:	f000 f9e4 	bl	20013e9c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
20013ad4:	6878      	ldr	r0, [r7, #4]
20013ad6:	f000 f881 	bl	20013bdc <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20013ada:	4b3a      	ldr	r3, [pc, #232]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013adc:	2200      	movs	r2, #0
20013ade:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20013ae0:	4b37      	ldr	r3, [pc, #220]	; (20013bc0 <HAL_FLASH_IRQHandler+0x138>)
20013ae2:	68db      	ldr	r3, [r3, #12]
20013ae4:	f003 0301 	and.w	r3, r3, #1
20013ae8:	2b00      	cmp	r3, #0
20013aea:	d04a      	beq.n	20013b82 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20013aec:	4b34      	ldr	r3, [pc, #208]	; (20013bc0 <HAL_FLASH_IRQHandler+0x138>)
20013aee:	2201      	movs	r2, #1
20013af0:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
20013af2:	4b34      	ldr	r3, [pc, #208]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013af4:	781b      	ldrb	r3, [r3, #0]
20013af6:	b2db      	uxtb	r3, r3
20013af8:	2b01      	cmp	r3, #1
20013afa:	d12d      	bne.n	20013b58 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
20013afc:	4b31      	ldr	r3, [pc, #196]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013afe:	685b      	ldr	r3, [r3, #4]
20013b00:	3b01      	subs	r3, #1
20013b02:	4a30      	ldr	r2, [pc, #192]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b04:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
20013b06:	4b2f      	ldr	r3, [pc, #188]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b08:	685b      	ldr	r3, [r3, #4]
20013b0a:	2b00      	cmp	r3, #0
20013b0c:	d015      	beq.n	20013b3a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
20013b0e:	4b2d      	ldr	r3, [pc, #180]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b10:	68db      	ldr	r3, [r3, #12]
20013b12:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
20013b14:	6878      	ldr	r0, [r7, #4]
20013b16:	f000 f857 	bl	20013bc8 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
20013b1a:	4b2a      	ldr	r3, [pc, #168]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b1c:	68db      	ldr	r3, [r3, #12]
20013b1e:	3301      	adds	r3, #1
20013b20:	4a28      	ldr	r2, [pc, #160]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b22:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
20013b24:	4b27      	ldr	r3, [pc, #156]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b26:	68db      	ldr	r3, [r3, #12]
20013b28:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
20013b2a:	4b26      	ldr	r3, [pc, #152]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b2c:	7a1b      	ldrb	r3, [r3, #8]
20013b2e:	b2db      	uxtb	r3, r3
20013b30:	4619      	mov	r1, r3
20013b32:	6878      	ldr	r0, [r7, #4]
20013b34:	f000 fbfc 	bl	20014330 <FLASH_Erase_Sector>
20013b38:	e023      	b.n	20013b82 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
20013b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20013b3e:	607b      	str	r3, [r7, #4]
20013b40:	4a20      	ldr	r2, [pc, #128]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b42:	687b      	ldr	r3, [r7, #4]
20013b44:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20013b46:	4b1f      	ldr	r3, [pc, #124]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b48:	2200      	movs	r2, #0
20013b4a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
20013b4c:	f000 fd70 	bl	20014630 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
20013b50:	6878      	ldr	r0, [r7, #4]
20013b52:	f000 f839 	bl	20013bc8 <HAL_FLASH_EndOfOperationCallback>
20013b56:	e014      	b.n	20013b82 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
20013b58:	4b1a      	ldr	r3, [pc, #104]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b5a:	781b      	ldrb	r3, [r3, #0]
20013b5c:	b2db      	uxtb	r3, r3
20013b5e:	2b02      	cmp	r3, #2
20013b60:	d107      	bne.n	20013b72 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
20013b62:	f000 fd65 	bl	20014630 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
20013b66:	4b17      	ldr	r3, [pc, #92]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b68:	691b      	ldr	r3, [r3, #16]
20013b6a:	4618      	mov	r0, r3
20013b6c:	f000 f82c 	bl	20013bc8 <HAL_FLASH_EndOfOperationCallback>
20013b70:	e004      	b.n	20013b7c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
20013b72:	4b14      	ldr	r3, [pc, #80]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b74:	695b      	ldr	r3, [r3, #20]
20013b76:	4618      	mov	r0, r3
20013b78:	f000 f826 	bl	20013bc8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20013b7c:	4b11      	ldr	r3, [pc, #68]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b7e:	2200      	movs	r2, #0
20013b80:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
20013b82:	4b10      	ldr	r3, [pc, #64]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013b84:	781b      	ldrb	r3, [r3, #0]
20013b86:	b2db      	uxtb	r3, r3
20013b88:	2b00      	cmp	r3, #0
20013b8a:	d114      	bne.n	20013bb6 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
20013b8c:	4b0c      	ldr	r3, [pc, #48]	; (20013bc0 <HAL_FLASH_IRQHandler+0x138>)
20013b8e:	691b      	ldr	r3, [r3, #16]
20013b90:	4a0b      	ldr	r2, [pc, #44]	; (20013bc0 <HAL_FLASH_IRQHandler+0x138>)
20013b92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
20013b96:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
20013b98:	4b09      	ldr	r3, [pc, #36]	; (20013bc0 <HAL_FLASH_IRQHandler+0x138>)
20013b9a:	691b      	ldr	r3, [r3, #16]
20013b9c:	4a08      	ldr	r2, [pc, #32]	; (20013bc0 <HAL_FLASH_IRQHandler+0x138>)
20013b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
20013ba2:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
20013ba4:	4b06      	ldr	r3, [pc, #24]	; (20013bc0 <HAL_FLASH_IRQHandler+0x138>)
20013ba6:	691b      	ldr	r3, [r3, #16]
20013ba8:	4a05      	ldr	r2, [pc, #20]	; (20013bc0 <HAL_FLASH_IRQHandler+0x138>)
20013baa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
20013bae:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
20013bb0:	4b04      	ldr	r3, [pc, #16]	; (20013bc4 <HAL_FLASH_IRQHandler+0x13c>)
20013bb2:	2200      	movs	r2, #0
20013bb4:	761a      	strb	r2, [r3, #24]
  }
}
20013bb6:	bf00      	nop
20013bb8:	3708      	adds	r7, #8
20013bba:	46bd      	mov	sp, r7
20013bbc:	bd80      	pop	{r7, pc}
20013bbe:	bf00      	nop
20013bc0:	40023c00 	.word	0x40023c00
20013bc4:	2000f5d0 	.word	0x2000f5d0

20013bc8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
20013bc8:	b480      	push	{r7}
20013bca:	b083      	sub	sp, #12
20013bcc:	af00      	add	r7, sp, #0
20013bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
20013bd0:	bf00      	nop
20013bd2:	370c      	adds	r7, #12
20013bd4:	46bd      	mov	sp, r7
20013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
20013bda:	4770      	bx	lr

20013bdc <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
20013bdc:	b480      	push	{r7}
20013bde:	b083      	sub	sp, #12
20013be0:	af00      	add	r7, sp, #0
20013be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
20013be4:	bf00      	nop
20013be6:	370c      	adds	r7, #12
20013be8:	46bd      	mov	sp, r7
20013bea:	f85d 7b04 	ldr.w	r7, [sp], #4
20013bee:	4770      	bx	lr

20013bf0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
20013bf0:	b480      	push	{r7}
20013bf2:	b083      	sub	sp, #12
20013bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
20013bf6:	2300      	movs	r3, #0
20013bf8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20013bfa:	4b0b      	ldr	r3, [pc, #44]	; (20013c28 <HAL_FLASH_Unlock+0x38>)
20013bfc:	691b      	ldr	r3, [r3, #16]
20013bfe:	2b00      	cmp	r3, #0
20013c00:	da0b      	bge.n	20013c1a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
20013c02:	4b09      	ldr	r3, [pc, #36]	; (20013c28 <HAL_FLASH_Unlock+0x38>)
20013c04:	4a09      	ldr	r2, [pc, #36]	; (20013c2c <HAL_FLASH_Unlock+0x3c>)
20013c06:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20013c08:	4b07      	ldr	r3, [pc, #28]	; (20013c28 <HAL_FLASH_Unlock+0x38>)
20013c0a:	4a09      	ldr	r2, [pc, #36]	; (20013c30 <HAL_FLASH_Unlock+0x40>)
20013c0c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20013c0e:	4b06      	ldr	r3, [pc, #24]	; (20013c28 <HAL_FLASH_Unlock+0x38>)
20013c10:	691b      	ldr	r3, [r3, #16]
20013c12:	2b00      	cmp	r3, #0
20013c14:	da01      	bge.n	20013c1a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
20013c16:	2301      	movs	r3, #1
20013c18:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
20013c1a:	79fb      	ldrb	r3, [r7, #7]
}
20013c1c:	4618      	mov	r0, r3
20013c1e:	370c      	adds	r7, #12
20013c20:	46bd      	mov	sp, r7
20013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
20013c26:	4770      	bx	lr
20013c28:	40023c00 	.word	0x40023c00
20013c2c:	45670123 	.word	0x45670123
20013c30:	cdef89ab 	.word	0xcdef89ab

20013c34 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
20013c34:	b480      	push	{r7}
20013c36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
20013c38:	4b05      	ldr	r3, [pc, #20]	; (20013c50 <HAL_FLASH_Lock+0x1c>)
20013c3a:	691b      	ldr	r3, [r3, #16]
20013c3c:	4a04      	ldr	r2, [pc, #16]	; (20013c50 <HAL_FLASH_Lock+0x1c>)
20013c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20013c42:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
20013c44:	2300      	movs	r3, #0
}
20013c46:	4618      	mov	r0, r3
20013c48:	46bd      	mov	sp, r7
20013c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
20013c4e:	4770      	bx	lr
20013c50:	40023c00 	.word	0x40023c00

20013c54 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
20013c54:	b480      	push	{r7}
20013c56:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
20013c58:	4b09      	ldr	r3, [pc, #36]	; (20013c80 <HAL_FLASH_OB_Unlock+0x2c>)
20013c5a:	695b      	ldr	r3, [r3, #20]
20013c5c:	f003 0301 	and.w	r3, r3, #1
20013c60:	2b00      	cmp	r3, #0
20013c62:	d007      	beq.n	20013c74 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
20013c64:	4b06      	ldr	r3, [pc, #24]	; (20013c80 <HAL_FLASH_OB_Unlock+0x2c>)
20013c66:	4a07      	ldr	r2, [pc, #28]	; (20013c84 <HAL_FLASH_OB_Unlock+0x30>)
20013c68:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
20013c6a:	4b05      	ldr	r3, [pc, #20]	; (20013c80 <HAL_FLASH_OB_Unlock+0x2c>)
20013c6c:	4a06      	ldr	r2, [pc, #24]	; (20013c88 <HAL_FLASH_OB_Unlock+0x34>)
20013c6e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
20013c70:	2300      	movs	r3, #0
20013c72:	e000      	b.n	20013c76 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
20013c74:	2301      	movs	r3, #1
}
20013c76:	4618      	mov	r0, r3
20013c78:	46bd      	mov	sp, r7
20013c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
20013c7e:	4770      	bx	lr
20013c80:	40023c00 	.word	0x40023c00
20013c84:	08192a3b 	.word	0x08192a3b
20013c88:	4c5d6e7f 	.word	0x4c5d6e7f

20013c8c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
20013c8c:	b480      	push	{r7}
20013c8e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
20013c90:	4b05      	ldr	r3, [pc, #20]	; (20013ca8 <HAL_FLASH_OB_Lock+0x1c>)
20013c92:	695b      	ldr	r3, [r3, #20]
20013c94:	4a04      	ldr	r2, [pc, #16]	; (20013ca8 <HAL_FLASH_OB_Lock+0x1c>)
20013c96:	f043 0301 	orr.w	r3, r3, #1
20013c9a:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
20013c9c:	2300      	movs	r3, #0
}
20013c9e:	4618      	mov	r0, r3
20013ca0:	46bd      	mov	sp, r7
20013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
20013ca6:	4770      	bx	lr
20013ca8:	40023c00 	.word	0x40023c00

20013cac <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
20013cac:	b580      	push	{r7, lr}
20013cae:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
20013cb0:	4b07      	ldr	r3, [pc, #28]	; (20013cd0 <HAL_FLASH_OB_Launch+0x24>)
20013cb2:	781b      	ldrb	r3, [r3, #0]
20013cb4:	b2db      	uxtb	r3, r3
20013cb6:	4a06      	ldr	r2, [pc, #24]	; (20013cd0 <HAL_FLASH_OB_Launch+0x24>)
20013cb8:	f043 0302 	orr.w	r3, r3, #2
20013cbc:	b2db      	uxtb	r3, r3
20013cbe:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
20013cc0:	f24c 3050 	movw	r0, #50000	; 0xc350
20013cc4:	f000 f812 	bl	20013cec <FLASH_WaitForLastOperation>
20013cc8:	4603      	mov	r3, r0
}
20013cca:	4618      	mov	r0, r3
20013ccc:	bd80      	pop	{r7, pc}
20013cce:	bf00      	nop
20013cd0:	40023c14 	.word	0x40023c14

20013cd4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
20013cd4:	b480      	push	{r7}
20013cd6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
20013cd8:	4b03      	ldr	r3, [pc, #12]	; (20013ce8 <HAL_FLASH_GetError+0x14>)
20013cda:	69db      	ldr	r3, [r3, #28]
}  
20013cdc:	4618      	mov	r0, r3
20013cde:	46bd      	mov	sp, r7
20013ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
20013ce4:	4770      	bx	lr
20013ce6:	bf00      	nop
20013ce8:	2000f5d0 	.word	0x2000f5d0

20013cec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
20013cec:	b580      	push	{r7, lr}
20013cee:	b084      	sub	sp, #16
20013cf0:	af00      	add	r7, sp, #0
20013cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20013cf4:	2300      	movs	r3, #0
20013cf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20013cf8:	4b1a      	ldr	r3, [pc, #104]	; (20013d64 <FLASH_WaitForLastOperation+0x78>)
20013cfa:	2200      	movs	r2, #0
20013cfc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
20013cfe:	f7fc ff51 	bl	20010ba4 <HAL_GetTick>
20013d02:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20013d04:	e010      	b.n	20013d28 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
20013d06:	687b      	ldr	r3, [r7, #4]
20013d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20013d0c:	d00c      	beq.n	20013d28 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20013d0e:	687b      	ldr	r3, [r7, #4]
20013d10:	2b00      	cmp	r3, #0
20013d12:	d007      	beq.n	20013d24 <FLASH_WaitForLastOperation+0x38>
20013d14:	f7fc ff46 	bl	20010ba4 <HAL_GetTick>
20013d18:	4602      	mov	r2, r0
20013d1a:	68fb      	ldr	r3, [r7, #12]
20013d1c:	1ad3      	subs	r3, r2, r3
20013d1e:	687a      	ldr	r2, [r7, #4]
20013d20:	429a      	cmp	r2, r3
20013d22:	d201      	bcs.n	20013d28 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
20013d24:	2303      	movs	r3, #3
20013d26:	e019      	b.n	20013d5c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20013d28:	4b0f      	ldr	r3, [pc, #60]	; (20013d68 <FLASH_WaitForLastOperation+0x7c>)
20013d2a:	68db      	ldr	r3, [r3, #12]
20013d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20013d30:	2b00      	cmp	r3, #0
20013d32:	d1e8      	bne.n	20013d06 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20013d34:	4b0c      	ldr	r3, [pc, #48]	; (20013d68 <FLASH_WaitForLastOperation+0x7c>)
20013d36:	68db      	ldr	r3, [r3, #12]
20013d38:	f003 0301 	and.w	r3, r3, #1
20013d3c:	2b00      	cmp	r3, #0
20013d3e:	d002      	beq.n	20013d46 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20013d40:	4b09      	ldr	r3, [pc, #36]	; (20013d68 <FLASH_WaitForLastOperation+0x7c>)
20013d42:	2201      	movs	r2, #1
20013d44:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20013d46:	4b08      	ldr	r3, [pc, #32]	; (20013d68 <FLASH_WaitForLastOperation+0x7c>)
20013d48:	68db      	ldr	r3, [r3, #12]
20013d4a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
20013d4e:	2b00      	cmp	r3, #0
20013d50:	d003      	beq.n	20013d5a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
20013d52:	f000 f8a3 	bl	20013e9c <FLASH_SetErrorCode>
    return HAL_ERROR;
20013d56:	2301      	movs	r3, #1
20013d58:	e000      	b.n	20013d5c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
20013d5a:	2300      	movs	r3, #0
  
}  
20013d5c:	4618      	mov	r0, r3
20013d5e:	3710      	adds	r7, #16
20013d60:	46bd      	mov	sp, r7
20013d62:	bd80      	pop	{r7, pc}
20013d64:	2000f5d0 	.word	0x2000f5d0
20013d68:	40023c00 	.word	0x40023c00

20013d6c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
20013d6c:	b490      	push	{r4, r7}
20013d6e:	b084      	sub	sp, #16
20013d70:	af00      	add	r7, sp, #0
20013d72:	60f8      	str	r0, [r7, #12]
20013d74:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20013d78:	4b13      	ldr	r3, [pc, #76]	; (20013dc8 <FLASH_Program_DoubleWord+0x5c>)
20013d7a:	691b      	ldr	r3, [r3, #16]
20013d7c:	4a12      	ldr	r2, [pc, #72]	; (20013dc8 <FLASH_Program_DoubleWord+0x5c>)
20013d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20013d82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20013d84:	4b10      	ldr	r3, [pc, #64]	; (20013dc8 <FLASH_Program_DoubleWord+0x5c>)
20013d86:	691b      	ldr	r3, [r3, #16]
20013d88:	4a0f      	ldr	r2, [pc, #60]	; (20013dc8 <FLASH_Program_DoubleWord+0x5c>)
20013d8a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
20013d8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20013d90:	4b0d      	ldr	r3, [pc, #52]	; (20013dc8 <FLASH_Program_DoubleWord+0x5c>)
20013d92:	691b      	ldr	r3, [r3, #16]
20013d94:	4a0c      	ldr	r2, [pc, #48]	; (20013dc8 <FLASH_Program_DoubleWord+0x5c>)
20013d96:	f043 0301 	orr.w	r3, r3, #1
20013d9a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
20013d9c:	68fb      	ldr	r3, [r7, #12]
20013d9e:	683a      	ldr	r2, [r7, #0]
20013da0:	601a      	str	r2, [r3, #0]
20013da2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
20013da6:	e9d7 1200 	ldrd	r1, r2, [r7]
20013daa:	f04f 0300 	mov.w	r3, #0
20013dae:	f04f 0400 	mov.w	r4, #0
20013db2:	0013      	movs	r3, r2
20013db4:	2400      	movs	r4, #0
20013db6:	68fa      	ldr	r2, [r7, #12]
20013db8:	3204      	adds	r2, #4
20013dba:	6013      	str	r3, [r2, #0]
}
20013dbc:	bf00      	nop
20013dbe:	3710      	adds	r7, #16
20013dc0:	46bd      	mov	sp, r7
20013dc2:	bc90      	pop	{r4, r7}
20013dc4:	4770      	bx	lr
20013dc6:	bf00      	nop
20013dc8:	40023c00 	.word	0x40023c00

20013dcc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
20013dcc:	b480      	push	{r7}
20013dce:	b083      	sub	sp, #12
20013dd0:	af00      	add	r7, sp, #0
20013dd2:	6078      	str	r0, [r7, #4]
20013dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20013dd6:	4b0d      	ldr	r3, [pc, #52]	; (20013e0c <FLASH_Program_Word+0x40>)
20013dd8:	691b      	ldr	r3, [r3, #16]
20013dda:	4a0c      	ldr	r2, [pc, #48]	; (20013e0c <FLASH_Program_Word+0x40>)
20013ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20013de0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
20013de2:	4b0a      	ldr	r3, [pc, #40]	; (20013e0c <FLASH_Program_Word+0x40>)
20013de4:	691b      	ldr	r3, [r3, #16]
20013de6:	4a09      	ldr	r2, [pc, #36]	; (20013e0c <FLASH_Program_Word+0x40>)
20013de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20013dec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20013dee:	4b07      	ldr	r3, [pc, #28]	; (20013e0c <FLASH_Program_Word+0x40>)
20013df0:	691b      	ldr	r3, [r3, #16]
20013df2:	4a06      	ldr	r2, [pc, #24]	; (20013e0c <FLASH_Program_Word+0x40>)
20013df4:	f043 0301 	orr.w	r3, r3, #1
20013df8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
20013dfa:	687b      	ldr	r3, [r7, #4]
20013dfc:	683a      	ldr	r2, [r7, #0]
20013dfe:	601a      	str	r2, [r3, #0]
}
20013e00:	bf00      	nop
20013e02:	370c      	adds	r7, #12
20013e04:	46bd      	mov	sp, r7
20013e06:	f85d 7b04 	ldr.w	r7, [sp], #4
20013e0a:	4770      	bx	lr
20013e0c:	40023c00 	.word	0x40023c00

20013e10 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
20013e10:	b480      	push	{r7}
20013e12:	b083      	sub	sp, #12
20013e14:	af00      	add	r7, sp, #0
20013e16:	6078      	str	r0, [r7, #4]
20013e18:	460b      	mov	r3, r1
20013e1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20013e1c:	4b0d      	ldr	r3, [pc, #52]	; (20013e54 <FLASH_Program_HalfWord+0x44>)
20013e1e:	691b      	ldr	r3, [r3, #16]
20013e20:	4a0c      	ldr	r2, [pc, #48]	; (20013e54 <FLASH_Program_HalfWord+0x44>)
20013e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20013e26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
20013e28:	4b0a      	ldr	r3, [pc, #40]	; (20013e54 <FLASH_Program_HalfWord+0x44>)
20013e2a:	691b      	ldr	r3, [r3, #16]
20013e2c:	4a09      	ldr	r2, [pc, #36]	; (20013e54 <FLASH_Program_HalfWord+0x44>)
20013e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20013e32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20013e34:	4b07      	ldr	r3, [pc, #28]	; (20013e54 <FLASH_Program_HalfWord+0x44>)
20013e36:	691b      	ldr	r3, [r3, #16]
20013e38:	4a06      	ldr	r2, [pc, #24]	; (20013e54 <FLASH_Program_HalfWord+0x44>)
20013e3a:	f043 0301 	orr.w	r3, r3, #1
20013e3e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
20013e40:	687b      	ldr	r3, [r7, #4]
20013e42:	887a      	ldrh	r2, [r7, #2]
20013e44:	801a      	strh	r2, [r3, #0]
}
20013e46:	bf00      	nop
20013e48:	370c      	adds	r7, #12
20013e4a:	46bd      	mov	sp, r7
20013e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
20013e50:	4770      	bx	lr
20013e52:	bf00      	nop
20013e54:	40023c00 	.word	0x40023c00

20013e58 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
20013e58:	b480      	push	{r7}
20013e5a:	b083      	sub	sp, #12
20013e5c:	af00      	add	r7, sp, #0
20013e5e:	6078      	str	r0, [r7, #4]
20013e60:	460b      	mov	r3, r1
20013e62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20013e64:	4b0c      	ldr	r3, [pc, #48]	; (20013e98 <FLASH_Program_Byte+0x40>)
20013e66:	691b      	ldr	r3, [r3, #16]
20013e68:	4a0b      	ldr	r2, [pc, #44]	; (20013e98 <FLASH_Program_Byte+0x40>)
20013e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20013e6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
20013e70:	4b09      	ldr	r3, [pc, #36]	; (20013e98 <FLASH_Program_Byte+0x40>)
20013e72:	4a09      	ldr	r2, [pc, #36]	; (20013e98 <FLASH_Program_Byte+0x40>)
20013e74:	691b      	ldr	r3, [r3, #16]
20013e76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20013e78:	4b07      	ldr	r3, [pc, #28]	; (20013e98 <FLASH_Program_Byte+0x40>)
20013e7a:	691b      	ldr	r3, [r3, #16]
20013e7c:	4a06      	ldr	r2, [pc, #24]	; (20013e98 <FLASH_Program_Byte+0x40>)
20013e7e:	f043 0301 	orr.w	r3, r3, #1
20013e82:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
20013e84:	687b      	ldr	r3, [r7, #4]
20013e86:	78fa      	ldrb	r2, [r7, #3]
20013e88:	701a      	strb	r2, [r3, #0]
}
20013e8a:	bf00      	nop
20013e8c:	370c      	adds	r7, #12
20013e8e:	46bd      	mov	sp, r7
20013e90:	f85d 7b04 	ldr.w	r7, [sp], #4
20013e94:	4770      	bx	lr
20013e96:	bf00      	nop
20013e98:	40023c00 	.word	0x40023c00

20013e9c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
20013e9c:	b480      	push	{r7}
20013e9e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
20013ea0:	4b2f      	ldr	r3, [pc, #188]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013ea2:	68db      	ldr	r3, [r3, #12]
20013ea4:	f003 0310 	and.w	r3, r3, #16
20013ea8:	2b00      	cmp	r3, #0
20013eaa:	d008      	beq.n	20013ebe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20013eac:	4b2d      	ldr	r3, [pc, #180]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013eae:	69db      	ldr	r3, [r3, #28]
20013eb0:	f043 0310 	orr.w	r3, r3, #16
20013eb4:	4a2b      	ldr	r2, [pc, #172]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013eb6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
20013eb8:	4b29      	ldr	r3, [pc, #164]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013eba:	2210      	movs	r2, #16
20013ebc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
20013ebe:	4b28      	ldr	r3, [pc, #160]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013ec0:	68db      	ldr	r3, [r3, #12]
20013ec2:	f003 0320 	and.w	r3, r3, #32
20013ec6:	2b00      	cmp	r3, #0
20013ec8:	d008      	beq.n	20013edc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
20013eca:	4b26      	ldr	r3, [pc, #152]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013ecc:	69db      	ldr	r3, [r3, #28]
20013ece:	f043 0308 	orr.w	r3, r3, #8
20013ed2:	4a24      	ldr	r2, [pc, #144]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013ed4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
20013ed6:	4b22      	ldr	r3, [pc, #136]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013ed8:	2220      	movs	r2, #32
20013eda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
20013edc:	4b20      	ldr	r3, [pc, #128]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013ede:	68db      	ldr	r3, [r3, #12]
20013ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
20013ee4:	2b00      	cmp	r3, #0
20013ee6:	d008      	beq.n	20013efa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
20013ee8:	4b1e      	ldr	r3, [pc, #120]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013eea:	69db      	ldr	r3, [r3, #28]
20013eec:	f043 0304 	orr.w	r3, r3, #4
20013ef0:	4a1c      	ldr	r2, [pc, #112]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013ef2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
20013ef4:	4b1a      	ldr	r3, [pc, #104]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013ef6:	2240      	movs	r2, #64	; 0x40
20013ef8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
20013efa:	4b19      	ldr	r3, [pc, #100]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013efc:	68db      	ldr	r3, [r3, #12]
20013efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
20013f02:	2b00      	cmp	r3, #0
20013f04:	d008      	beq.n	20013f18 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
20013f06:	4b17      	ldr	r3, [pc, #92]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013f08:	69db      	ldr	r3, [r3, #28]
20013f0a:	f043 0302 	orr.w	r3, r3, #2
20013f0e:	4a15      	ldr	r2, [pc, #84]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013f10:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
20013f12:	4b13      	ldr	r3, [pc, #76]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013f14:	2280      	movs	r2, #128	; 0x80
20013f16:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
20013f18:	4b11      	ldr	r3, [pc, #68]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013f1a:	68db      	ldr	r3, [r3, #12]
20013f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20013f20:	2b00      	cmp	r3, #0
20013f22:	d009      	beq.n	20013f38 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
20013f24:	4b0f      	ldr	r3, [pc, #60]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013f26:	69db      	ldr	r3, [r3, #28]
20013f28:	f043 0301 	orr.w	r3, r3, #1
20013f2c:	4a0d      	ldr	r2, [pc, #52]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013f2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
20013f30:	4b0b      	ldr	r3, [pc, #44]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013f32:	f44f 7280 	mov.w	r2, #256	; 0x100
20013f36:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
20013f38:	4b09      	ldr	r3, [pc, #36]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013f3a:	68db      	ldr	r3, [r3, #12]
20013f3c:	f003 0302 	and.w	r3, r3, #2
20013f40:	2b00      	cmp	r3, #0
20013f42:	d008      	beq.n	20013f56 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
20013f44:	4b07      	ldr	r3, [pc, #28]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013f46:	69db      	ldr	r3, [r3, #28]
20013f48:	f043 0320 	orr.w	r3, r3, #32
20013f4c:	4a05      	ldr	r2, [pc, #20]	; (20013f64 <FLASH_SetErrorCode+0xc8>)
20013f4e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
20013f50:	4b03      	ldr	r3, [pc, #12]	; (20013f60 <FLASH_SetErrorCode+0xc4>)
20013f52:	2202      	movs	r2, #2
20013f54:	60da      	str	r2, [r3, #12]
  }
}
20013f56:	bf00      	nop
20013f58:	46bd      	mov	sp, r7
20013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
20013f5e:	4770      	bx	lr
20013f60:	40023c00 	.word	0x40023c00
20013f64:	2000f5d0 	.word	0x2000f5d0

20013f68 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
20013f68:	b580      	push	{r7, lr}
20013f6a:	b084      	sub	sp, #16
20013f6c:	af00      	add	r7, sp, #0
20013f6e:	6078      	str	r0, [r7, #4]
20013f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
20013f72:	2301      	movs	r3, #1
20013f74:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
20013f76:	2300      	movs	r3, #0
20013f78:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20013f7a:	4b31      	ldr	r3, [pc, #196]	; (20014040 <HAL_FLASHEx_Erase+0xd8>)
20013f7c:	7e1b      	ldrb	r3, [r3, #24]
20013f7e:	2b01      	cmp	r3, #1
20013f80:	d101      	bne.n	20013f86 <HAL_FLASHEx_Erase+0x1e>
20013f82:	2302      	movs	r3, #2
20013f84:	e058      	b.n	20014038 <HAL_FLASHEx_Erase+0xd0>
20013f86:	4b2e      	ldr	r3, [pc, #184]	; (20014040 <HAL_FLASHEx_Erase+0xd8>)
20013f88:	2201      	movs	r2, #1
20013f8a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20013f8c:	f24c 3050 	movw	r0, #50000	; 0xc350
20013f90:	f7ff feac 	bl	20013cec <FLASH_WaitForLastOperation>
20013f94:	4603      	mov	r3, r0
20013f96:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
20013f98:	7bfb      	ldrb	r3, [r7, #15]
20013f9a:	2b00      	cmp	r3, #0
20013f9c:	d148      	bne.n	20014030 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
20013f9e:	683b      	ldr	r3, [r7, #0]
20013fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20013fa4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
20013fa6:	687b      	ldr	r3, [r7, #4]
20013fa8:	681b      	ldr	r3, [r3, #0]
20013faa:	2b01      	cmp	r3, #1
20013fac:	d115      	bne.n	20013fda <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
20013fae:	687b      	ldr	r3, [r7, #4]
20013fb0:	691b      	ldr	r3, [r3, #16]
20013fb2:	b2da      	uxtb	r2, r3
20013fb4:	687b      	ldr	r3, [r7, #4]
20013fb6:	685b      	ldr	r3, [r3, #4]
20013fb8:	4619      	mov	r1, r3
20013fba:	4610      	mov	r0, r2
20013fbc:	f000 f994 	bl	200142e8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20013fc0:	f24c 3050 	movw	r0, #50000	; 0xc350
20013fc4:	f7ff fe92 	bl	20013cec <FLASH_WaitForLastOperation>
20013fc8:	4603      	mov	r3, r0
20013fca:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
20013fcc:	4b1d      	ldr	r3, [pc, #116]	; (20014044 <HAL_FLASHEx_Erase+0xdc>)
20013fce:	691b      	ldr	r3, [r3, #16]
20013fd0:	4a1c      	ldr	r2, [pc, #112]	; (20014044 <HAL_FLASHEx_Erase+0xdc>)
20013fd2:	f023 0304 	bic.w	r3, r3, #4
20013fd6:	6113      	str	r3, [r2, #16]
20013fd8:	e028      	b.n	2001402c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20013fda:	687b      	ldr	r3, [r7, #4]
20013fdc:	689b      	ldr	r3, [r3, #8]
20013fde:	60bb      	str	r3, [r7, #8]
20013fe0:	e01c      	b.n	2001401c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
20013fe2:	687b      	ldr	r3, [r7, #4]
20013fe4:	691b      	ldr	r3, [r3, #16]
20013fe6:	b2db      	uxtb	r3, r3
20013fe8:	4619      	mov	r1, r3
20013fea:	68b8      	ldr	r0, [r7, #8]
20013fec:	f000 f9a0 	bl	20014330 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20013ff0:	f24c 3050 	movw	r0, #50000	; 0xc350
20013ff4:	f7ff fe7a 	bl	20013cec <FLASH_WaitForLastOperation>
20013ff8:	4603      	mov	r3, r0
20013ffa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
20013ffc:	4b11      	ldr	r3, [pc, #68]	; (20014044 <HAL_FLASHEx_Erase+0xdc>)
20013ffe:	691b      	ldr	r3, [r3, #16]
20014000:	4a10      	ldr	r2, [pc, #64]	; (20014044 <HAL_FLASHEx_Erase+0xdc>)
20014002:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
20014006:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
20014008:	7bfb      	ldrb	r3, [r7, #15]
2001400a:	2b00      	cmp	r3, #0
2001400c:	d003      	beq.n	20014016 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
2001400e:	683b      	ldr	r3, [r7, #0]
20014010:	68ba      	ldr	r2, [r7, #8]
20014012:	601a      	str	r2, [r3, #0]
          break;
20014014:	e00a      	b.n	2001402c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20014016:	68bb      	ldr	r3, [r7, #8]
20014018:	3301      	adds	r3, #1
2001401a:	60bb      	str	r3, [r7, #8]
2001401c:	687b      	ldr	r3, [r7, #4]
2001401e:	68da      	ldr	r2, [r3, #12]
20014020:	687b      	ldr	r3, [r7, #4]
20014022:	689b      	ldr	r3, [r3, #8]
20014024:	4413      	add	r3, r2
20014026:	68ba      	ldr	r2, [r7, #8]
20014028:	429a      	cmp	r2, r3
2001402a:	d3da      	bcc.n	20013fe2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
2001402c:	f000 fb00 	bl	20014630 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20014030:	4b03      	ldr	r3, [pc, #12]	; (20014040 <HAL_FLASHEx_Erase+0xd8>)
20014032:	2200      	movs	r2, #0
20014034:	761a      	strb	r2, [r3, #24]

  return status;
20014036:	7bfb      	ldrb	r3, [r7, #15]
}
20014038:	4618      	mov	r0, r3
2001403a:	3710      	adds	r7, #16
2001403c:	46bd      	mov	sp, r7
2001403e:	bd80      	pop	{r7, pc}
20014040:	2000f5d0 	.word	0x2000f5d0
20014044:	40023c00 	.word	0x40023c00

20014048 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
20014048:	b580      	push	{r7, lr}
2001404a:	b084      	sub	sp, #16
2001404c:	af00      	add	r7, sp, #0
2001404e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20014050:	2300      	movs	r3, #0
20014052:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20014054:	4b25      	ldr	r3, [pc, #148]	; (200140ec <HAL_FLASHEx_Erase_IT+0xa4>)
20014056:	7e1b      	ldrb	r3, [r3, #24]
20014058:	2b01      	cmp	r3, #1
2001405a:	d101      	bne.n	20014060 <HAL_FLASHEx_Erase_IT+0x18>
2001405c:	2302      	movs	r3, #2
2001405e:	e040      	b.n	200140e2 <HAL_FLASHEx_Erase_IT+0x9a>
20014060:	4b22      	ldr	r3, [pc, #136]	; (200140ec <HAL_FLASHEx_Erase_IT+0xa4>)
20014062:	2201      	movs	r2, #1
20014064:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
20014066:	4b22      	ldr	r3, [pc, #136]	; (200140f0 <HAL_FLASHEx_Erase_IT+0xa8>)
20014068:	691b      	ldr	r3, [r3, #16]
2001406a:	4a21      	ldr	r2, [pc, #132]	; (200140f0 <HAL_FLASHEx_Erase_IT+0xa8>)
2001406c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20014070:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
20014072:	4b1f      	ldr	r3, [pc, #124]	; (200140f0 <HAL_FLASHEx_Erase_IT+0xa8>)
20014074:	691b      	ldr	r3, [r3, #16]
20014076:	4a1e      	ldr	r2, [pc, #120]	; (200140f0 <HAL_FLASHEx_Erase_IT+0xa8>)
20014078:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2001407c:	6113      	str	r3, [r2, #16]
  
  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
2001407e:	4b1c      	ldr	r3, [pc, #112]	; (200140f0 <HAL_FLASHEx_Erase_IT+0xa8>)
20014080:	22f3      	movs	r2, #243	; 0xf3
20014082:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
  
  if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
20014084:	687b      	ldr	r3, [r7, #4]
20014086:	681b      	ldr	r3, [r3, #0]
20014088:	2b01      	cmp	r3, #1
2001408a:	d110      	bne.n	200140ae <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
2001408c:	4b17      	ldr	r3, [pc, #92]	; (200140ec <HAL_FLASHEx_Erase_IT+0xa4>)
2001408e:	2202      	movs	r2, #2
20014090:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
20014092:	687b      	ldr	r3, [r7, #4]
20014094:	685b      	ldr	r3, [r3, #4]
20014096:	4a15      	ldr	r2, [pc, #84]	; (200140ec <HAL_FLASHEx_Erase_IT+0xa4>)
20014098:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
2001409a:	687b      	ldr	r3, [r7, #4]
2001409c:	691b      	ldr	r3, [r3, #16]
2001409e:	b2da      	uxtb	r2, r3
200140a0:	687b      	ldr	r3, [r7, #4]
200140a2:	685b      	ldr	r3, [r3, #4]
200140a4:	4619      	mov	r1, r3
200140a6:	4610      	mov	r0, r2
200140a8:	f000 f91e 	bl	200142e8 <FLASH_MassErase>
200140ac:	e018      	b.n	200140e0 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
200140ae:	4b0f      	ldr	r3, [pc, #60]	; (200140ec <HAL_FLASHEx_Erase_IT+0xa4>)
200140b0:	2201      	movs	r2, #1
200140b2:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
200140b4:	687b      	ldr	r3, [r7, #4]
200140b6:	68db      	ldr	r3, [r3, #12]
200140b8:	4a0c      	ldr	r2, [pc, #48]	; (200140ec <HAL_FLASHEx_Erase_IT+0xa4>)
200140ba:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
200140bc:	687b      	ldr	r3, [r7, #4]
200140be:	689b      	ldr	r3, [r3, #8]
200140c0:	4a0a      	ldr	r2, [pc, #40]	; (200140ec <HAL_FLASHEx_Erase_IT+0xa4>)
200140c2:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
200140c4:	687b      	ldr	r3, [r7, #4]
200140c6:	691b      	ldr	r3, [r3, #16]
200140c8:	b2da      	uxtb	r2, r3
200140ca:	4b08      	ldr	r3, [pc, #32]	; (200140ec <HAL_FLASHEx_Erase_IT+0xa4>)
200140cc:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
200140ce:	687b      	ldr	r3, [r7, #4]
200140d0:	689a      	ldr	r2, [r3, #8]
200140d2:	687b      	ldr	r3, [r7, #4]
200140d4:	691b      	ldr	r3, [r3, #16]
200140d6:	b2db      	uxtb	r3, r3
200140d8:	4619      	mov	r1, r3
200140da:	4610      	mov	r0, r2
200140dc:	f000 f928 	bl	20014330 <FLASH_Erase_Sector>
  }

  return status;
200140e0:	7bfb      	ldrb	r3, [r7, #15]
}
200140e2:	4618      	mov	r0, r3
200140e4:	3710      	adds	r7, #16
200140e6:	46bd      	mov	sp, r7
200140e8:	bd80      	pop	{r7, pc}
200140ea:	bf00      	nop
200140ec:	2000f5d0 	.word	0x2000f5d0
200140f0:	40023c00 	.word	0x40023c00

200140f4 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
200140f4:	b580      	push	{r7, lr}
200140f6:	b084      	sub	sp, #16
200140f8:	af00      	add	r7, sp, #0
200140fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
200140fc:	2301      	movs	r3, #1
200140fe:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20014100:	4b32      	ldr	r3, [pc, #200]	; (200141cc <HAL_FLASHEx_OBProgram+0xd8>)
20014102:	7e1b      	ldrb	r3, [r3, #24]
20014104:	2b01      	cmp	r3, #1
20014106:	d101      	bne.n	2001410c <HAL_FLASHEx_OBProgram+0x18>
20014108:	2302      	movs	r3, #2
2001410a:	e05b      	b.n	200141c4 <HAL_FLASHEx_OBProgram+0xd0>
2001410c:	4b2f      	ldr	r3, [pc, #188]	; (200141cc <HAL_FLASHEx_OBProgram+0xd8>)
2001410e:	2201      	movs	r2, #1
20014110:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
20014112:	687b      	ldr	r3, [r7, #4]
20014114:	681b      	ldr	r3, [r3, #0]
20014116:	f003 0301 	and.w	r3, r3, #1
2001411a:	2b00      	cmp	r3, #0
2001411c:	d018      	beq.n	20014150 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
2001411e:	687b      	ldr	r3, [r7, #4]
20014120:	685b      	ldr	r3, [r3, #4]
20014122:	2b01      	cmp	r3, #1
20014124:	d10a      	bne.n	2001413c <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
20014126:	687b      	ldr	r3, [r7, #4]
20014128:	689a      	ldr	r2, [r3, #8]
2001412a:	687b      	ldr	r3, [r7, #4]
2001412c:	68db      	ldr	r3, [r3, #12]
2001412e:	4619      	mov	r1, r3
20014130:	4610      	mov	r0, r2
20014132:	f000 f945 	bl	200143c0 <FLASH_OB_EnableWRP>
20014136:	4603      	mov	r3, r0
20014138:	73fb      	strb	r3, [r7, #15]
2001413a:	e009      	b.n	20014150 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
2001413c:	687b      	ldr	r3, [r7, #4]
2001413e:	689a      	ldr	r2, [r3, #8]
20014140:	687b      	ldr	r3, [r7, #4]
20014142:	68db      	ldr	r3, [r3, #12]
20014144:	4619      	mov	r1, r3
20014146:	4610      	mov	r0, r2
20014148:	f000 f95c 	bl	20014404 <FLASH_OB_DisableWRP>
2001414c:	4603      	mov	r3, r0
2001414e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
20014150:	687b      	ldr	r3, [r7, #4]
20014152:	681b      	ldr	r3, [r3, #0]
20014154:	f003 0302 	and.w	r3, r3, #2
20014158:	2b00      	cmp	r3, #0
2001415a:	d007      	beq.n	2001416c <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
2001415c:	687b      	ldr	r3, [r7, #4]
2001415e:	691b      	ldr	r3, [r3, #16]
20014160:	b2db      	uxtb	r3, r3
20014162:	4618      	mov	r0, r3
20014164:	f000 f9b0 	bl	200144c8 <FLASH_OB_RDP_LevelConfig>
20014168:	4603      	mov	r3, r0
2001416a:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
2001416c:	687b      	ldr	r3, [r7, #4]
2001416e:	681b      	ldr	r3, [r3, #0]
20014170:	f003 0304 	and.w	r3, r3, #4
20014174:	2b00      	cmp	r3, #0
20014176:	d013      	beq.n	200141a0 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
20014178:	687b      	ldr	r3, [r7, #4]
2001417a:	7e1b      	ldrb	r3, [r3, #24]
2001417c:	f003 0320 	and.w	r3, r3, #32
20014180:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
20014182:	687b      	ldr	r3, [r7, #4]
20014184:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
20014186:	f003 0340 	and.w	r3, r3, #64	; 0x40
2001418a:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
2001418c:	687b      	ldr	r3, [r7, #4]
2001418e:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
20014190:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
20014194:	b2db      	uxtb	r3, r3
20014196:	461a      	mov	r2, r3
20014198:	f000 f9b0 	bl	200144fc <FLASH_OB_UserConfig>
2001419c:	4603      	mov	r3, r0
2001419e:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
200141a0:	687b      	ldr	r3, [r7, #4]
200141a2:	681b      	ldr	r3, [r3, #0]
200141a4:	f003 0308 	and.w	r3, r3, #8
200141a8:	2b00      	cmp	r3, #0
200141aa:	d007      	beq.n	200141bc <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
200141ac:	687b      	ldr	r3, [r7, #4]
200141ae:	695b      	ldr	r3, [r3, #20]
200141b0:	b2db      	uxtb	r3, r3
200141b2:	4618      	mov	r0, r3
200141b4:	f000 f9d2 	bl	2001455c <FLASH_OB_BOR_LevelConfig>
200141b8:	4603      	mov	r3, r0
200141ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
200141bc:	4b03      	ldr	r3, [pc, #12]	; (200141cc <HAL_FLASHEx_OBProgram+0xd8>)
200141be:	2200      	movs	r2, #0
200141c0:	761a      	strb	r2, [r3, #24]

  return status;
200141c2:	7bfb      	ldrb	r3, [r7, #15]
}
200141c4:	4618      	mov	r0, r3
200141c6:	3710      	adds	r7, #16
200141c8:	46bd      	mov	sp, r7
200141ca:	bd80      	pop	{r7, pc}
200141cc:	2000f5d0 	.word	0x2000f5d0

200141d0 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
200141d0:	b580      	push	{r7, lr}
200141d2:	b082      	sub	sp, #8
200141d4:	af00      	add	r7, sp, #0
200141d6:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
200141d8:	687b      	ldr	r3, [r7, #4]
200141da:	220f      	movs	r2, #15
200141dc:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
200141de:	f000 f9eb 	bl	200145b8 <FLASH_OB_GetWRP>
200141e2:	4603      	mov	r3, r0
200141e4:	461a      	mov	r2, r3
200141e6:	687b      	ldr	r3, [r7, #4]
200141e8:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
200141ea:	f000 f9f1 	bl	200145d0 <FLASH_OB_GetRDP>
200141ee:	4603      	mov	r3, r0
200141f0:	461a      	mov	r2, r3
200141f2:	687b      	ldr	r3, [r7, #4]
200141f4:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
200141f6:	f000 f9cf 	bl	20014598 <FLASH_OB_GetUser>
200141fa:	4603      	mov	r3, r0
200141fc:	461a      	mov	r2, r3
200141fe:	687b      	ldr	r3, [r7, #4]
20014200:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
20014202:	f000 fa05 	bl	20014610 <FLASH_OB_GetBOR>
20014206:	4603      	mov	r3, r0
20014208:	461a      	mov	r2, r3
2001420a:	687b      	ldr	r3, [r7, #4]
2001420c:	615a      	str	r2, [r3, #20]
}
2001420e:	bf00      	nop
20014210:	3708      	adds	r7, #8
20014212:	46bd      	mov	sp, r7
20014214:	bd80      	pop	{r7, pc}

20014216 <HAL_FLASHEx_AdvOBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram (FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
20014216:	b580      	push	{r7, lr}
20014218:	b084      	sub	sp, #16
2001421a:	af00      	add	r7, sp, #0
2001421c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
2001421e:	2301      	movs	r3, #1
20014220:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OBEX(pAdvOBInit->OptionType));

  /*Program PCROP option byte*/
  if(((pAdvOBInit->OptionType) & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
20014222:	687b      	ldr	r3, [r7, #4]
20014224:	681b      	ldr	r3, [r3, #0]
20014226:	f003 0301 	and.w	r3, r3, #1
2001422a:	2b00      	cmp	r3, #0
2001422c:	d012      	beq.n	20014254 <HAL_FLASHEx_AdvOBProgram+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
    if((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
2001422e:	687b      	ldr	r3, [r7, #4]
20014230:	685b      	ldr	r3, [r3, #4]
20014232:	2b01      	cmp	r3, #1
20014234:	d107      	bne.n	20014246 <HAL_FLASHEx_AdvOBProgram+0x30>
    {
      /*Enable of Write protection on the selected Sector*/
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_EnablePCROP(pAdvOBInit->Sectors);
20014236:	687b      	ldr	r3, [r7, #4]
20014238:	891b      	ldrh	r3, [r3, #8]
2001423a:	4618      	mov	r0, r3
2001423c:	f000 f902 	bl	20014444 <FLASH_OB_EnablePCROP>
20014240:	4603      	mov	r3, r0
20014242:	73fb      	strb	r3, [r7, #15]
20014244:	e006      	b.n	20014254 <HAL_FLASHEx_AdvOBProgram+0x3e>
    {
      /*Disable of Write protection on the selected Sector*/
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_DisablePCROP(pAdvOBInit->Sectors);
20014246:	687b      	ldr	r3, [r7, #4]
20014248:	891b      	ldrh	r3, [r3, #8]
2001424a:	4618      	mov	r0, r3
2001424c:	f000 f91a 	bl	20014484 <FLASH_OB_DisablePCROP>
20014250:	4603      	mov	r3, r0
20014252:	73fb      	strb	r3, [r7, #15]
  {
    status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
  }
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */

  return status;
20014254:	7bfb      	ldrb	r3, [r7, #15]
}
20014256:	4618      	mov	r0, r3
20014258:	3710      	adds	r7, #16
2001425a:	46bd      	mov	sp, r7
2001425c:	bd80      	pop	{r7, pc}
	...

20014260 <HAL_FLASHEx_AdvOBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
20014260:	b480      	push	{r7}
20014262:	b083      	sub	sp, #12
20014264:	af00      	add	r7, sp, #0
20014266:	6078      	str	r0, [r7, #4]
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /*Get Sector*/
  pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
20014268:	4b05      	ldr	r3, [pc, #20]	; (20014280 <HAL_FLASHEx_AdvOBGetConfig+0x20>)
2001426a:	881b      	ldrh	r3, [r3, #0]
2001426c:	b29a      	uxth	r2, r3
2001426e:	687b      	ldr	r3, [r7, #4]
20014270:	811a      	strh	r2, [r3, #8]

  /*Get Boot config OB*/
  pAdvOBInit->BootConfig = *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS;
#endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx ||
          STM32F413xx || STM32F423xx */
}
20014272:	bf00      	nop
20014274:	370c      	adds	r7, #12
20014276:	46bd      	mov	sp, r7
20014278:	f85d 7b04 	ldr.w	r7, [sp], #4
2001427c:	4770      	bx	lr
2001427e:	bf00      	nop
20014280:	40023c16 	.word	0x40023c16

20014284 <HAL_FLASHEx_OB_SelectPCROP>:
  *         STM32F469xx/STM32F479xx/STM32F412xx/STM32F413xx devices.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void)
{
20014284:	b480      	push	{r7}
20014286:	b083      	sub	sp, #12
20014288:	af00      	add	r7, sp, #0
  uint8_t optiontmp = 0xFF;
2001428a:	23ff      	movs	r3, #255	; 0xff
2001428c:	71fb      	strb	r3, [r7, #7]

  /* Mask SPRMOD bit */
  optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
2001428e:	4b09      	ldr	r3, [pc, #36]	; (200142b4 <HAL_FLASHEx_OB_SelectPCROP+0x30>)
20014290:	781b      	ldrb	r3, [r3, #0]
20014292:	b2db      	uxtb	r3, r3
20014294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20014298:	71fb      	strb	r3, [r7, #7]
  
  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_SELECTED | optiontmp); 
2001429a:	4a06      	ldr	r2, [pc, #24]	; (200142b4 <HAL_FLASHEx_OB_SelectPCROP+0x30>)
2001429c:	79fb      	ldrb	r3, [r7, #7]
2001429e:	f063 037f 	orn	r3, r3, #127	; 0x7f
200142a2:	b2db      	uxtb	r3, r3
200142a4:	7013      	strb	r3, [r2, #0]
  
  return HAL_OK;
200142a6:	2300      	movs	r3, #0
}
200142a8:	4618      	mov	r0, r3
200142aa:	370c      	adds	r7, #12
200142ac:	46bd      	mov	sp, r7
200142ae:	f85d 7b04 	ldr.w	r7, [sp], #4
200142b2:	4770      	bx	lr
200142b4:	40023c17 	.word	0x40023c17

200142b8 <HAL_FLASHEx_OB_DeSelectPCROP>:
  *         STM32F469xx/STM32F479xx/STM32F412xx/STM32F413xx devices.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OB_DeSelectPCROP(void)
{
200142b8:	b480      	push	{r7}
200142ba:	b083      	sub	sp, #12
200142bc:	af00      	add	r7, sp, #0
  uint8_t optiontmp = 0xFF;
200142be:	23ff      	movs	r3, #255	; 0xff
200142c0:	71fb      	strb	r3, [r7, #7]
  
  /* Mask SPRMOD bit */
  optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
200142c2:	4b08      	ldr	r3, [pc, #32]	; (200142e4 <HAL_FLASHEx_OB_DeSelectPCROP+0x2c>)
200142c4:	781b      	ldrb	r3, [r3, #0]
200142c6:	b2db      	uxtb	r3, r3
200142c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
200142cc:	71fb      	strb	r3, [r7, #7]
  
  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_DESELECTED | optiontmp);  
200142ce:	4a05      	ldr	r2, [pc, #20]	; (200142e4 <HAL_FLASHEx_OB_DeSelectPCROP+0x2c>)
200142d0:	79fb      	ldrb	r3, [r7, #7]
200142d2:	7013      	strb	r3, [r2, #0]
  
  return HAL_OK;
200142d4:	2300      	movs	r3, #0
}
200142d6:	4618      	mov	r0, r3
200142d8:	370c      	adds	r7, #12
200142da:	46bd      	mov	sp, r7
200142dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200142e0:	4770      	bx	lr
200142e2:	bf00      	nop
200142e4:	40023c17 	.word	0x40023c17

200142e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
200142e8:	b480      	push	{r7}
200142ea:	b083      	sub	sp, #12
200142ec:	af00      	add	r7, sp, #0
200142ee:	4603      	mov	r3, r0
200142f0:	6039      	str	r1, [r7, #0]
200142f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
200142f4:	4b0d      	ldr	r3, [pc, #52]	; (2001432c <FLASH_MassErase+0x44>)
200142f6:	691b      	ldr	r3, [r3, #16]
200142f8:	4a0c      	ldr	r2, [pc, #48]	; (2001432c <FLASH_MassErase+0x44>)
200142fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
200142fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
20014300:	4b0a      	ldr	r3, [pc, #40]	; (2001432c <FLASH_MassErase+0x44>)
20014302:	691b      	ldr	r3, [r3, #16]
20014304:	4a09      	ldr	r2, [pc, #36]	; (2001432c <FLASH_MassErase+0x44>)
20014306:	f043 0304 	orr.w	r3, r3, #4
2001430a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
2001430c:	4b07      	ldr	r3, [pc, #28]	; (2001432c <FLASH_MassErase+0x44>)
2001430e:	691a      	ldr	r2, [r3, #16]
20014310:	79fb      	ldrb	r3, [r7, #7]
20014312:	021b      	lsls	r3, r3, #8
20014314:	4313      	orrs	r3, r2
20014316:	4a05      	ldr	r2, [pc, #20]	; (2001432c <FLASH_MassErase+0x44>)
20014318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2001431c:	6113      	str	r3, [r2, #16]
}
2001431e:	bf00      	nop
20014320:	370c      	adds	r7, #12
20014322:	46bd      	mov	sp, r7
20014324:	f85d 7b04 	ldr.w	r7, [sp], #4
20014328:	4770      	bx	lr
2001432a:	bf00      	nop
2001432c:	40023c00 	.word	0x40023c00

20014330 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
20014330:	b480      	push	{r7}
20014332:	b085      	sub	sp, #20
20014334:	af00      	add	r7, sp, #0
20014336:	6078      	str	r0, [r7, #4]
20014338:	460b      	mov	r3, r1
2001433a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
2001433c:	2300      	movs	r3, #0
2001433e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
20014340:	78fb      	ldrb	r3, [r7, #3]
20014342:	2b00      	cmp	r3, #0
20014344:	d102      	bne.n	2001434c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
20014346:	2300      	movs	r3, #0
20014348:	60fb      	str	r3, [r7, #12]
2001434a:	e010      	b.n	2001436e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
2001434c:	78fb      	ldrb	r3, [r7, #3]
2001434e:	2b01      	cmp	r3, #1
20014350:	d103      	bne.n	2001435a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
20014352:	f44f 7380 	mov.w	r3, #256	; 0x100
20014356:	60fb      	str	r3, [r7, #12]
20014358:	e009      	b.n	2001436e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
2001435a:	78fb      	ldrb	r3, [r7, #3]
2001435c:	2b02      	cmp	r3, #2
2001435e:	d103      	bne.n	20014368 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
20014360:	f44f 7300 	mov.w	r3, #512	; 0x200
20014364:	60fb      	str	r3, [r7, #12]
20014366:	e002      	b.n	2001436e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
20014368:	f44f 7340 	mov.w	r3, #768	; 0x300
2001436c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
2001436e:	4b13      	ldr	r3, [pc, #76]	; (200143bc <FLASH_Erase_Sector+0x8c>)
20014370:	691b      	ldr	r3, [r3, #16]
20014372:	4a12      	ldr	r2, [pc, #72]	; (200143bc <FLASH_Erase_Sector+0x8c>)
20014374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20014378:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
2001437a:	4b10      	ldr	r3, [pc, #64]	; (200143bc <FLASH_Erase_Sector+0x8c>)
2001437c:	691a      	ldr	r2, [r3, #16]
2001437e:	490f      	ldr	r1, [pc, #60]	; (200143bc <FLASH_Erase_Sector+0x8c>)
20014380:	68fb      	ldr	r3, [r7, #12]
20014382:	4313      	orrs	r3, r2
20014384:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
20014386:	4b0d      	ldr	r3, [pc, #52]	; (200143bc <FLASH_Erase_Sector+0x8c>)
20014388:	691b      	ldr	r3, [r3, #16]
2001438a:	4a0c      	ldr	r2, [pc, #48]	; (200143bc <FLASH_Erase_Sector+0x8c>)
2001438c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20014390:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
20014392:	4b0a      	ldr	r3, [pc, #40]	; (200143bc <FLASH_Erase_Sector+0x8c>)
20014394:	691a      	ldr	r2, [r3, #16]
20014396:	687b      	ldr	r3, [r7, #4]
20014398:	00db      	lsls	r3, r3, #3
2001439a:	4313      	orrs	r3, r2
2001439c:	4a07      	ldr	r2, [pc, #28]	; (200143bc <FLASH_Erase_Sector+0x8c>)
2001439e:	f043 0302 	orr.w	r3, r3, #2
200143a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
200143a4:	4b05      	ldr	r3, [pc, #20]	; (200143bc <FLASH_Erase_Sector+0x8c>)
200143a6:	691b      	ldr	r3, [r3, #16]
200143a8:	4a04      	ldr	r2, [pc, #16]	; (200143bc <FLASH_Erase_Sector+0x8c>)
200143aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200143ae:	6113      	str	r3, [r2, #16]
}
200143b0:	bf00      	nop
200143b2:	3714      	adds	r7, #20
200143b4:	46bd      	mov	sp, r7
200143b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200143ba:	4770      	bx	lr
200143bc:	40023c00 	.word	0x40023c00

200143c0 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
200143c0:	b580      	push	{r7, lr}
200143c2:	b084      	sub	sp, #16
200143c4:	af00      	add	r7, sp, #0
200143c6:	6078      	str	r0, [r7, #4]
200143c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200143ca:	2300      	movs	r3, #0
200143cc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200143ce:	f24c 3050 	movw	r0, #50000	; 0xc350
200143d2:	f7ff fc8b 	bl	20013cec <FLASH_WaitForLastOperation>
200143d6:	4603      	mov	r3, r0
200143d8:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
200143da:	7bfb      	ldrb	r3, [r7, #15]
200143dc:	2b00      	cmp	r3, #0
200143de:	d10a      	bne.n	200143f6 <FLASH_OB_EnableWRP+0x36>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
200143e0:	4b07      	ldr	r3, [pc, #28]	; (20014400 <FLASH_OB_EnableWRP+0x40>)
200143e2:	881b      	ldrh	r3, [r3, #0]
200143e4:	b29a      	uxth	r2, r3
200143e6:	687b      	ldr	r3, [r7, #4]
200143e8:	b29b      	uxth	r3, r3
200143ea:	43db      	mvns	r3, r3
200143ec:	b29b      	uxth	r3, r3
200143ee:	4904      	ldr	r1, [pc, #16]	; (20014400 <FLASH_OB_EnableWRP+0x40>)
200143f0:	4013      	ands	r3, r2
200143f2:	b29b      	uxth	r3, r3
200143f4:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
200143f6:	7bfb      	ldrb	r3, [r7, #15]
}
200143f8:	4618      	mov	r0, r3
200143fa:	3710      	adds	r7, #16
200143fc:	46bd      	mov	sp, r7
200143fe:	bd80      	pop	{r7, pc}
20014400:	40023c16 	.word	0x40023c16

20014404 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
20014404:	b580      	push	{r7, lr}
20014406:	b084      	sub	sp, #16
20014408:	af00      	add	r7, sp, #0
2001440a:	6078      	str	r0, [r7, #4]
2001440c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2001440e:	2300      	movs	r3, #0
20014410:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20014412:	f24c 3050 	movw	r0, #50000	; 0xc350
20014416:	f7ff fc69 	bl	20013cec <FLASH_WaitForLastOperation>
2001441a:	4603      	mov	r3, r0
2001441c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
2001441e:	7bfb      	ldrb	r3, [r7, #15]
20014420:	2b00      	cmp	r3, #0
20014422:	d108      	bne.n	20014436 <FLASH_OB_DisableWRP+0x32>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
20014424:	4b06      	ldr	r3, [pc, #24]	; (20014440 <FLASH_OB_DisableWRP+0x3c>)
20014426:	881b      	ldrh	r3, [r3, #0]
20014428:	b29a      	uxth	r2, r3
2001442a:	687b      	ldr	r3, [r7, #4]
2001442c:	b29b      	uxth	r3, r3
2001442e:	4904      	ldr	r1, [pc, #16]	; (20014440 <FLASH_OB_DisableWRP+0x3c>)
20014430:	4313      	orrs	r3, r2
20014432:	b29b      	uxth	r3, r3
20014434:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
20014436:	7bfb      	ldrb	r3, [r7, #15]
}
20014438:	4618      	mov	r0, r3
2001443a:	3710      	adds	r7, #16
2001443c:	46bd      	mov	sp, r7
2001443e:	bd80      	pop	{r7, pc}
20014440:	40023c16 	.word	0x40023c16

20014444 <FLASH_OB_EnablePCROP>:
  *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
  *            @arg OB_PCROP_Sector_All                         
  * @retval HAL Status  
  */
static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t Sector)
{
20014444:	b580      	push	{r7, lr}
20014446:	b084      	sub	sp, #16
20014448:	af00      	add	r7, sp, #0
2001444a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2001444c:	2300      	movs	r3, #0
2001444e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(Sector));
    
  /* Wait for last operation to be completed */  
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20014450:	f24c 3050 	movw	r0, #50000	; 0xc350
20014454:	f7ff fc4a 	bl	20013cec <FLASH_WaitForLastOperation>
20014458:	4603      	mov	r3, r0
2001445a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
2001445c:	7bfb      	ldrb	r3, [r7, #15]
2001445e:	2b00      	cmp	r3, #0
20014460:	d108      	bne.n	20014474 <FLASH_OB_EnablePCROP+0x30>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)Sector;
20014462:	4b07      	ldr	r3, [pc, #28]	; (20014480 <FLASH_OB_EnablePCROP+0x3c>)
20014464:	881b      	ldrh	r3, [r3, #0]
20014466:	b29a      	uxth	r2, r3
20014468:	687b      	ldr	r3, [r7, #4]
2001446a:	b29b      	uxth	r3, r3
2001446c:	4904      	ldr	r1, [pc, #16]	; (20014480 <FLASH_OB_EnablePCROP+0x3c>)
2001446e:	4313      	orrs	r3, r2
20014470:	b29b      	uxth	r3, r3
20014472:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
20014474:	7bfb      	ldrb	r3, [r7, #15]
}
20014476:	4618      	mov	r0, r3
20014478:	3710      	adds	r7, #16
2001447a:	46bd      	mov	sp, r7
2001447c:	bd80      	pop	{r7, pc}
2001447e:	bf00      	nop
20014480:	40023c16 	.word	0x40023c16

20014484 <FLASH_OB_DisablePCROP>:
  *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
  *            @arg OB_PCROP_Sector_All                         
  * @retval HAL Status  
  */
static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t Sector)
{  
20014484:	b580      	push	{r7, lr}
20014486:	b084      	sub	sp, #16
20014488:	af00      	add	r7, sp, #0
2001448a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2001448c:	2300      	movs	r3, #0
2001448e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(Sector));
    
  /* Wait for last operation to be completed */  
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20014490:	f24c 3050 	movw	r0, #50000	; 0xc350
20014494:	f7ff fc2a 	bl	20013cec <FLASH_WaitForLastOperation>
20014498:	4603      	mov	r3, r0
2001449a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
2001449c:	7bfb      	ldrb	r3, [r7, #15]
2001449e:	2b00      	cmp	r3, #0
200144a0:	d10a      	bne.n	200144b8 <FLASH_OB_DisablePCROP+0x34>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~Sector);
200144a2:	4b08      	ldr	r3, [pc, #32]	; (200144c4 <FLASH_OB_DisablePCROP+0x40>)
200144a4:	881b      	ldrh	r3, [r3, #0]
200144a6:	b29a      	uxth	r2, r3
200144a8:	687b      	ldr	r3, [r7, #4]
200144aa:	b29b      	uxth	r3, r3
200144ac:	43db      	mvns	r3, r3
200144ae:	b29b      	uxth	r3, r3
200144b0:	4904      	ldr	r1, [pc, #16]	; (200144c4 <FLASH_OB_DisablePCROP+0x40>)
200144b2:	4013      	ands	r3, r2
200144b4:	b29b      	uxth	r3, r3
200144b6:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
200144b8:	7bfb      	ldrb	r3, [r7, #15]

}
200144ba:	4618      	mov	r0, r3
200144bc:	3710      	adds	r7, #16
200144be:	46bd      	mov	sp, r7
200144c0:	bd80      	pop	{r7, pc}
200144c2:	bf00      	nop
200144c4:	40023c16 	.word	0x40023c16

200144c8 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
200144c8:	b580      	push	{r7, lr}
200144ca:	b084      	sub	sp, #16
200144cc:	af00      	add	r7, sp, #0
200144ce:	4603      	mov	r3, r0
200144d0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
200144d2:	2300      	movs	r3, #0
200144d4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200144d6:	f24c 3050 	movw	r0, #50000	; 0xc350
200144da:	f7ff fc07 	bl	20013cec <FLASH_WaitForLastOperation>
200144de:	4603      	mov	r3, r0
200144e0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
200144e2:	7bfb      	ldrb	r3, [r7, #15]
200144e4:	2b00      	cmp	r3, #0
200144e6:	d102      	bne.n	200144ee <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
200144e8:	4a03      	ldr	r2, [pc, #12]	; (200144f8 <FLASH_OB_RDP_LevelConfig+0x30>)
200144ea:	79fb      	ldrb	r3, [r7, #7]
200144ec:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
200144ee:	7bfb      	ldrb	r3, [r7, #15]
}
200144f0:	4618      	mov	r0, r3
200144f2:	3710      	adds	r7, #16
200144f4:	46bd      	mov	sp, r7
200144f6:	bd80      	pop	{r7, pc}
200144f8:	40023c15 	.word	0x40023c15

200144fc <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
200144fc:	b580      	push	{r7, lr}
200144fe:	b084      	sub	sp, #16
20014500:	af00      	add	r7, sp, #0
20014502:	4603      	mov	r3, r0
20014504:	71fb      	strb	r3, [r7, #7]
20014506:	460b      	mov	r3, r1
20014508:	71bb      	strb	r3, [r7, #6]
2001450a:	4613      	mov	r3, r2
2001450c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
2001450e:	23ff      	movs	r3, #255	; 0xff
20014510:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
20014512:	2300      	movs	r3, #0
20014514:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20014516:	f24c 3050 	movw	r0, #50000	; 0xc350
2001451a:	f7ff fbe7 	bl	20013cec <FLASH_WaitForLastOperation>
2001451e:	4603      	mov	r3, r0
20014520:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
20014522:	7bbb      	ldrb	r3, [r7, #14]
20014524:	2b00      	cmp	r3, #0
20014526:	d111      	bne.n	2001454c <FLASH_OB_UserConfig+0x50>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
20014528:	4b0b      	ldr	r3, [pc, #44]	; (20014558 <FLASH_OB_UserConfig+0x5c>)
2001452a:	781b      	ldrb	r3, [r3, #0]
2001452c:	b2db      	uxtb	r3, r3
2001452e:	f003 031f 	and.w	r3, r3, #31
20014532:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
20014534:	79ba      	ldrb	r2, [r7, #6]
20014536:	7bfb      	ldrb	r3, [r7, #15]
20014538:	4313      	orrs	r3, r2
2001453a:	b2da      	uxtb	r2, r3
2001453c:	797b      	ldrb	r3, [r7, #5]
2001453e:	4313      	orrs	r3, r2
20014540:	b2da      	uxtb	r2, r3
20014542:	4905      	ldr	r1, [pc, #20]	; (20014558 <FLASH_OB_UserConfig+0x5c>)
20014544:	79fb      	ldrb	r3, [r7, #7]
20014546:	4313      	orrs	r3, r2
20014548:	b2db      	uxtb	r3, r3
2001454a:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
2001454c:	7bbb      	ldrb	r3, [r7, #14]
}
2001454e:	4618      	mov	r0, r3
20014550:	3710      	adds	r7, #16
20014552:	46bd      	mov	sp, r7
20014554:	bd80      	pop	{r7, pc}
20014556:	bf00      	nop
20014558:	40023c14 	.word	0x40023c14

2001455c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
2001455c:	b480      	push	{r7}
2001455e:	b083      	sub	sp, #12
20014560:	af00      	add	r7, sp, #0
20014562:	4603      	mov	r3, r0
20014564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
20014566:	4b0b      	ldr	r3, [pc, #44]	; (20014594 <FLASH_OB_BOR_LevelConfig+0x38>)
20014568:	781b      	ldrb	r3, [r3, #0]
2001456a:	b2db      	uxtb	r3, r3
2001456c:	4a09      	ldr	r2, [pc, #36]	; (20014594 <FLASH_OB_BOR_LevelConfig+0x38>)
2001456e:	f023 030c 	bic.w	r3, r3, #12
20014572:	b2db      	uxtb	r3, r3
20014574:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
20014576:	4b07      	ldr	r3, [pc, #28]	; (20014594 <FLASH_OB_BOR_LevelConfig+0x38>)
20014578:	781b      	ldrb	r3, [r3, #0]
2001457a:	b2da      	uxtb	r2, r3
2001457c:	4905      	ldr	r1, [pc, #20]	; (20014594 <FLASH_OB_BOR_LevelConfig+0x38>)
2001457e:	79fb      	ldrb	r3, [r7, #7]
20014580:	4313      	orrs	r3, r2
20014582:	b2db      	uxtb	r3, r3
20014584:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
20014586:	2300      	movs	r3, #0
  
}
20014588:	4618      	mov	r0, r3
2001458a:	370c      	adds	r7, #12
2001458c:	46bd      	mov	sp, r7
2001458e:	f85d 7b04 	ldr.w	r7, [sp], #4
20014592:	4770      	bx	lr
20014594:	40023c14 	.word	0x40023c14

20014598 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
20014598:	b480      	push	{r7}
2001459a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
2001459c:	4b05      	ldr	r3, [pc, #20]	; (200145b4 <FLASH_OB_GetUser+0x1c>)
2001459e:	695b      	ldr	r3, [r3, #20]
200145a0:	b2db      	uxtb	r3, r3
200145a2:	f023 031f 	bic.w	r3, r3, #31
200145a6:	b2db      	uxtb	r3, r3
}
200145a8:	4618      	mov	r0, r3
200145aa:	46bd      	mov	sp, r7
200145ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200145b0:	4770      	bx	lr
200145b2:	bf00      	nop
200145b4:	40023c00 	.word	0x40023c00

200145b8 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
200145b8:	b480      	push	{r7}
200145ba:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
200145bc:	4b03      	ldr	r3, [pc, #12]	; (200145cc <FLASH_OB_GetWRP+0x14>)
200145be:	881b      	ldrh	r3, [r3, #0]
200145c0:	b29b      	uxth	r3, r3
}
200145c2:	4618      	mov	r0, r3
200145c4:	46bd      	mov	sp, r7
200145c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200145ca:	4770      	bx	lr
200145cc:	40023c16 	.word	0x40023c16

200145d0 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
200145d0:	b480      	push	{r7}
200145d2:	b083      	sub	sp, #12
200145d4:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
200145d6:	23aa      	movs	r3, #170	; 0xaa
200145d8:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
200145da:	4b0c      	ldr	r3, [pc, #48]	; (2001460c <FLASH_OB_GetRDP+0x3c>)
200145dc:	781b      	ldrb	r3, [r3, #0]
200145de:	b2db      	uxtb	r3, r3
200145e0:	2bcc      	cmp	r3, #204	; 0xcc
200145e2:	d102      	bne.n	200145ea <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
200145e4:	23cc      	movs	r3, #204	; 0xcc
200145e6:	71fb      	strb	r3, [r7, #7]
200145e8:	e009      	b.n	200145fe <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
200145ea:	4b08      	ldr	r3, [pc, #32]	; (2001460c <FLASH_OB_GetRDP+0x3c>)
200145ec:	781b      	ldrb	r3, [r3, #0]
200145ee:	b2db      	uxtb	r3, r3
200145f0:	2baa      	cmp	r3, #170	; 0xaa
200145f2:	d102      	bne.n	200145fa <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
200145f4:	23aa      	movs	r3, #170	; 0xaa
200145f6:	71fb      	strb	r3, [r7, #7]
200145f8:	e001      	b.n	200145fe <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
200145fa:	2355      	movs	r3, #85	; 0x55
200145fc:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
200145fe:	79fb      	ldrb	r3, [r7, #7]
}
20014600:	4618      	mov	r0, r3
20014602:	370c      	adds	r7, #12
20014604:	46bd      	mov	sp, r7
20014606:	f85d 7b04 	ldr.w	r7, [sp], #4
2001460a:	4770      	bx	lr
2001460c:	40023c15 	.word	0x40023c15

20014610 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
20014610:	b480      	push	{r7}
20014612:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
20014614:	4b05      	ldr	r3, [pc, #20]	; (2001462c <FLASH_OB_GetBOR+0x1c>)
20014616:	781b      	ldrb	r3, [r3, #0]
20014618:	b2db      	uxtb	r3, r3
2001461a:	f003 030c 	and.w	r3, r3, #12
2001461e:	b2db      	uxtb	r3, r3
}
20014620:	4618      	mov	r0, r3
20014622:	46bd      	mov	sp, r7
20014624:	f85d 7b04 	ldr.w	r7, [sp], #4
20014628:	4770      	bx	lr
2001462a:	bf00      	nop
2001462c:	40023c14 	.word	0x40023c14

20014630 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
20014630:	b480      	push	{r7}
20014632:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
20014634:	4b20      	ldr	r3, [pc, #128]	; (200146b8 <FLASH_FlushCaches+0x88>)
20014636:	681b      	ldr	r3, [r3, #0]
20014638:	f403 7300 	and.w	r3, r3, #512	; 0x200
2001463c:	2b00      	cmp	r3, #0
2001463e:	d017      	beq.n	20014670 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
20014640:	4b1d      	ldr	r3, [pc, #116]	; (200146b8 <FLASH_FlushCaches+0x88>)
20014642:	681b      	ldr	r3, [r3, #0]
20014644:	4a1c      	ldr	r2, [pc, #112]	; (200146b8 <FLASH_FlushCaches+0x88>)
20014646:	f423 7300 	bic.w	r3, r3, #512	; 0x200
2001464a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
2001464c:	4b1a      	ldr	r3, [pc, #104]	; (200146b8 <FLASH_FlushCaches+0x88>)
2001464e:	681b      	ldr	r3, [r3, #0]
20014650:	4a19      	ldr	r2, [pc, #100]	; (200146b8 <FLASH_FlushCaches+0x88>)
20014652:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
20014656:	6013      	str	r3, [r2, #0]
20014658:	4b17      	ldr	r3, [pc, #92]	; (200146b8 <FLASH_FlushCaches+0x88>)
2001465a:	681b      	ldr	r3, [r3, #0]
2001465c:	4a16      	ldr	r2, [pc, #88]	; (200146b8 <FLASH_FlushCaches+0x88>)
2001465e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
20014662:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20014664:	4b14      	ldr	r3, [pc, #80]	; (200146b8 <FLASH_FlushCaches+0x88>)
20014666:	681b      	ldr	r3, [r3, #0]
20014668:	4a13      	ldr	r2, [pc, #76]	; (200146b8 <FLASH_FlushCaches+0x88>)
2001466a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2001466e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
20014670:	4b11      	ldr	r3, [pc, #68]	; (200146b8 <FLASH_FlushCaches+0x88>)
20014672:	681b      	ldr	r3, [r3, #0]
20014674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
20014678:	2b00      	cmp	r3, #0
2001467a:	d017      	beq.n	200146ac <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
2001467c:	4b0e      	ldr	r3, [pc, #56]	; (200146b8 <FLASH_FlushCaches+0x88>)
2001467e:	681b      	ldr	r3, [r3, #0]
20014680:	4a0d      	ldr	r2, [pc, #52]	; (200146b8 <FLASH_FlushCaches+0x88>)
20014682:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
20014686:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
20014688:	4b0b      	ldr	r3, [pc, #44]	; (200146b8 <FLASH_FlushCaches+0x88>)
2001468a:	681b      	ldr	r3, [r3, #0]
2001468c:	4a0a      	ldr	r2, [pc, #40]	; (200146b8 <FLASH_FlushCaches+0x88>)
2001468e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
20014692:	6013      	str	r3, [r2, #0]
20014694:	4b08      	ldr	r3, [pc, #32]	; (200146b8 <FLASH_FlushCaches+0x88>)
20014696:	681b      	ldr	r3, [r3, #0]
20014698:	4a07      	ldr	r2, [pc, #28]	; (200146b8 <FLASH_FlushCaches+0x88>)
2001469a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2001469e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
200146a0:	4b05      	ldr	r3, [pc, #20]	; (200146b8 <FLASH_FlushCaches+0x88>)
200146a2:	681b      	ldr	r3, [r3, #0]
200146a4:	4a04      	ldr	r2, [pc, #16]	; (200146b8 <FLASH_FlushCaches+0x88>)
200146a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
200146aa:	6013      	str	r3, [r2, #0]
  }
}
200146ac:	bf00      	nop
200146ae:	46bd      	mov	sp, r7
200146b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200146b4:	4770      	bx	lr
200146b6:	bf00      	nop
200146b8:	40023c00 	.word	0x40023c00

200146bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
200146bc:	b480      	push	{r7}
200146be:	b089      	sub	sp, #36	; 0x24
200146c0:	af00      	add	r7, sp, #0
200146c2:	6078      	str	r0, [r7, #4]
200146c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
200146c6:	2300      	movs	r3, #0
200146c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
200146ca:	2300      	movs	r3, #0
200146cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
200146ce:	2300      	movs	r3, #0
200146d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
200146d2:	2300      	movs	r3, #0
200146d4:	61fb      	str	r3, [r7, #28]
200146d6:	e165      	b.n	200149a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
200146d8:	2201      	movs	r2, #1
200146da:	69fb      	ldr	r3, [r7, #28]
200146dc:	fa02 f303 	lsl.w	r3, r2, r3
200146e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
200146e2:	683b      	ldr	r3, [r7, #0]
200146e4:	681b      	ldr	r3, [r3, #0]
200146e6:	697a      	ldr	r2, [r7, #20]
200146e8:	4013      	ands	r3, r2
200146ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
200146ec:	693a      	ldr	r2, [r7, #16]
200146ee:	697b      	ldr	r3, [r7, #20]
200146f0:	429a      	cmp	r2, r3
200146f2:	f040 8154 	bne.w	2001499e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
200146f6:	683b      	ldr	r3, [r7, #0]
200146f8:	685b      	ldr	r3, [r3, #4]
200146fa:	2b01      	cmp	r3, #1
200146fc:	d00b      	beq.n	20014716 <HAL_GPIO_Init+0x5a>
200146fe:	683b      	ldr	r3, [r7, #0]
20014700:	685b      	ldr	r3, [r3, #4]
20014702:	2b02      	cmp	r3, #2
20014704:	d007      	beq.n	20014716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
20014706:	683b      	ldr	r3, [r7, #0]
20014708:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2001470a:	2b11      	cmp	r3, #17
2001470c:	d003      	beq.n	20014716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2001470e:	683b      	ldr	r3, [r7, #0]
20014710:	685b      	ldr	r3, [r3, #4]
20014712:	2b12      	cmp	r3, #18
20014714:	d130      	bne.n	20014778 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
20014716:	687b      	ldr	r3, [r7, #4]
20014718:	689b      	ldr	r3, [r3, #8]
2001471a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2001471c:	69fb      	ldr	r3, [r7, #28]
2001471e:	005b      	lsls	r3, r3, #1
20014720:	2203      	movs	r2, #3
20014722:	fa02 f303 	lsl.w	r3, r2, r3
20014726:	43db      	mvns	r3, r3
20014728:	69ba      	ldr	r2, [r7, #24]
2001472a:	4013      	ands	r3, r2
2001472c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2001472e:	683b      	ldr	r3, [r7, #0]
20014730:	68da      	ldr	r2, [r3, #12]
20014732:	69fb      	ldr	r3, [r7, #28]
20014734:	005b      	lsls	r3, r3, #1
20014736:	fa02 f303 	lsl.w	r3, r2, r3
2001473a:	69ba      	ldr	r2, [r7, #24]
2001473c:	4313      	orrs	r3, r2
2001473e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20014740:	687b      	ldr	r3, [r7, #4]
20014742:	69ba      	ldr	r2, [r7, #24]
20014744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
20014746:	687b      	ldr	r3, [r7, #4]
20014748:	685b      	ldr	r3, [r3, #4]
2001474a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
2001474c:	2201      	movs	r2, #1
2001474e:	69fb      	ldr	r3, [r7, #28]
20014750:	fa02 f303 	lsl.w	r3, r2, r3
20014754:	43db      	mvns	r3, r3
20014756:	69ba      	ldr	r2, [r7, #24]
20014758:	4013      	ands	r3, r2
2001475a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
2001475c:	683b      	ldr	r3, [r7, #0]
2001475e:	685b      	ldr	r3, [r3, #4]
20014760:	091b      	lsrs	r3, r3, #4
20014762:	f003 0201 	and.w	r2, r3, #1
20014766:	69fb      	ldr	r3, [r7, #28]
20014768:	fa02 f303 	lsl.w	r3, r2, r3
2001476c:	69ba      	ldr	r2, [r7, #24]
2001476e:	4313      	orrs	r3, r2
20014770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
20014772:	687b      	ldr	r3, [r7, #4]
20014774:	69ba      	ldr	r2, [r7, #24]
20014776:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
20014778:	687b      	ldr	r3, [r7, #4]
2001477a:	68db      	ldr	r3, [r3, #12]
2001477c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2001477e:	69fb      	ldr	r3, [r7, #28]
20014780:	005b      	lsls	r3, r3, #1
20014782:	2203      	movs	r2, #3
20014784:	fa02 f303 	lsl.w	r3, r2, r3
20014788:	43db      	mvns	r3, r3
2001478a:	69ba      	ldr	r2, [r7, #24]
2001478c:	4013      	ands	r3, r2
2001478e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
20014790:	683b      	ldr	r3, [r7, #0]
20014792:	689a      	ldr	r2, [r3, #8]
20014794:	69fb      	ldr	r3, [r7, #28]
20014796:	005b      	lsls	r3, r3, #1
20014798:	fa02 f303 	lsl.w	r3, r2, r3
2001479c:	69ba      	ldr	r2, [r7, #24]
2001479e:	4313      	orrs	r3, r2
200147a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
200147a2:	687b      	ldr	r3, [r7, #4]
200147a4:	69ba      	ldr	r2, [r7, #24]
200147a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
200147a8:	683b      	ldr	r3, [r7, #0]
200147aa:	685b      	ldr	r3, [r3, #4]
200147ac:	2b02      	cmp	r3, #2
200147ae:	d003      	beq.n	200147b8 <HAL_GPIO_Init+0xfc>
200147b0:	683b      	ldr	r3, [r7, #0]
200147b2:	685b      	ldr	r3, [r3, #4]
200147b4:	2b12      	cmp	r3, #18
200147b6:	d123      	bne.n	20014800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
200147b8:	69fb      	ldr	r3, [r7, #28]
200147ba:	08da      	lsrs	r2, r3, #3
200147bc:	687b      	ldr	r3, [r7, #4]
200147be:	3208      	adds	r2, #8
200147c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200147c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
200147c6:	69fb      	ldr	r3, [r7, #28]
200147c8:	f003 0307 	and.w	r3, r3, #7
200147cc:	009b      	lsls	r3, r3, #2
200147ce:	220f      	movs	r2, #15
200147d0:	fa02 f303 	lsl.w	r3, r2, r3
200147d4:	43db      	mvns	r3, r3
200147d6:	69ba      	ldr	r2, [r7, #24]
200147d8:	4013      	ands	r3, r2
200147da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
200147dc:	683b      	ldr	r3, [r7, #0]
200147de:	691a      	ldr	r2, [r3, #16]
200147e0:	69fb      	ldr	r3, [r7, #28]
200147e2:	f003 0307 	and.w	r3, r3, #7
200147e6:	009b      	lsls	r3, r3, #2
200147e8:	fa02 f303 	lsl.w	r3, r2, r3
200147ec:	69ba      	ldr	r2, [r7, #24]
200147ee:	4313      	orrs	r3, r2
200147f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
200147f2:	69fb      	ldr	r3, [r7, #28]
200147f4:	08da      	lsrs	r2, r3, #3
200147f6:	687b      	ldr	r3, [r7, #4]
200147f8:	3208      	adds	r2, #8
200147fa:	69b9      	ldr	r1, [r7, #24]
200147fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20014800:	687b      	ldr	r3, [r7, #4]
20014802:	681b      	ldr	r3, [r3, #0]
20014804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
20014806:	69fb      	ldr	r3, [r7, #28]
20014808:	005b      	lsls	r3, r3, #1
2001480a:	2203      	movs	r2, #3
2001480c:	fa02 f303 	lsl.w	r3, r2, r3
20014810:	43db      	mvns	r3, r3
20014812:	69ba      	ldr	r2, [r7, #24]
20014814:	4013      	ands	r3, r2
20014816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20014818:	683b      	ldr	r3, [r7, #0]
2001481a:	685b      	ldr	r3, [r3, #4]
2001481c:	f003 0203 	and.w	r2, r3, #3
20014820:	69fb      	ldr	r3, [r7, #28]
20014822:	005b      	lsls	r3, r3, #1
20014824:	fa02 f303 	lsl.w	r3, r2, r3
20014828:	69ba      	ldr	r2, [r7, #24]
2001482a:	4313      	orrs	r3, r2
2001482c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2001482e:	687b      	ldr	r3, [r7, #4]
20014830:	69ba      	ldr	r2, [r7, #24]
20014832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
20014834:	683b      	ldr	r3, [r7, #0]
20014836:	685b      	ldr	r3, [r3, #4]
20014838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2001483c:	2b00      	cmp	r3, #0
2001483e:	f000 80ae 	beq.w	2001499e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20014842:	2300      	movs	r3, #0
20014844:	60fb      	str	r3, [r7, #12]
20014846:	4b5c      	ldr	r3, [pc, #368]	; (200149b8 <HAL_GPIO_Init+0x2fc>)
20014848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2001484a:	4a5b      	ldr	r2, [pc, #364]	; (200149b8 <HAL_GPIO_Init+0x2fc>)
2001484c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20014850:	6453      	str	r3, [r2, #68]	; 0x44
20014852:	4b59      	ldr	r3, [pc, #356]	; (200149b8 <HAL_GPIO_Init+0x2fc>)
20014854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20014856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2001485a:	60fb      	str	r3, [r7, #12]
2001485c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2001485e:	4a57      	ldr	r2, [pc, #348]	; (200149bc <HAL_GPIO_Init+0x300>)
20014860:	69fb      	ldr	r3, [r7, #28]
20014862:	089b      	lsrs	r3, r3, #2
20014864:	3302      	adds	r3, #2
20014866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2001486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
2001486c:	69fb      	ldr	r3, [r7, #28]
2001486e:	f003 0303 	and.w	r3, r3, #3
20014872:	009b      	lsls	r3, r3, #2
20014874:	220f      	movs	r2, #15
20014876:	fa02 f303 	lsl.w	r3, r2, r3
2001487a:	43db      	mvns	r3, r3
2001487c:	69ba      	ldr	r2, [r7, #24]
2001487e:	4013      	ands	r3, r2
20014880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20014882:	687b      	ldr	r3, [r7, #4]
20014884:	4a4e      	ldr	r2, [pc, #312]	; (200149c0 <HAL_GPIO_Init+0x304>)
20014886:	4293      	cmp	r3, r2
20014888:	d025      	beq.n	200148d6 <HAL_GPIO_Init+0x21a>
2001488a:	687b      	ldr	r3, [r7, #4]
2001488c:	4a4d      	ldr	r2, [pc, #308]	; (200149c4 <HAL_GPIO_Init+0x308>)
2001488e:	4293      	cmp	r3, r2
20014890:	d01f      	beq.n	200148d2 <HAL_GPIO_Init+0x216>
20014892:	687b      	ldr	r3, [r7, #4]
20014894:	4a4c      	ldr	r2, [pc, #304]	; (200149c8 <HAL_GPIO_Init+0x30c>)
20014896:	4293      	cmp	r3, r2
20014898:	d019      	beq.n	200148ce <HAL_GPIO_Init+0x212>
2001489a:	687b      	ldr	r3, [r7, #4]
2001489c:	4a4b      	ldr	r2, [pc, #300]	; (200149cc <HAL_GPIO_Init+0x310>)
2001489e:	4293      	cmp	r3, r2
200148a0:	d013      	beq.n	200148ca <HAL_GPIO_Init+0x20e>
200148a2:	687b      	ldr	r3, [r7, #4]
200148a4:	4a4a      	ldr	r2, [pc, #296]	; (200149d0 <HAL_GPIO_Init+0x314>)
200148a6:	4293      	cmp	r3, r2
200148a8:	d00d      	beq.n	200148c6 <HAL_GPIO_Init+0x20a>
200148aa:	687b      	ldr	r3, [r7, #4]
200148ac:	4a49      	ldr	r2, [pc, #292]	; (200149d4 <HAL_GPIO_Init+0x318>)
200148ae:	4293      	cmp	r3, r2
200148b0:	d007      	beq.n	200148c2 <HAL_GPIO_Init+0x206>
200148b2:	687b      	ldr	r3, [r7, #4]
200148b4:	4a48      	ldr	r2, [pc, #288]	; (200149d8 <HAL_GPIO_Init+0x31c>)
200148b6:	4293      	cmp	r3, r2
200148b8:	d101      	bne.n	200148be <HAL_GPIO_Init+0x202>
200148ba:	2306      	movs	r3, #6
200148bc:	e00c      	b.n	200148d8 <HAL_GPIO_Init+0x21c>
200148be:	2307      	movs	r3, #7
200148c0:	e00a      	b.n	200148d8 <HAL_GPIO_Init+0x21c>
200148c2:	2305      	movs	r3, #5
200148c4:	e008      	b.n	200148d8 <HAL_GPIO_Init+0x21c>
200148c6:	2304      	movs	r3, #4
200148c8:	e006      	b.n	200148d8 <HAL_GPIO_Init+0x21c>
200148ca:	2303      	movs	r3, #3
200148cc:	e004      	b.n	200148d8 <HAL_GPIO_Init+0x21c>
200148ce:	2302      	movs	r3, #2
200148d0:	e002      	b.n	200148d8 <HAL_GPIO_Init+0x21c>
200148d2:	2301      	movs	r3, #1
200148d4:	e000      	b.n	200148d8 <HAL_GPIO_Init+0x21c>
200148d6:	2300      	movs	r3, #0
200148d8:	69fa      	ldr	r2, [r7, #28]
200148da:	f002 0203 	and.w	r2, r2, #3
200148de:	0092      	lsls	r2, r2, #2
200148e0:	4093      	lsls	r3, r2
200148e2:	69ba      	ldr	r2, [r7, #24]
200148e4:	4313      	orrs	r3, r2
200148e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
200148e8:	4934      	ldr	r1, [pc, #208]	; (200149bc <HAL_GPIO_Init+0x300>)
200148ea:	69fb      	ldr	r3, [r7, #28]
200148ec:	089b      	lsrs	r3, r3, #2
200148ee:	3302      	adds	r3, #2
200148f0:	69ba      	ldr	r2, [r7, #24]
200148f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
200148f6:	4b39      	ldr	r3, [pc, #228]	; (200149dc <HAL_GPIO_Init+0x320>)
200148f8:	681b      	ldr	r3, [r3, #0]
200148fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
200148fc:	693b      	ldr	r3, [r7, #16]
200148fe:	43db      	mvns	r3, r3
20014900:	69ba      	ldr	r2, [r7, #24]
20014902:	4013      	ands	r3, r2
20014904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
20014906:	683b      	ldr	r3, [r7, #0]
20014908:	685b      	ldr	r3, [r3, #4]
2001490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2001490e:	2b00      	cmp	r3, #0
20014910:	d003      	beq.n	2001491a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
20014912:	69ba      	ldr	r2, [r7, #24]
20014914:	693b      	ldr	r3, [r7, #16]
20014916:	4313      	orrs	r3, r2
20014918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
2001491a:	4a30      	ldr	r2, [pc, #192]	; (200149dc <HAL_GPIO_Init+0x320>)
2001491c:	69bb      	ldr	r3, [r7, #24]
2001491e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
20014920:	4b2e      	ldr	r3, [pc, #184]	; (200149dc <HAL_GPIO_Init+0x320>)
20014922:	685b      	ldr	r3, [r3, #4]
20014924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20014926:	693b      	ldr	r3, [r7, #16]
20014928:	43db      	mvns	r3, r3
2001492a:	69ba      	ldr	r2, [r7, #24]
2001492c:	4013      	ands	r3, r2
2001492e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
20014930:	683b      	ldr	r3, [r7, #0]
20014932:	685b      	ldr	r3, [r3, #4]
20014934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20014938:	2b00      	cmp	r3, #0
2001493a:	d003      	beq.n	20014944 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
2001493c:	69ba      	ldr	r2, [r7, #24]
2001493e:	693b      	ldr	r3, [r7, #16]
20014940:	4313      	orrs	r3, r2
20014942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20014944:	4a25      	ldr	r2, [pc, #148]	; (200149dc <HAL_GPIO_Init+0x320>)
20014946:	69bb      	ldr	r3, [r7, #24]
20014948:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
2001494a:	4b24      	ldr	r3, [pc, #144]	; (200149dc <HAL_GPIO_Init+0x320>)
2001494c:	689b      	ldr	r3, [r3, #8]
2001494e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20014950:	693b      	ldr	r3, [r7, #16]
20014952:	43db      	mvns	r3, r3
20014954:	69ba      	ldr	r2, [r7, #24]
20014956:	4013      	ands	r3, r2
20014958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
2001495a:	683b      	ldr	r3, [r7, #0]
2001495c:	685b      	ldr	r3, [r3, #4]
2001495e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
20014962:	2b00      	cmp	r3, #0
20014964:	d003      	beq.n	2001496e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
20014966:	69ba      	ldr	r2, [r7, #24]
20014968:	693b      	ldr	r3, [r7, #16]
2001496a:	4313      	orrs	r3, r2
2001496c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
2001496e:	4a1b      	ldr	r2, [pc, #108]	; (200149dc <HAL_GPIO_Init+0x320>)
20014970:	69bb      	ldr	r3, [r7, #24]
20014972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20014974:	4b19      	ldr	r3, [pc, #100]	; (200149dc <HAL_GPIO_Init+0x320>)
20014976:	68db      	ldr	r3, [r3, #12]
20014978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2001497a:	693b      	ldr	r3, [r7, #16]
2001497c:	43db      	mvns	r3, r3
2001497e:	69ba      	ldr	r2, [r7, #24]
20014980:	4013      	ands	r3, r2
20014982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
20014984:	683b      	ldr	r3, [r7, #0]
20014986:	685b      	ldr	r3, [r3, #4]
20014988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2001498c:	2b00      	cmp	r3, #0
2001498e:	d003      	beq.n	20014998 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
20014990:	69ba      	ldr	r2, [r7, #24]
20014992:	693b      	ldr	r3, [r7, #16]
20014994:	4313      	orrs	r3, r2
20014996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20014998:	4a10      	ldr	r2, [pc, #64]	; (200149dc <HAL_GPIO_Init+0x320>)
2001499a:	69bb      	ldr	r3, [r7, #24]
2001499c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
2001499e:	69fb      	ldr	r3, [r7, #28]
200149a0:	3301      	adds	r3, #1
200149a2:	61fb      	str	r3, [r7, #28]
200149a4:	69fb      	ldr	r3, [r7, #28]
200149a6:	2b0f      	cmp	r3, #15
200149a8:	f67f ae96 	bls.w	200146d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
200149ac:	bf00      	nop
200149ae:	3724      	adds	r7, #36	; 0x24
200149b0:	46bd      	mov	sp, r7
200149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200149b6:	4770      	bx	lr
200149b8:	40023800 	.word	0x40023800
200149bc:	40013800 	.word	0x40013800
200149c0:	40020000 	.word	0x40020000
200149c4:	40020400 	.word	0x40020400
200149c8:	40020800 	.word	0x40020800
200149cc:	40020c00 	.word	0x40020c00
200149d0:	40021000 	.word	0x40021000
200149d4:	40021400 	.word	0x40021400
200149d8:	40021800 	.word	0x40021800
200149dc:	40013c00 	.word	0x40013c00

200149e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
200149e0:	b480      	push	{r7}
200149e2:	b087      	sub	sp, #28
200149e4:	af00      	add	r7, sp, #0
200149e6:	6078      	str	r0, [r7, #4]
200149e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
200149ea:	2300      	movs	r3, #0
200149ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
200149ee:	2300      	movs	r3, #0
200149f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
200149f2:	2300      	movs	r3, #0
200149f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
200149f6:	2300      	movs	r3, #0
200149f8:	617b      	str	r3, [r7, #20]
200149fa:	e0c7      	b.n	20014b8c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
200149fc:	2201      	movs	r2, #1
200149fe:	697b      	ldr	r3, [r7, #20]
20014a00:	fa02 f303 	lsl.w	r3, r2, r3
20014a04:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
20014a06:	683a      	ldr	r2, [r7, #0]
20014a08:	693b      	ldr	r3, [r7, #16]
20014a0a:	4013      	ands	r3, r2
20014a0c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
20014a0e:	68fa      	ldr	r2, [r7, #12]
20014a10:	693b      	ldr	r3, [r7, #16]
20014a12:	429a      	cmp	r2, r3
20014a14:	f040 80b7 	bne.w	20014b86 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
20014a18:	4a61      	ldr	r2, [pc, #388]	; (20014ba0 <HAL_GPIO_DeInit+0x1c0>)
20014a1a:	697b      	ldr	r3, [r7, #20]
20014a1c:	089b      	lsrs	r3, r3, #2
20014a1e:	3302      	adds	r3, #2
20014a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20014a24:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
20014a26:	697b      	ldr	r3, [r7, #20]
20014a28:	f003 0303 	and.w	r3, r3, #3
20014a2c:	009b      	lsls	r3, r3, #2
20014a2e:	220f      	movs	r2, #15
20014a30:	fa02 f303 	lsl.w	r3, r2, r3
20014a34:	68ba      	ldr	r2, [r7, #8]
20014a36:	4013      	ands	r3, r2
20014a38:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
20014a3a:	687b      	ldr	r3, [r7, #4]
20014a3c:	4a59      	ldr	r2, [pc, #356]	; (20014ba4 <HAL_GPIO_DeInit+0x1c4>)
20014a3e:	4293      	cmp	r3, r2
20014a40:	d025      	beq.n	20014a8e <HAL_GPIO_DeInit+0xae>
20014a42:	687b      	ldr	r3, [r7, #4]
20014a44:	4a58      	ldr	r2, [pc, #352]	; (20014ba8 <HAL_GPIO_DeInit+0x1c8>)
20014a46:	4293      	cmp	r3, r2
20014a48:	d01f      	beq.n	20014a8a <HAL_GPIO_DeInit+0xaa>
20014a4a:	687b      	ldr	r3, [r7, #4]
20014a4c:	4a57      	ldr	r2, [pc, #348]	; (20014bac <HAL_GPIO_DeInit+0x1cc>)
20014a4e:	4293      	cmp	r3, r2
20014a50:	d019      	beq.n	20014a86 <HAL_GPIO_DeInit+0xa6>
20014a52:	687b      	ldr	r3, [r7, #4]
20014a54:	4a56      	ldr	r2, [pc, #344]	; (20014bb0 <HAL_GPIO_DeInit+0x1d0>)
20014a56:	4293      	cmp	r3, r2
20014a58:	d013      	beq.n	20014a82 <HAL_GPIO_DeInit+0xa2>
20014a5a:	687b      	ldr	r3, [r7, #4]
20014a5c:	4a55      	ldr	r2, [pc, #340]	; (20014bb4 <HAL_GPIO_DeInit+0x1d4>)
20014a5e:	4293      	cmp	r3, r2
20014a60:	d00d      	beq.n	20014a7e <HAL_GPIO_DeInit+0x9e>
20014a62:	687b      	ldr	r3, [r7, #4]
20014a64:	4a54      	ldr	r2, [pc, #336]	; (20014bb8 <HAL_GPIO_DeInit+0x1d8>)
20014a66:	4293      	cmp	r3, r2
20014a68:	d007      	beq.n	20014a7a <HAL_GPIO_DeInit+0x9a>
20014a6a:	687b      	ldr	r3, [r7, #4]
20014a6c:	4a53      	ldr	r2, [pc, #332]	; (20014bbc <HAL_GPIO_DeInit+0x1dc>)
20014a6e:	4293      	cmp	r3, r2
20014a70:	d101      	bne.n	20014a76 <HAL_GPIO_DeInit+0x96>
20014a72:	2306      	movs	r3, #6
20014a74:	e00c      	b.n	20014a90 <HAL_GPIO_DeInit+0xb0>
20014a76:	2307      	movs	r3, #7
20014a78:	e00a      	b.n	20014a90 <HAL_GPIO_DeInit+0xb0>
20014a7a:	2305      	movs	r3, #5
20014a7c:	e008      	b.n	20014a90 <HAL_GPIO_DeInit+0xb0>
20014a7e:	2304      	movs	r3, #4
20014a80:	e006      	b.n	20014a90 <HAL_GPIO_DeInit+0xb0>
20014a82:	2303      	movs	r3, #3
20014a84:	e004      	b.n	20014a90 <HAL_GPIO_DeInit+0xb0>
20014a86:	2302      	movs	r3, #2
20014a88:	e002      	b.n	20014a90 <HAL_GPIO_DeInit+0xb0>
20014a8a:	2301      	movs	r3, #1
20014a8c:	e000      	b.n	20014a90 <HAL_GPIO_DeInit+0xb0>
20014a8e:	2300      	movs	r3, #0
20014a90:	697a      	ldr	r2, [r7, #20]
20014a92:	f002 0203 	and.w	r2, r2, #3
20014a96:	0092      	lsls	r2, r2, #2
20014a98:	4093      	lsls	r3, r2
20014a9a:	68ba      	ldr	r2, [r7, #8]
20014a9c:	429a      	cmp	r2, r3
20014a9e:	d132      	bne.n	20014b06 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
20014aa0:	4b47      	ldr	r3, [pc, #284]	; (20014bc0 <HAL_GPIO_DeInit+0x1e0>)
20014aa2:	681a      	ldr	r2, [r3, #0]
20014aa4:	68fb      	ldr	r3, [r7, #12]
20014aa6:	43db      	mvns	r3, r3
20014aa8:	4945      	ldr	r1, [pc, #276]	; (20014bc0 <HAL_GPIO_DeInit+0x1e0>)
20014aaa:	4013      	ands	r3, r2
20014aac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
20014aae:	4b44      	ldr	r3, [pc, #272]	; (20014bc0 <HAL_GPIO_DeInit+0x1e0>)
20014ab0:	685a      	ldr	r2, [r3, #4]
20014ab2:	68fb      	ldr	r3, [r7, #12]
20014ab4:	43db      	mvns	r3, r3
20014ab6:	4942      	ldr	r1, [pc, #264]	; (20014bc0 <HAL_GPIO_DeInit+0x1e0>)
20014ab8:	4013      	ands	r3, r2
20014aba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
20014abc:	4b40      	ldr	r3, [pc, #256]	; (20014bc0 <HAL_GPIO_DeInit+0x1e0>)
20014abe:	689a      	ldr	r2, [r3, #8]
20014ac0:	68fb      	ldr	r3, [r7, #12]
20014ac2:	43db      	mvns	r3, r3
20014ac4:	493e      	ldr	r1, [pc, #248]	; (20014bc0 <HAL_GPIO_DeInit+0x1e0>)
20014ac6:	4013      	ands	r3, r2
20014ac8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
20014aca:	4b3d      	ldr	r3, [pc, #244]	; (20014bc0 <HAL_GPIO_DeInit+0x1e0>)
20014acc:	68da      	ldr	r2, [r3, #12]
20014ace:	68fb      	ldr	r3, [r7, #12]
20014ad0:	43db      	mvns	r3, r3
20014ad2:	493b      	ldr	r1, [pc, #236]	; (20014bc0 <HAL_GPIO_DeInit+0x1e0>)
20014ad4:	4013      	ands	r3, r2
20014ad6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
20014ad8:	697b      	ldr	r3, [r7, #20]
20014ada:	f003 0303 	and.w	r3, r3, #3
20014ade:	009b      	lsls	r3, r3, #2
20014ae0:	220f      	movs	r2, #15
20014ae2:	fa02 f303 	lsl.w	r3, r2, r3
20014ae6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
20014ae8:	4a2d      	ldr	r2, [pc, #180]	; (20014ba0 <HAL_GPIO_DeInit+0x1c0>)
20014aea:	697b      	ldr	r3, [r7, #20]
20014aec:	089b      	lsrs	r3, r3, #2
20014aee:	3302      	adds	r3, #2
20014af0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
20014af4:	68bb      	ldr	r3, [r7, #8]
20014af6:	43da      	mvns	r2, r3
20014af8:	4829      	ldr	r0, [pc, #164]	; (20014ba0 <HAL_GPIO_DeInit+0x1c0>)
20014afa:	697b      	ldr	r3, [r7, #20]
20014afc:	089b      	lsrs	r3, r3, #2
20014afe:	400a      	ands	r2, r1
20014b00:	3302      	adds	r3, #2
20014b02:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
20014b06:	687b      	ldr	r3, [r7, #4]
20014b08:	681a      	ldr	r2, [r3, #0]
20014b0a:	697b      	ldr	r3, [r7, #20]
20014b0c:	005b      	lsls	r3, r3, #1
20014b0e:	2103      	movs	r1, #3
20014b10:	fa01 f303 	lsl.w	r3, r1, r3
20014b14:	43db      	mvns	r3, r3
20014b16:	401a      	ands	r2, r3
20014b18:	687b      	ldr	r3, [r7, #4]
20014b1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20014b1c:	697b      	ldr	r3, [r7, #20]
20014b1e:	08da      	lsrs	r2, r3, #3
20014b20:	687b      	ldr	r3, [r7, #4]
20014b22:	3208      	adds	r2, #8
20014b24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
20014b28:	697b      	ldr	r3, [r7, #20]
20014b2a:	f003 0307 	and.w	r3, r3, #7
20014b2e:	009b      	lsls	r3, r3, #2
20014b30:	220f      	movs	r2, #15
20014b32:	fa02 f303 	lsl.w	r3, r2, r3
20014b36:	43db      	mvns	r3, r3
20014b38:	697a      	ldr	r2, [r7, #20]
20014b3a:	08d2      	lsrs	r2, r2, #3
20014b3c:	4019      	ands	r1, r3
20014b3e:	687b      	ldr	r3, [r7, #4]
20014b40:	3208      	adds	r2, #8
20014b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
20014b46:	687b      	ldr	r3, [r7, #4]
20014b48:	68da      	ldr	r2, [r3, #12]
20014b4a:	697b      	ldr	r3, [r7, #20]
20014b4c:	005b      	lsls	r3, r3, #1
20014b4e:	2103      	movs	r1, #3
20014b50:	fa01 f303 	lsl.w	r3, r1, r3
20014b54:	43db      	mvns	r3, r3
20014b56:	401a      	ands	r2, r3
20014b58:	687b      	ldr	r3, [r7, #4]
20014b5a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
20014b5c:	687b      	ldr	r3, [r7, #4]
20014b5e:	685a      	ldr	r2, [r3, #4]
20014b60:	2101      	movs	r1, #1
20014b62:	697b      	ldr	r3, [r7, #20]
20014b64:	fa01 f303 	lsl.w	r3, r1, r3
20014b68:	43db      	mvns	r3, r3
20014b6a:	401a      	ands	r2, r3
20014b6c:	687b      	ldr	r3, [r7, #4]
20014b6e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20014b70:	687b      	ldr	r3, [r7, #4]
20014b72:	689a      	ldr	r2, [r3, #8]
20014b74:	697b      	ldr	r3, [r7, #20]
20014b76:	005b      	lsls	r3, r3, #1
20014b78:	2103      	movs	r1, #3
20014b7a:	fa01 f303 	lsl.w	r3, r1, r3
20014b7e:	43db      	mvns	r3, r3
20014b80:	401a      	ands	r2, r3
20014b82:	687b      	ldr	r3, [r7, #4]
20014b84:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
20014b86:	697b      	ldr	r3, [r7, #20]
20014b88:	3301      	adds	r3, #1
20014b8a:	617b      	str	r3, [r7, #20]
20014b8c:	697b      	ldr	r3, [r7, #20]
20014b8e:	2b0f      	cmp	r3, #15
20014b90:	f67f af34 	bls.w	200149fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
20014b94:	bf00      	nop
20014b96:	371c      	adds	r7, #28
20014b98:	46bd      	mov	sp, r7
20014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
20014b9e:	4770      	bx	lr
20014ba0:	40013800 	.word	0x40013800
20014ba4:	40020000 	.word	0x40020000
20014ba8:	40020400 	.word	0x40020400
20014bac:	40020800 	.word	0x40020800
20014bb0:	40020c00 	.word	0x40020c00
20014bb4:	40021000 	.word	0x40021000
20014bb8:	40021400 	.word	0x40021400
20014bbc:	40021800 	.word	0x40021800
20014bc0:	40013c00 	.word	0x40013c00

20014bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20014bc4:	b480      	push	{r7}
20014bc6:	b085      	sub	sp, #20
20014bc8:	af00      	add	r7, sp, #0
20014bca:	6078      	str	r0, [r7, #4]
20014bcc:	460b      	mov	r3, r1
20014bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
20014bd0:	687b      	ldr	r3, [r7, #4]
20014bd2:	691a      	ldr	r2, [r3, #16]
20014bd4:	887b      	ldrh	r3, [r7, #2]
20014bd6:	4013      	ands	r3, r2
20014bd8:	2b00      	cmp	r3, #0
20014bda:	d002      	beq.n	20014be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
20014bdc:	2301      	movs	r3, #1
20014bde:	73fb      	strb	r3, [r7, #15]
20014be0:	e001      	b.n	20014be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
20014be2:	2300      	movs	r3, #0
20014be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
20014be6:	7bfb      	ldrb	r3, [r7, #15]
}
20014be8:	4618      	mov	r0, r3
20014bea:	3714      	adds	r7, #20
20014bec:	46bd      	mov	sp, r7
20014bee:	f85d 7b04 	ldr.w	r7, [sp], #4
20014bf2:	4770      	bx	lr

20014bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20014bf4:	b480      	push	{r7}
20014bf6:	b083      	sub	sp, #12
20014bf8:	af00      	add	r7, sp, #0
20014bfa:	6078      	str	r0, [r7, #4]
20014bfc:	460b      	mov	r3, r1
20014bfe:	807b      	strh	r3, [r7, #2]
20014c00:	4613      	mov	r3, r2
20014c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20014c04:	787b      	ldrb	r3, [r7, #1]
20014c06:	2b00      	cmp	r3, #0
20014c08:	d003      	beq.n	20014c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20014c0a:	887a      	ldrh	r2, [r7, #2]
20014c0c:	687b      	ldr	r3, [r7, #4]
20014c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
20014c10:	e003      	b.n	20014c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20014c12:	887b      	ldrh	r3, [r7, #2]
20014c14:	041a      	lsls	r2, r3, #16
20014c16:	687b      	ldr	r3, [r7, #4]
20014c18:	619a      	str	r2, [r3, #24]
}
20014c1a:	bf00      	nop
20014c1c:	370c      	adds	r7, #12
20014c1e:	46bd      	mov	sp, r7
20014c20:	f85d 7b04 	ldr.w	r7, [sp], #4
20014c24:	4770      	bx	lr

20014c26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20014c26:	b480      	push	{r7}
20014c28:	b083      	sub	sp, #12
20014c2a:	af00      	add	r7, sp, #0
20014c2c:	6078      	str	r0, [r7, #4]
20014c2e:	460b      	mov	r3, r1
20014c30:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
20014c32:	687b      	ldr	r3, [r7, #4]
20014c34:	695a      	ldr	r2, [r3, #20]
20014c36:	887b      	ldrh	r3, [r7, #2]
20014c38:	401a      	ands	r2, r3
20014c3a:	887b      	ldrh	r3, [r7, #2]
20014c3c:	429a      	cmp	r2, r3
20014c3e:	d104      	bne.n	20014c4a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
20014c40:	887b      	ldrh	r3, [r7, #2]
20014c42:	041a      	lsls	r2, r3, #16
20014c44:	687b      	ldr	r3, [r7, #4]
20014c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
20014c48:	e002      	b.n	20014c50 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
20014c4a:	887a      	ldrh	r2, [r7, #2]
20014c4c:	687b      	ldr	r3, [r7, #4]
20014c4e:	619a      	str	r2, [r3, #24]
}
20014c50:	bf00      	nop
20014c52:	370c      	adds	r7, #12
20014c54:	46bd      	mov	sp, r7
20014c56:	f85d 7b04 	ldr.w	r7, [sp], #4
20014c5a:	4770      	bx	lr

20014c5c <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20014c5c:	b480      	push	{r7}
20014c5e:	b085      	sub	sp, #20
20014c60:	af00      	add	r7, sp, #0
20014c62:	6078      	str	r0, [r7, #4]
20014c64:	460b      	mov	r3, r1
20014c66:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
20014c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20014c6c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
20014c6e:	887a      	ldrh	r2, [r7, #2]
20014c70:	68fb      	ldr	r3, [r7, #12]
20014c72:	4313      	orrs	r3, r2
20014c74:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20014c76:	68fa      	ldr	r2, [r7, #12]
20014c78:	687b      	ldr	r3, [r7, #4]
20014c7a:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
20014c7c:	887a      	ldrh	r2, [r7, #2]
20014c7e:	687b      	ldr	r3, [r7, #4]
20014c80:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20014c82:	68fa      	ldr	r2, [r7, #12]
20014c84:	687b      	ldr	r3, [r7, #4]
20014c86:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
20014c88:	687b      	ldr	r3, [r7, #4]
20014c8a:	69db      	ldr	r3, [r3, #28]
20014c8c:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
20014c8e:	687b      	ldr	r3, [r7, #4]
20014c90:	69db      	ldr	r3, [r3, #28]
20014c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20014c96:	2b00      	cmp	r3, #0
20014c98:	d001      	beq.n	20014c9e <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
20014c9a:	2300      	movs	r3, #0
20014c9c:	e000      	b.n	20014ca0 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
20014c9e:	2301      	movs	r3, #1
  }
}
20014ca0:	4618      	mov	r0, r3
20014ca2:	3714      	adds	r7, #20
20014ca4:	46bd      	mov	sp, r7
20014ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
20014caa:	4770      	bx	lr

20014cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
20014cac:	b580      	push	{r7, lr}
20014cae:	b082      	sub	sp, #8
20014cb0:	af00      	add	r7, sp, #0
20014cb2:	4603      	mov	r3, r0
20014cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
20014cb6:	4b08      	ldr	r3, [pc, #32]	; (20014cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
20014cb8:	695a      	ldr	r2, [r3, #20]
20014cba:	88fb      	ldrh	r3, [r7, #6]
20014cbc:	4013      	ands	r3, r2
20014cbe:	2b00      	cmp	r3, #0
20014cc0:	d006      	beq.n	20014cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
20014cc2:	4a05      	ldr	r2, [pc, #20]	; (20014cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
20014cc4:	88fb      	ldrh	r3, [r7, #6]
20014cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
20014cc8:	88fb      	ldrh	r3, [r7, #6]
20014cca:	4618      	mov	r0, r3
20014ccc:	f000 f806 	bl	20014cdc <HAL_GPIO_EXTI_Callback>
  }
}
20014cd0:	bf00      	nop
20014cd2:	3708      	adds	r7, #8
20014cd4:	46bd      	mov	sp, r7
20014cd6:	bd80      	pop	{r7, pc}
20014cd8:	40013c00 	.word	0x40013c00

20014cdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
20014cdc:	b480      	push	{r7}
20014cde:	b083      	sub	sp, #12
20014ce0:	af00      	add	r7, sp, #0
20014ce2:	4603      	mov	r3, r0
20014ce4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
20014ce6:	bf00      	nop
20014ce8:	370c      	adds	r7, #12
20014cea:	46bd      	mov	sp, r7
20014cec:	f85d 7b04 	ldr.w	r7, [sp], #4
20014cf0:	4770      	bx	lr
	...

20014cf4 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
20014cf4:	b480      	push	{r7}
20014cf6:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
20014cf8:	4b08      	ldr	r3, [pc, #32]	; (20014d1c <HAL_PWR_DeInit+0x28>)
20014cfa:	6a1b      	ldr	r3, [r3, #32]
20014cfc:	4a07      	ldr	r2, [pc, #28]	; (20014d1c <HAL_PWR_DeInit+0x28>)
20014cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20014d02:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
20014d04:	4b05      	ldr	r3, [pc, #20]	; (20014d1c <HAL_PWR_DeInit+0x28>)
20014d06:	6a1b      	ldr	r3, [r3, #32]
20014d08:	4a04      	ldr	r2, [pc, #16]	; (20014d1c <HAL_PWR_DeInit+0x28>)
20014d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20014d0e:	6213      	str	r3, [r2, #32]
}
20014d10:	bf00      	nop
20014d12:	46bd      	mov	sp, r7
20014d14:	f85d 7b04 	ldr.w	r7, [sp], #4
20014d18:	4770      	bx	lr
20014d1a:	bf00      	nop
20014d1c:	40023800 	.word	0x40023800

20014d20 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
20014d20:	b480      	push	{r7}
20014d22:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
20014d24:	4b03      	ldr	r3, [pc, #12]	; (20014d34 <HAL_PWR_EnableBkUpAccess+0x14>)
20014d26:	2201      	movs	r2, #1
20014d28:	601a      	str	r2, [r3, #0]
}
20014d2a:	bf00      	nop
20014d2c:	46bd      	mov	sp, r7
20014d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
20014d32:	4770      	bx	lr
20014d34:	420e0020 	.word	0x420e0020

20014d38 <HAL_PWR_DisableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
20014d38:	b480      	push	{r7}
20014d3a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
20014d3c:	4b03      	ldr	r3, [pc, #12]	; (20014d4c <HAL_PWR_DisableBkUpAccess+0x14>)
20014d3e:	2200      	movs	r2, #0
20014d40:	601a      	str	r2, [r3, #0]
}
20014d42:	bf00      	nop
20014d44:	46bd      	mov	sp, r7
20014d46:	f85d 7b04 	ldr.w	r7, [sp], #4
20014d4a:	4770      	bx	lr
20014d4c:	420e0020 	.word	0x420e0020

20014d50 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
20014d50:	b480      	push	{r7}
20014d52:	b083      	sub	sp, #12
20014d54:	af00      	add	r7, sp, #0
20014d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
20014d58:	4b2b      	ldr	r3, [pc, #172]	; (20014e08 <HAL_PWR_ConfigPVD+0xb8>)
20014d5a:	681b      	ldr	r3, [r3, #0]
20014d5c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
20014d60:	687b      	ldr	r3, [r7, #4]
20014d62:	681b      	ldr	r3, [r3, #0]
20014d64:	4928      	ldr	r1, [pc, #160]	; (20014e08 <HAL_PWR_ConfigPVD+0xb8>)
20014d66:	4313      	orrs	r3, r2
20014d68:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
20014d6a:	4b28      	ldr	r3, [pc, #160]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014d6c:	685b      	ldr	r3, [r3, #4]
20014d6e:	4a27      	ldr	r2, [pc, #156]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20014d74:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
20014d76:	4b25      	ldr	r3, [pc, #148]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014d78:	681b      	ldr	r3, [r3, #0]
20014d7a:	4a24      	ldr	r2, [pc, #144]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20014d80:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
20014d82:	4b22      	ldr	r3, [pc, #136]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014d84:	689b      	ldr	r3, [r3, #8]
20014d86:	4a21      	ldr	r2, [pc, #132]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20014d8c:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
20014d8e:	4b1f      	ldr	r3, [pc, #124]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014d90:	68db      	ldr	r3, [r3, #12]
20014d92:	4a1e      	ldr	r2, [pc, #120]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20014d98:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
20014d9a:	687b      	ldr	r3, [r7, #4]
20014d9c:	685b      	ldr	r3, [r3, #4]
20014d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20014da2:	2b00      	cmp	r3, #0
20014da4:	d005      	beq.n	20014db2 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
20014da6:	4b19      	ldr	r3, [pc, #100]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014da8:	681b      	ldr	r3, [r3, #0]
20014daa:	4a18      	ldr	r2, [pc, #96]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20014db0:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
20014db2:	687b      	ldr	r3, [r7, #4]
20014db4:	685b      	ldr	r3, [r3, #4]
20014db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20014dba:	2b00      	cmp	r3, #0
20014dbc:	d005      	beq.n	20014dca <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
20014dbe:	4b13      	ldr	r3, [pc, #76]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014dc0:	685b      	ldr	r3, [r3, #4]
20014dc2:	4a12      	ldr	r2, [pc, #72]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20014dc8:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
20014dca:	687b      	ldr	r3, [r7, #4]
20014dcc:	685b      	ldr	r3, [r3, #4]
20014dce:	f003 0301 	and.w	r3, r3, #1
20014dd2:	2b00      	cmp	r3, #0
20014dd4:	d005      	beq.n	20014de2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
20014dd6:	4b0d      	ldr	r3, [pc, #52]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014dd8:	689b      	ldr	r3, [r3, #8]
20014dda:	4a0c      	ldr	r2, [pc, #48]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20014de0:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
20014de2:	687b      	ldr	r3, [r7, #4]
20014de4:	685b      	ldr	r3, [r3, #4]
20014de6:	f003 0302 	and.w	r3, r3, #2
20014dea:	2b00      	cmp	r3, #0
20014dec:	d005      	beq.n	20014dfa <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
20014dee:	4b07      	ldr	r3, [pc, #28]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014df0:	68db      	ldr	r3, [r3, #12]
20014df2:	4a06      	ldr	r2, [pc, #24]	; (20014e0c <HAL_PWR_ConfigPVD+0xbc>)
20014df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20014df8:	60d3      	str	r3, [r2, #12]
  }
}
20014dfa:	bf00      	nop
20014dfc:	370c      	adds	r7, #12
20014dfe:	46bd      	mov	sp, r7
20014e00:	f85d 7b04 	ldr.w	r7, [sp], #4
20014e04:	4770      	bx	lr
20014e06:	bf00      	nop
20014e08:	40007000 	.word	0x40007000
20014e0c:	40013c00 	.word	0x40013c00

20014e10 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
20014e10:	b480      	push	{r7}
20014e12:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
20014e14:	4b03      	ldr	r3, [pc, #12]	; (20014e24 <HAL_PWR_EnablePVD+0x14>)
20014e16:	2201      	movs	r2, #1
20014e18:	601a      	str	r2, [r3, #0]
}
20014e1a:	bf00      	nop
20014e1c:	46bd      	mov	sp, r7
20014e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
20014e22:	4770      	bx	lr
20014e24:	420e0010 	.word	0x420e0010

20014e28 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
20014e28:	b480      	push	{r7}
20014e2a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
20014e2c:	4b03      	ldr	r3, [pc, #12]	; (20014e3c <HAL_PWR_DisablePVD+0x14>)
20014e2e:	2200      	movs	r2, #0
20014e30:	601a      	str	r2, [r3, #0]
}
20014e32:	bf00      	nop
20014e34:	46bd      	mov	sp, r7
20014e36:	f85d 7b04 	ldr.w	r7, [sp], #4
20014e3a:	4770      	bx	lr
20014e3c:	420e0010 	.word	0x420e0010

20014e40 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
20014e40:	b480      	push	{r7}
20014e42:	b083      	sub	sp, #12
20014e44:	af00      	add	r7, sp, #0
20014e46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
20014e48:	4b05      	ldr	r3, [pc, #20]	; (20014e60 <HAL_PWR_EnableWakeUpPin+0x20>)
20014e4a:	685a      	ldr	r2, [r3, #4]
20014e4c:	4904      	ldr	r1, [pc, #16]	; (20014e60 <HAL_PWR_EnableWakeUpPin+0x20>)
20014e4e:	687b      	ldr	r3, [r7, #4]
20014e50:	4313      	orrs	r3, r2
20014e52:	604b      	str	r3, [r1, #4]
}
20014e54:	bf00      	nop
20014e56:	370c      	adds	r7, #12
20014e58:	46bd      	mov	sp, r7
20014e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
20014e5e:	4770      	bx	lr
20014e60:	40007000 	.word	0x40007000

20014e64 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
20014e64:	b480      	push	{r7}
20014e66:	b083      	sub	sp, #12
20014e68:	af00      	add	r7, sp, #0
20014e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
20014e6c:	4b06      	ldr	r3, [pc, #24]	; (20014e88 <HAL_PWR_DisableWakeUpPin+0x24>)
20014e6e:	685a      	ldr	r2, [r3, #4]
20014e70:	687b      	ldr	r3, [r7, #4]
20014e72:	43db      	mvns	r3, r3
20014e74:	4904      	ldr	r1, [pc, #16]	; (20014e88 <HAL_PWR_DisableWakeUpPin+0x24>)
20014e76:	4013      	ands	r3, r2
20014e78:	604b      	str	r3, [r1, #4]
}
20014e7a:	bf00      	nop
20014e7c:	370c      	adds	r7, #12
20014e7e:	46bd      	mov	sp, r7
20014e80:	f85d 7b04 	ldr.w	r7, [sp], #4
20014e84:	4770      	bx	lr
20014e86:	bf00      	nop
20014e88:	40007000 	.word	0x40007000

20014e8c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
20014e8c:	b480      	push	{r7}
20014e8e:	b083      	sub	sp, #12
20014e90:	af00      	add	r7, sp, #0
20014e92:	6078      	str	r0, [r7, #4]
20014e94:	460b      	mov	r3, r1
20014e96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
20014e98:	4b09      	ldr	r3, [pc, #36]	; (20014ec0 <HAL_PWR_EnterSLEEPMode+0x34>)
20014e9a:	691b      	ldr	r3, [r3, #16]
20014e9c:	4a08      	ldr	r2, [pc, #32]	; (20014ec0 <HAL_PWR_EnterSLEEPMode+0x34>)
20014e9e:	f023 0304 	bic.w	r3, r3, #4
20014ea2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
20014ea4:	78fb      	ldrb	r3, [r7, #3]
20014ea6:	2b01      	cmp	r3, #1
20014ea8:	d101      	bne.n	20014eae <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
20014eaa:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
20014eac:	e002      	b.n	20014eb4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
20014eae:	bf40      	sev
    __WFE();
20014eb0:	bf20      	wfe
    __WFE();
20014eb2:	bf20      	wfe
}
20014eb4:	bf00      	nop
20014eb6:	370c      	adds	r7, #12
20014eb8:	46bd      	mov	sp, r7
20014eba:	f85d 7b04 	ldr.w	r7, [sp], #4
20014ebe:	4770      	bx	lr
20014ec0:	e000ed00 	.word	0xe000ed00

20014ec4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
20014ec4:	b480      	push	{r7}
20014ec6:	b083      	sub	sp, #12
20014ec8:	af00      	add	r7, sp, #0
20014eca:	6078      	str	r0, [r7, #4]
20014ecc:	460b      	mov	r3, r1
20014ece:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
20014ed0:	4b10      	ldr	r3, [pc, #64]	; (20014f14 <HAL_PWR_EnterSTOPMode+0x50>)
20014ed2:	681b      	ldr	r3, [r3, #0]
20014ed4:	f023 0203 	bic.w	r2, r3, #3
20014ed8:	490e      	ldr	r1, [pc, #56]	; (20014f14 <HAL_PWR_EnterSTOPMode+0x50>)
20014eda:	687b      	ldr	r3, [r7, #4]
20014edc:	4313      	orrs	r3, r2
20014ede:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
20014ee0:	4b0d      	ldr	r3, [pc, #52]	; (20014f18 <HAL_PWR_EnterSTOPMode+0x54>)
20014ee2:	691b      	ldr	r3, [r3, #16]
20014ee4:	4a0c      	ldr	r2, [pc, #48]	; (20014f18 <HAL_PWR_EnterSTOPMode+0x54>)
20014ee6:	f043 0304 	orr.w	r3, r3, #4
20014eea:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
20014eec:	78fb      	ldrb	r3, [r7, #3]
20014eee:	2b01      	cmp	r3, #1
20014ef0:	d101      	bne.n	20014ef6 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
20014ef2:	bf30      	wfi
20014ef4:	e002      	b.n	20014efc <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
20014ef6:	bf40      	sev
    __WFE();
20014ef8:	bf20      	wfe
    __WFE();
20014efa:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
20014efc:	4b06      	ldr	r3, [pc, #24]	; (20014f18 <HAL_PWR_EnterSTOPMode+0x54>)
20014efe:	691b      	ldr	r3, [r3, #16]
20014f00:	4a05      	ldr	r2, [pc, #20]	; (20014f18 <HAL_PWR_EnterSTOPMode+0x54>)
20014f02:	f023 0304 	bic.w	r3, r3, #4
20014f06:	6113      	str	r3, [r2, #16]
}
20014f08:	bf00      	nop
20014f0a:	370c      	adds	r7, #12
20014f0c:	46bd      	mov	sp, r7
20014f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
20014f12:	4770      	bx	lr
20014f14:	40007000 	.word	0x40007000
20014f18:	e000ed00 	.word	0xe000ed00

20014f1c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
20014f1c:	b480      	push	{r7}
20014f1e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
20014f20:	4b08      	ldr	r3, [pc, #32]	; (20014f44 <HAL_PWR_EnterSTANDBYMode+0x28>)
20014f22:	681b      	ldr	r3, [r3, #0]
20014f24:	4a07      	ldr	r2, [pc, #28]	; (20014f44 <HAL_PWR_EnterSTANDBYMode+0x28>)
20014f26:	f043 0302 	orr.w	r3, r3, #2
20014f2a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
20014f2c:	4b06      	ldr	r3, [pc, #24]	; (20014f48 <HAL_PWR_EnterSTANDBYMode+0x2c>)
20014f2e:	691b      	ldr	r3, [r3, #16]
20014f30:	4a05      	ldr	r2, [pc, #20]	; (20014f48 <HAL_PWR_EnterSTANDBYMode+0x2c>)
20014f32:	f043 0304 	orr.w	r3, r3, #4
20014f36:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
20014f38:	bf30      	wfi
}
20014f3a:	bf00      	nop
20014f3c:	46bd      	mov	sp, r7
20014f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
20014f42:	4770      	bx	lr
20014f44:	40007000 	.word	0x40007000
20014f48:	e000ed00 	.word	0xe000ed00

20014f4c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
20014f4c:	b580      	push	{r7, lr}
20014f4e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
20014f50:	4b06      	ldr	r3, [pc, #24]	; (20014f6c <HAL_PWR_PVD_IRQHandler+0x20>)
20014f52:	695b      	ldr	r3, [r3, #20]
20014f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20014f58:	2b00      	cmp	r3, #0
20014f5a:	d005      	beq.n	20014f68 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
20014f5c:	f000 f808 	bl	20014f70 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
20014f60:	4b02      	ldr	r3, [pc, #8]	; (20014f6c <HAL_PWR_PVD_IRQHandler+0x20>)
20014f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20014f66:	615a      	str	r2, [r3, #20]
  }
}
20014f68:	bf00      	nop
20014f6a:	bd80      	pop	{r7, pc}
20014f6c:	40013c00 	.word	0x40013c00

20014f70 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
20014f70:	b480      	push	{r7}
20014f72:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
20014f74:	bf00      	nop
20014f76:	46bd      	mov	sp, r7
20014f78:	f85d 7b04 	ldr.w	r7, [sp], #4
20014f7c:	4770      	bx	lr
	...

20014f80 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
20014f80:	b480      	push	{r7}
20014f82:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
20014f84:	4b05      	ldr	r3, [pc, #20]	; (20014f9c <HAL_PWR_EnableSleepOnExit+0x1c>)
20014f86:	691b      	ldr	r3, [r3, #16]
20014f88:	4a04      	ldr	r2, [pc, #16]	; (20014f9c <HAL_PWR_EnableSleepOnExit+0x1c>)
20014f8a:	f043 0302 	orr.w	r3, r3, #2
20014f8e:	6113      	str	r3, [r2, #16]
}
20014f90:	bf00      	nop
20014f92:	46bd      	mov	sp, r7
20014f94:	f85d 7b04 	ldr.w	r7, [sp], #4
20014f98:	4770      	bx	lr
20014f9a:	bf00      	nop
20014f9c:	e000ed00 	.word	0xe000ed00

20014fa0 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
20014fa0:	b480      	push	{r7}
20014fa2:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
20014fa4:	4b05      	ldr	r3, [pc, #20]	; (20014fbc <HAL_PWR_DisableSleepOnExit+0x1c>)
20014fa6:	691b      	ldr	r3, [r3, #16]
20014fa8:	4a04      	ldr	r2, [pc, #16]	; (20014fbc <HAL_PWR_DisableSleepOnExit+0x1c>)
20014faa:	f023 0302 	bic.w	r3, r3, #2
20014fae:	6113      	str	r3, [r2, #16]
}
20014fb0:	bf00      	nop
20014fb2:	46bd      	mov	sp, r7
20014fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
20014fb8:	4770      	bx	lr
20014fba:	bf00      	nop
20014fbc:	e000ed00 	.word	0xe000ed00

20014fc0 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
20014fc0:	b480      	push	{r7}
20014fc2:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
20014fc4:	4b05      	ldr	r3, [pc, #20]	; (20014fdc <HAL_PWR_EnableSEVOnPend+0x1c>)
20014fc6:	691b      	ldr	r3, [r3, #16]
20014fc8:	4a04      	ldr	r2, [pc, #16]	; (20014fdc <HAL_PWR_EnableSEVOnPend+0x1c>)
20014fca:	f043 0310 	orr.w	r3, r3, #16
20014fce:	6113      	str	r3, [r2, #16]
}
20014fd0:	bf00      	nop
20014fd2:	46bd      	mov	sp, r7
20014fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
20014fd8:	4770      	bx	lr
20014fda:	bf00      	nop
20014fdc:	e000ed00 	.word	0xe000ed00

20014fe0 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
20014fe0:	b480      	push	{r7}
20014fe2:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
20014fe4:	4b05      	ldr	r3, [pc, #20]	; (20014ffc <HAL_PWR_DisableSEVOnPend+0x1c>)
20014fe6:	691b      	ldr	r3, [r3, #16]
20014fe8:	4a04      	ldr	r2, [pc, #16]	; (20014ffc <HAL_PWR_DisableSEVOnPend+0x1c>)
20014fea:	f023 0310 	bic.w	r3, r3, #16
20014fee:	6113      	str	r3, [r2, #16]
}
20014ff0:	bf00      	nop
20014ff2:	46bd      	mov	sp, r7
20014ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
20014ff8:	4770      	bx	lr
20014ffa:	bf00      	nop
20014ffc:	e000ed00 	.word	0xe000ed00

20015000 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
20015000:	b580      	push	{r7, lr}
20015002:	b082      	sub	sp, #8
20015004:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
20015006:	2300      	movs	r3, #0
20015008:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
2001500a:	4b0e      	ldr	r3, [pc, #56]	; (20015044 <HAL_PWREx_EnableBkUpReg+0x44>)
2001500c:	2201      	movs	r2, #1
2001500e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20015010:	f7fb fdc8 	bl	20010ba4 <HAL_GetTick>
20015014:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
20015016:	e009      	b.n	2001502c <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
20015018:	f7fb fdc4 	bl	20010ba4 <HAL_GetTick>
2001501c:	4602      	mov	r2, r0
2001501e:	687b      	ldr	r3, [r7, #4]
20015020:	1ad3      	subs	r3, r2, r3
20015022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20015026:	d901      	bls.n	2001502c <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
20015028:	2303      	movs	r3, #3
2001502a:	e006      	b.n	2001503a <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
2001502c:	4b06      	ldr	r3, [pc, #24]	; (20015048 <HAL_PWREx_EnableBkUpReg+0x48>)
2001502e:	685b      	ldr	r3, [r3, #4]
20015030:	f003 0308 	and.w	r3, r3, #8
20015034:	2b08      	cmp	r3, #8
20015036:	d1ef      	bne.n	20015018 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
20015038:	2300      	movs	r3, #0
}
2001503a:	4618      	mov	r0, r3
2001503c:	3708      	adds	r7, #8
2001503e:	46bd      	mov	sp, r7
20015040:	bd80      	pop	{r7, pc}
20015042:	bf00      	nop
20015044:	420e00a4 	.word	0x420e00a4
20015048:	40007000 	.word	0x40007000

2001504c <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
2001504c:	b580      	push	{r7, lr}
2001504e:	b082      	sub	sp, #8
20015050:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
20015052:	2300      	movs	r3, #0
20015054:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
20015056:	4b0e      	ldr	r3, [pc, #56]	; (20015090 <HAL_PWREx_DisableBkUpReg+0x44>)
20015058:	2200      	movs	r2, #0
2001505a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
2001505c:	f7fb fda2 	bl	20010ba4 <HAL_GetTick>
20015060:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
20015062:	e009      	b.n	20015078 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
20015064:	f7fb fd9e 	bl	20010ba4 <HAL_GetTick>
20015068:	4602      	mov	r2, r0
2001506a:	687b      	ldr	r3, [r7, #4]
2001506c:	1ad3      	subs	r3, r2, r3
2001506e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20015072:	d901      	bls.n	20015078 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
20015074:	2303      	movs	r3, #3
20015076:	e006      	b.n	20015086 <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
20015078:	4b06      	ldr	r3, [pc, #24]	; (20015094 <HAL_PWREx_DisableBkUpReg+0x48>)
2001507a:	685b      	ldr	r3, [r3, #4]
2001507c:	f003 0308 	and.w	r3, r3, #8
20015080:	2b08      	cmp	r3, #8
20015082:	d0ef      	beq.n	20015064 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
20015084:	2300      	movs	r3, #0
}
20015086:	4618      	mov	r0, r3
20015088:	3708      	adds	r7, #8
2001508a:	46bd      	mov	sp, r7
2001508c:	bd80      	pop	{r7, pc}
2001508e:	bf00      	nop
20015090:	420e00a4 	.word	0x420e00a4
20015094:	40007000 	.word	0x40007000

20015098 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
20015098:	b480      	push	{r7}
2001509a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
2001509c:	4b03      	ldr	r3, [pc, #12]	; (200150ac <HAL_PWREx_EnableFlashPowerDown+0x14>)
2001509e:	2201      	movs	r2, #1
200150a0:	601a      	str	r2, [r3, #0]
}
200150a2:	bf00      	nop
200150a4:	46bd      	mov	sp, r7
200150a6:	f85d 7b04 	ldr.w	r7, [sp], #4
200150aa:	4770      	bx	lr
200150ac:	420e0024 	.word	0x420e0024

200150b0 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
200150b0:	b480      	push	{r7}
200150b2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
200150b4:	4b03      	ldr	r3, [pc, #12]	; (200150c4 <HAL_PWREx_DisableFlashPowerDown+0x14>)
200150b6:	2200      	movs	r2, #0
200150b8:	601a      	str	r2, [r3, #0]
}
200150ba:	bf00      	nop
200150bc:	46bd      	mov	sp, r7
200150be:	f85d 7b04 	ldr.w	r7, [sp], #4
200150c2:	4770      	bx	lr
200150c4:	420e0024 	.word	0x420e0024

200150c8 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
200150c8:	b480      	push	{r7}
200150ca:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
200150cc:	4b04      	ldr	r3, [pc, #16]	; (200150e0 <HAL_PWREx_GetVoltageRange+0x18>)
200150ce:	681b      	ldr	r3, [r3, #0]
200150d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
200150d4:	4618      	mov	r0, r3
200150d6:	46bd      	mov	sp, r7
200150d8:	f85d 7b04 	ldr.w	r7, [sp], #4
200150dc:	4770      	bx	lr
200150de:	bf00      	nop
200150e0:	40007000 	.word	0x40007000

200150e4 <HAL_PWREx_ControlVoltageScaling>:
  * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 1 or 2.
  * @note The new voltage scale is active only when the PLL is ON.  
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
200150e4:	b580      	push	{r7, lr}
200150e6:	b086      	sub	sp, #24
200150e8:	af00      	add	r7, sp, #0
200150ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
200150ec:	2300      	movs	r3, #0
200150ee:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
200150f0:	2300      	movs	r3, #0
200150f2:	613b      	str	r3, [r7, #16]
200150f4:	4b35      	ldr	r3, [pc, #212]	; (200151cc <HAL_PWREx_ControlVoltageScaling+0xe8>)
200150f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200150f8:	4a34      	ldr	r2, [pc, #208]	; (200151cc <HAL_PWREx_ControlVoltageScaling+0xe8>)
200150fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200150fe:	6413      	str	r3, [r2, #64]	; 0x40
20015100:	4b32      	ldr	r3, [pc, #200]	; (200151cc <HAL_PWREx_ControlVoltageScaling+0xe8>)
20015102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20015104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20015108:	613b      	str	r3, [r7, #16]
2001510a:	693b      	ldr	r3, [r7, #16]
  
  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2001510c:	4b2f      	ldr	r3, [pc, #188]	; (200151cc <HAL_PWREx_ControlVoltageScaling+0xe8>)
2001510e:	689b      	ldr	r3, [r3, #8]
20015110:	f003 030c 	and.w	r3, r3, #12
20015114:	2b08      	cmp	r3, #8
20015116:	d051      	beq.n	200151bc <HAL_PWREx_ControlVoltageScaling+0xd8>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
20015118:	4b2d      	ldr	r3, [pc, #180]	; (200151d0 <HAL_PWREx_ControlVoltageScaling+0xec>)
2001511a:	2200      	movs	r2, #0
2001511c:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
2001511e:	f7fb fd41 	bl	20010ba4 <HAL_GetTick>
20015122:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20015124:	e008      	b.n	20015138 <HAL_PWREx_ControlVoltageScaling+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20015126:	f7fb fd3d 	bl	20010ba4 <HAL_GetTick>
2001512a:	4602      	mov	r2, r0
2001512c:	697b      	ldr	r3, [r7, #20]
2001512e:	1ad3      	subs	r3, r2, r3
20015130:	2b02      	cmp	r3, #2
20015132:	d901      	bls.n	20015138 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        return HAL_TIMEOUT;
20015134:	2303      	movs	r3, #3
20015136:	e044      	b.n	200151c2 <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20015138:	4b24      	ldr	r3, [pc, #144]	; (200151cc <HAL_PWREx_ControlVoltageScaling+0xe8>)
2001513a:	681b      	ldr	r3, [r3, #0]
2001513c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20015140:	2b00      	cmp	r3, #0
20015142:	d1f0      	bne.n	20015126 <HAL_PWREx_ControlVoltageScaling+0x42>
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
20015144:	2300      	movs	r3, #0
20015146:	60fb      	str	r3, [r7, #12]
20015148:	4b22      	ldr	r3, [pc, #136]	; (200151d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
2001514a:	681b      	ldr	r3, [r3, #0]
2001514c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
20015150:	4920      	ldr	r1, [pc, #128]	; (200151d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
20015152:	687b      	ldr	r3, [r7, #4]
20015154:	4313      	orrs	r3, r2
20015156:	600b      	str	r3, [r1, #0]
20015158:	4b1e      	ldr	r3, [pc, #120]	; (200151d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
2001515a:	681b      	ldr	r3, [r3, #0]
2001515c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
20015160:	60fb      	str	r3, [r7, #12]
20015162:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
20015164:	4b1a      	ldr	r3, [pc, #104]	; (200151d0 <HAL_PWREx_ControlVoltageScaling+0xec>)
20015166:	2201      	movs	r2, #1
20015168:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
2001516a:	f7fb fd1b 	bl	20010ba4 <HAL_GetTick>
2001516e:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20015170:	e008      	b.n	20015184 <HAL_PWREx_ControlVoltageScaling+0xa0>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20015172:	f7fb fd17 	bl	20010ba4 <HAL_GetTick>
20015176:	4602      	mov	r2, r0
20015178:	697b      	ldr	r3, [r7, #20]
2001517a:	1ad3      	subs	r3, r2, r3
2001517c:	2b02      	cmp	r3, #2
2001517e:	d901      	bls.n	20015184 <HAL_PWREx_ControlVoltageScaling+0xa0>
      {
        return HAL_TIMEOUT;
20015180:	2303      	movs	r3, #3
20015182:	e01e      	b.n	200151c2 <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20015184:	4b11      	ldr	r3, [pc, #68]	; (200151cc <HAL_PWREx_ControlVoltageScaling+0xe8>)
20015186:	681b      	ldr	r3, [r3, #0]
20015188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2001518c:	2b00      	cmp	r3, #0
2001518e:	d0f0      	beq.n	20015172 <HAL_PWREx_ControlVoltageScaling+0x8e>
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
20015190:	f7fb fd08 	bl	20010ba4 <HAL_GetTick>
20015194:	6178      	str	r0, [r7, #20]
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
20015196:	e009      	b.n	200151ac <HAL_PWREx_ControlVoltageScaling+0xc8>
    {
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
20015198:	f7fb fd04 	bl	20010ba4 <HAL_GetTick>
2001519c:	4602      	mov	r2, r0
2001519e:	697b      	ldr	r3, [r7, #20]
200151a0:	1ad3      	subs	r3, r2, r3
200151a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
200151a6:	d901      	bls.n	200151ac <HAL_PWREx_ControlVoltageScaling+0xc8>
      {
        return HAL_TIMEOUT;
200151a8:	2303      	movs	r3, #3
200151aa:	e00a      	b.n	200151c2 <HAL_PWREx_ControlVoltageScaling+0xde>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
200151ac:	4b09      	ldr	r3, [pc, #36]	; (200151d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
200151ae:	685b      	ldr	r3, [r3, #4]
200151b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
200151b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
200151b8:	d1ee      	bne.n	20015198 <HAL_PWREx_ControlVoltageScaling+0xb4>
200151ba:	e001      	b.n	200151c0 <HAL_PWREx_ControlVoltageScaling+0xdc>
      } 
    }
  }
  else
  {
    return HAL_ERROR;
200151bc:	2301      	movs	r3, #1
200151be:	e000      	b.n	200151c2 <HAL_PWREx_ControlVoltageScaling+0xde>
  }

  return HAL_OK;
200151c0:	2300      	movs	r3, #0
}
200151c2:	4618      	mov	r0, r3
200151c4:	3718      	adds	r7, #24
200151c6:	46bd      	mov	sp, r7
200151c8:	bd80      	pop	{r7, pc}
200151ca:	bf00      	nop
200151cc:	40023800 	.word	0x40023800
200151d0:	42470060 	.word	0x42470060
200151d4:	40007000 	.word	0x40007000

200151d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
200151d8:	b580      	push	{r7, lr}
200151da:	b082      	sub	sp, #8
200151dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
200151de:	2300      	movs	r3, #0
200151e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
200151e2:	2300      	movs	r3, #0
200151e4:	603b      	str	r3, [r7, #0]
200151e6:	4b20      	ldr	r3, [pc, #128]	; (20015268 <HAL_PWREx_EnableOverDrive+0x90>)
200151e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200151ea:	4a1f      	ldr	r2, [pc, #124]	; (20015268 <HAL_PWREx_EnableOverDrive+0x90>)
200151ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200151f0:	6413      	str	r3, [r2, #64]	; 0x40
200151f2:	4b1d      	ldr	r3, [pc, #116]	; (20015268 <HAL_PWREx_EnableOverDrive+0x90>)
200151f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200151f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200151fa:	603b      	str	r3, [r7, #0]
200151fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
200151fe:	4b1b      	ldr	r3, [pc, #108]	; (2001526c <HAL_PWREx_EnableOverDrive+0x94>)
20015200:	2201      	movs	r2, #1
20015202:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20015204:	f7fb fcce 	bl	20010ba4 <HAL_GetTick>
20015208:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
2001520a:	e009      	b.n	20015220 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
2001520c:	f7fb fcca 	bl	20010ba4 <HAL_GetTick>
20015210:	4602      	mov	r2, r0
20015212:	687b      	ldr	r3, [r7, #4]
20015214:	1ad3      	subs	r3, r2, r3
20015216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2001521a:	d901      	bls.n	20015220 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
2001521c:	2303      	movs	r3, #3
2001521e:	e01f      	b.n	20015260 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
20015220:	4b13      	ldr	r3, [pc, #76]	; (20015270 <HAL_PWREx_EnableOverDrive+0x98>)
20015222:	685b      	ldr	r3, [r3, #4]
20015224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20015228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2001522c:	d1ee      	bne.n	2001520c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
2001522e:	4b11      	ldr	r3, [pc, #68]	; (20015274 <HAL_PWREx_EnableOverDrive+0x9c>)
20015230:	2201      	movs	r2, #1
20015232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20015234:	f7fb fcb6 	bl	20010ba4 <HAL_GetTick>
20015238:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
2001523a:	e009      	b.n	20015250 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
2001523c:	f7fb fcb2 	bl	20010ba4 <HAL_GetTick>
20015240:	4602      	mov	r2, r0
20015242:	687b      	ldr	r3, [r7, #4]
20015244:	1ad3      	subs	r3, r2, r3
20015246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2001524a:	d901      	bls.n	20015250 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
2001524c:	2303      	movs	r3, #3
2001524e:	e007      	b.n	20015260 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
20015250:	4b07      	ldr	r3, [pc, #28]	; (20015270 <HAL_PWREx_EnableOverDrive+0x98>)
20015252:	685b      	ldr	r3, [r3, #4]
20015254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20015258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2001525c:	d1ee      	bne.n	2001523c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
2001525e:	2300      	movs	r3, #0
}
20015260:	4618      	mov	r0, r3
20015262:	3708      	adds	r7, #8
20015264:	46bd      	mov	sp, r7
20015266:	bd80      	pop	{r7, pc}
20015268:	40023800 	.word	0x40023800
2001526c:	420e0040 	.word	0x420e0040
20015270:	40007000 	.word	0x40007000
20015274:	420e0044 	.word	0x420e0044

20015278 <HAL_PWREx_DisableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableOverDrive(void)
{
20015278:	b580      	push	{r7, lr}
2001527a:	b082      	sub	sp, #8
2001527c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
2001527e:	2300      	movs	r3, #0
20015280:	607b      	str	r3, [r7, #4]
  
  __HAL_RCC_PWR_CLK_ENABLE();
20015282:	2300      	movs	r3, #0
20015284:	603b      	str	r3, [r7, #0]
20015286:	4b20      	ldr	r3, [pc, #128]	; (20015308 <HAL_PWREx_DisableOverDrive+0x90>)
20015288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2001528a:	4a1f      	ldr	r2, [pc, #124]	; (20015308 <HAL_PWREx_DisableOverDrive+0x90>)
2001528c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20015290:	6413      	str	r3, [r2, #64]	; 0x40
20015292:	4b1d      	ldr	r3, [pc, #116]	; (20015308 <HAL_PWREx_DisableOverDrive+0x90>)
20015294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20015296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2001529a:	603b      	str	r3, [r7, #0]
2001529c:	683b      	ldr	r3, [r7, #0]
    
  /* Disable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_DISABLE();
2001529e:	4b1b      	ldr	r3, [pc, #108]	; (2001530c <HAL_PWREx_DisableOverDrive+0x94>)
200152a0:	2200      	movs	r2, #0
200152a2:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
200152a4:	f7fb fc7e 	bl	20010ba4 <HAL_GetTick>
200152a8:	6078      	str	r0, [r7, #4]
 
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
200152aa:	e009      	b.n	200152c0 <HAL_PWREx_DisableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
200152ac:	f7fb fc7a 	bl	20010ba4 <HAL_GetTick>
200152b0:	4602      	mov	r2, r0
200152b2:	687b      	ldr	r3, [r7, #4]
200152b4:	1ad3      	subs	r3, r2, r3
200152b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
200152ba:	d901      	bls.n	200152c0 <HAL_PWREx_DisableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
200152bc:	2303      	movs	r3, #3
200152be:	e01f      	b.n	20015300 <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
200152c0:	4b13      	ldr	r3, [pc, #76]	; (20015310 <HAL_PWREx_DisableOverDrive+0x98>)
200152c2:	685b      	ldr	r3, [r3, #4]
200152c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200152c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
200152cc:	d0ee      	beq.n	200152ac <HAL_PWREx_DisableOverDrive+0x34>
    }
  } 
  
  /* Disable the Over-drive */
  __HAL_PWR_OVERDRIVE_DISABLE();
200152ce:	4b11      	ldr	r3, [pc, #68]	; (20015314 <HAL_PWREx_DisableOverDrive+0x9c>)
200152d0:	2200      	movs	r2, #0
200152d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200152d4:	f7fb fc66 	bl	20010ba4 <HAL_GetTick>
200152d8:	6078      	str	r0, [r7, #4]

  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
200152da:	e009      	b.n	200152f0 <HAL_PWREx_DisableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
200152dc:	f7fb fc62 	bl	20010ba4 <HAL_GetTick>
200152e0:	4602      	mov	r2, r0
200152e2:	687b      	ldr	r3, [r7, #4]
200152e4:	1ad3      	subs	r3, r2, r3
200152e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
200152ea:	d901      	bls.n	200152f0 <HAL_PWREx_DisableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
200152ec:	2303      	movs	r3, #3
200152ee:	e007      	b.n	20015300 <HAL_PWREx_DisableOverDrive+0x88>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
200152f0:	4b07      	ldr	r3, [pc, #28]	; (20015310 <HAL_PWREx_DisableOverDrive+0x98>)
200152f2:	685b      	ldr	r3, [r3, #4]
200152f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200152f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200152fc:	d0ee      	beq.n	200152dc <HAL_PWREx_DisableOverDrive+0x64>
    }
  }
  
  return HAL_OK;
200152fe:	2300      	movs	r3, #0
}
20015300:	4618      	mov	r0, r3
20015302:	3708      	adds	r7, #8
20015304:	46bd      	mov	sp, r7
20015306:	bd80      	pop	{r7, pc}
20015308:	40023800 	.word	0x40023800
2001530c:	420e0044 	.word	0x420e0044
20015310:	40007000 	.word	0x40007000
20015314:	420e0040 	.word	0x420e0040

20015318 <HAL_PWREx_EnterUnderDriveSTOPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
HAL_StatusTypeDef HAL_PWREx_EnterUnderDriveSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
20015318:	b480      	push	{r7}
2001531a:	b085      	sub	sp, #20
2001531c:	af00      	add	r7, sp, #0
2001531e:	6078      	str	r0, [r7, #4]
20015320:	460b      	mov	r3, r1
20015322:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0U;
20015324:	2300      	movs	r3, #0
20015326:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
20015328:	2300      	movs	r3, #0
2001532a:	60bb      	str	r3, [r7, #8]
2001532c:	4b20      	ldr	r3, [pc, #128]	; (200153b0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
2001532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20015330:	4a1f      	ldr	r2, [pc, #124]	; (200153b0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
20015332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20015336:	6413      	str	r3, [r2, #64]	; 0x40
20015338:	4b1d      	ldr	r3, [pc, #116]	; (200153b0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x98>)
2001533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2001533c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20015340:	60bb      	str	r3, [r7, #8]
20015342:	68bb      	ldr	r3, [r7, #8]
  /* Enable the Under-drive Mode ---------------------------------------------*/
  /* Clear Under-drive flag */
  __HAL_PWR_CLEAR_ODRUDR_FLAG();
20015344:	4b1b      	ldr	r3, [pc, #108]	; (200153b4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
20015346:	685b      	ldr	r3, [r3, #4]
20015348:	4a1a      	ldr	r2, [pc, #104]	; (200153b4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
2001534a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
2001534e:	6053      	str	r3, [r2, #4]
  
  /* Enable the Under-drive */ 
  __HAL_PWR_UNDERDRIVE_ENABLE();
20015350:	4b18      	ldr	r3, [pc, #96]	; (200153b4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
20015352:	681b      	ldr	r3, [r3, #0]
20015354:	4a17      	ldr	r2, [pc, #92]	; (200153b4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
20015356:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
2001535a:	6013      	str	r3, [r2, #0]

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg1 = PWR->CR;
2001535c:	4b15      	ldr	r3, [pc, #84]	; (200153b4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
2001535e:	681b      	ldr	r3, [r3, #0]
20015360:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS, LPDS, MRLUDS and LPLUDS bits */
  tmpreg1 &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS | PWR_CR_LPUDS | PWR_CR_MRUDS);
20015362:	68fb      	ldr	r3, [r7, #12]
20015364:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
20015368:	f023 0303 	bic.w	r3, r3, #3
2001536c:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tmpreg1 |= Regulator;
2001536e:	68fa      	ldr	r2, [r7, #12]
20015370:	687b      	ldr	r3, [r7, #4]
20015372:	4313      	orrs	r3, r2
20015374:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg1;
20015376:	4a0f      	ldr	r2, [pc, #60]	; (200153b4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x9c>)
20015378:	68fb      	ldr	r3, [r7, #12]
2001537a:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
2001537c:	4b0e      	ldr	r3, [pc, #56]	; (200153b8 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
2001537e:	691b      	ldr	r3, [r3, #16]
20015380:	4a0d      	ldr	r2, [pc, #52]	; (200153b8 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
20015382:	f043 0304 	orr.w	r3, r3, #4
20015386:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_SLEEPENTRY_WFI)
20015388:	78fb      	ldrb	r3, [r7, #3]
2001538a:	2b01      	cmp	r3, #1
2001538c:	d101      	bne.n	20015392 <HAL_PWREx_EnterUnderDriveSTOPMode+0x7a>
  {   
    /* Request Wait For Interrupt */
    __WFI();
2001538e:	bf30      	wfi
20015390:	e000      	b.n	20015394 <HAL_PWREx_EnterUnderDriveSTOPMode+0x7c>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
20015392:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
20015394:	4b08      	ldr	r3, [pc, #32]	; (200153b8 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
20015396:	691b      	ldr	r3, [r3, #16]
20015398:	4a07      	ldr	r2, [pc, #28]	; (200153b8 <HAL_PWREx_EnterUnderDriveSTOPMode+0xa0>)
2001539a:	f023 0304 	bic.w	r3, r3, #4
2001539e:	6113      	str	r3, [r2, #16]

  return HAL_OK;  
200153a0:	2300      	movs	r3, #0
}
200153a2:	4618      	mov	r0, r3
200153a4:	3714      	adds	r7, #20
200153a6:	46bd      	mov	sp, r7
200153a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200153ac:	4770      	bx	lr
200153ae:	bf00      	nop
200153b0:	40023800 	.word	0x40023800
200153b4:	40007000 	.word	0x40007000
200153b8:	e000ed00 	.word	0xe000ed00
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
200153bc:	b480      	push	{r7}
200153be:	af00      	add	r7, sp, #0
  return HAL_OK;
200153c0:	2300      	movs	r3, #0
}
200153c2:	4618      	mov	r0, r3
200153c4:	46bd      	mov	sp, r7
200153c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200153ca:	4770      	bx	lr
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
200153cc:	b580      	push	{r7, lr}
200153ce:	b086      	sub	sp, #24
200153d0:	af00      	add	r7, sp, #0
200153d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
200153d4:	687b      	ldr	r3, [r7, #4]
200153d6:	2b00      	cmp	r3, #0
200153d8:	d101      	bne.n	200153de <HAL_PWREx_EnterUnderDriveSTOPMode+0xc6>
  {
    return HAL_ERROR;
200153da:	2301      	movs	r3, #1
200153dc:	e25b      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
200153de:	687b      	ldr	r3, [r7, #4]
200153e0:	681b      	ldr	r3, [r3, #0]
200153e2:	f003 0301 	and.w	r3, r3, #1
200153e6:	2b00      	cmp	r3, #0
200153e8:	d075      	beq.n	200154d6 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
200153ea:	4ba3      	ldr	r3, [pc, #652]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
200153ec:	689b      	ldr	r3, [r3, #8]
200153ee:	f003 030c 	and.w	r3, r3, #12
200153f2:	2b04      	cmp	r3, #4
200153f4:	d00c      	beq.n	20015410 <HAL_PWREx_EnterUnderDriveSTOPMode+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200153f6:	4ba0      	ldr	r3, [pc, #640]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
200153f8:	689b      	ldr	r3, [r3, #8]
200153fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
200153fe:	2b08      	cmp	r3, #8
20015400:	d112      	bne.n	20015428 <HAL_PWREx_EnterUnderDriveSTOPMode+0x110>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20015402:	4b9d      	ldr	r3, [pc, #628]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015404:	685b      	ldr	r3, [r3, #4]
20015406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2001540a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2001540e:	d10b      	bne.n	20015428 <HAL_PWREx_EnterUnderDriveSTOPMode+0x110>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20015410:	4b99      	ldr	r3, [pc, #612]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015412:	681b      	ldr	r3, [r3, #0]
20015414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20015418:	2b00      	cmp	r3, #0
2001541a:	d05b      	beq.n	200154d4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1bc>
2001541c:	687b      	ldr	r3, [r7, #4]
2001541e:	685b      	ldr	r3, [r3, #4]
20015420:	2b00      	cmp	r3, #0
20015422:	d157      	bne.n	200154d4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1bc>
      {
        return HAL_ERROR;
20015424:	2301      	movs	r3, #1
20015426:	e236      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20015428:	687b      	ldr	r3, [r7, #4]
2001542a:	685b      	ldr	r3, [r3, #4]
2001542c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20015430:	d106      	bne.n	20015440 <HAL_PWREx_EnterUnderDriveSTOPMode+0x128>
20015432:	4b91      	ldr	r3, [pc, #580]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015434:	681b      	ldr	r3, [r3, #0]
20015436:	4a90      	ldr	r2, [pc, #576]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2001543c:	6013      	str	r3, [r2, #0]
2001543e:	e01d      	b.n	2001547c <HAL_PWREx_EnterUnderDriveSTOPMode+0x164>
20015440:	687b      	ldr	r3, [r7, #4]
20015442:	685b      	ldr	r3, [r3, #4]
20015444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20015448:	d10c      	bne.n	20015464 <HAL_PWREx_EnterUnderDriveSTOPMode+0x14c>
2001544a:	4b8b      	ldr	r3, [pc, #556]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
2001544c:	681b      	ldr	r3, [r3, #0]
2001544e:	4a8a      	ldr	r2, [pc, #552]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20015454:	6013      	str	r3, [r2, #0]
20015456:	4b88      	ldr	r3, [pc, #544]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015458:	681b      	ldr	r3, [r3, #0]
2001545a:	4a87      	ldr	r2, [pc, #540]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
2001545c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20015460:	6013      	str	r3, [r2, #0]
20015462:	e00b      	b.n	2001547c <HAL_PWREx_EnterUnderDriveSTOPMode+0x164>
20015464:	4b84      	ldr	r3, [pc, #528]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015466:	681b      	ldr	r3, [r3, #0]
20015468:	4a83      	ldr	r2, [pc, #524]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
2001546a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2001546e:	6013      	str	r3, [r2, #0]
20015470:	4b81      	ldr	r3, [pc, #516]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015472:	681b      	ldr	r3, [r3, #0]
20015474:	4a80      	ldr	r2, [pc, #512]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2001547a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
2001547c:	687b      	ldr	r3, [r7, #4]
2001547e:	685b      	ldr	r3, [r3, #4]
20015480:	2b00      	cmp	r3, #0
20015482:	d013      	beq.n	200154ac <HAL_PWREx_EnterUnderDriveSTOPMode+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20015484:	f7fb fb8e 	bl	20010ba4 <HAL_GetTick>
20015488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2001548a:	e008      	b.n	2001549e <HAL_PWREx_EnterUnderDriveSTOPMode+0x186>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2001548c:	f7fb fb8a 	bl	20010ba4 <HAL_GetTick>
20015490:	4602      	mov	r2, r0
20015492:	693b      	ldr	r3, [r7, #16]
20015494:	1ad3      	subs	r3, r2, r3
20015496:	2b64      	cmp	r3, #100	; 0x64
20015498:	d901      	bls.n	2001549e <HAL_PWREx_EnterUnderDriveSTOPMode+0x186>
          {
            return HAL_TIMEOUT;
2001549a:	2303      	movs	r3, #3
2001549c:	e1fb      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2001549e:	4b76      	ldr	r3, [pc, #472]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
200154a0:	681b      	ldr	r3, [r3, #0]
200154a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200154a6:	2b00      	cmp	r3, #0
200154a8:	d0f0      	beq.n	2001548c <HAL_PWREx_EnterUnderDriveSTOPMode+0x174>
200154aa:	e014      	b.n	200154d6 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1be>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
200154ac:	f7fb fb7a 	bl	20010ba4 <HAL_GetTick>
200154b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200154b2:	e008      	b.n	200154c6 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
200154b4:	f7fb fb76 	bl	20010ba4 <HAL_GetTick>
200154b8:	4602      	mov	r2, r0
200154ba:	693b      	ldr	r3, [r7, #16]
200154bc:	1ad3      	subs	r3, r2, r3
200154be:	2b64      	cmp	r3, #100	; 0x64
200154c0:	d901      	bls.n	200154c6 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1ae>
          {
            return HAL_TIMEOUT;
200154c2:	2303      	movs	r3, #3
200154c4:	e1e7      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200154c6:	4b6c      	ldr	r3, [pc, #432]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
200154c8:	681b      	ldr	r3, [r3, #0]
200154ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200154ce:	2b00      	cmp	r3, #0
200154d0:	d1f0      	bne.n	200154b4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x19c>
200154d2:	e000      	b.n	200154d6 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1be>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200154d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
200154d6:	687b      	ldr	r3, [r7, #4]
200154d8:	681b      	ldr	r3, [r3, #0]
200154da:	f003 0302 	and.w	r3, r3, #2
200154de:	2b00      	cmp	r3, #0
200154e0:	d063      	beq.n	200155aa <HAL_PWREx_EnterUnderDriveSTOPMode+0x292>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
200154e2:	4b65      	ldr	r3, [pc, #404]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
200154e4:	689b      	ldr	r3, [r3, #8]
200154e6:	f003 030c 	and.w	r3, r3, #12
200154ea:	2b00      	cmp	r3, #0
200154ec:	d00b      	beq.n	20015506 <HAL_PWREx_EnterUnderDriveSTOPMode+0x1ee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200154ee:	4b62      	ldr	r3, [pc, #392]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
200154f0:	689b      	ldr	r3, [r3, #8]
200154f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
200154f6:	2b08      	cmp	r3, #8
200154f8:	d11c      	bne.n	20015534 <HAL_PWREx_EnterUnderDriveSTOPMode+0x21c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200154fa:	4b5f      	ldr	r3, [pc, #380]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
200154fc:	685b      	ldr	r3, [r3, #4]
200154fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20015502:	2b00      	cmp	r3, #0
20015504:	d116      	bne.n	20015534 <HAL_PWREx_EnterUnderDriveSTOPMode+0x21c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20015506:	4b5c      	ldr	r3, [pc, #368]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015508:	681b      	ldr	r3, [r3, #0]
2001550a:	f003 0302 	and.w	r3, r3, #2
2001550e:	2b00      	cmp	r3, #0
20015510:	d005      	beq.n	2001551e <HAL_PWREx_EnterUnderDriveSTOPMode+0x206>
20015512:	687b      	ldr	r3, [r7, #4]
20015514:	68db      	ldr	r3, [r3, #12]
20015516:	2b01      	cmp	r3, #1
20015518:	d001      	beq.n	2001551e <HAL_PWREx_EnterUnderDriveSTOPMode+0x206>
      {
        return HAL_ERROR;
2001551a:	2301      	movs	r3, #1
2001551c:	e1bb      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2001551e:	4b56      	ldr	r3, [pc, #344]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015520:	681b      	ldr	r3, [r3, #0]
20015522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20015526:	687b      	ldr	r3, [r7, #4]
20015528:	691b      	ldr	r3, [r3, #16]
2001552a:	00db      	lsls	r3, r3, #3
2001552c:	4952      	ldr	r1, [pc, #328]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
2001552e:	4313      	orrs	r3, r2
20015530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20015532:	e03a      	b.n	200155aa <HAL_PWREx_EnterUnderDriveSTOPMode+0x292>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20015534:	687b      	ldr	r3, [r7, #4]
20015536:	68db      	ldr	r3, [r3, #12]
20015538:	2b00      	cmp	r3, #0
2001553a:	d020      	beq.n	2001557e <HAL_PWREx_EnterUnderDriveSTOPMode+0x266>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2001553c:	4b4f      	ldr	r3, [pc, #316]	; (2001567c <HAL_PWREx_EnterUnderDriveSTOPMode+0x364>)
2001553e:	2201      	movs	r2, #1
20015540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20015542:	f7fb fb2f 	bl	20010ba4 <HAL_GetTick>
20015546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20015548:	e008      	b.n	2001555c <HAL_PWREx_EnterUnderDriveSTOPMode+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2001554a:	f7fb fb2b 	bl	20010ba4 <HAL_GetTick>
2001554e:	4602      	mov	r2, r0
20015550:	693b      	ldr	r3, [r7, #16]
20015552:	1ad3      	subs	r3, r2, r3
20015554:	2b02      	cmp	r3, #2
20015556:	d901      	bls.n	2001555c <HAL_PWREx_EnterUnderDriveSTOPMode+0x244>
          {
            return HAL_TIMEOUT;
20015558:	2303      	movs	r3, #3
2001555a:	e19c      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2001555c:	4b46      	ldr	r3, [pc, #280]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
2001555e:	681b      	ldr	r3, [r3, #0]
20015560:	f003 0302 	and.w	r3, r3, #2
20015564:	2b00      	cmp	r3, #0
20015566:	d0f0      	beq.n	2001554a <HAL_PWREx_EnterUnderDriveSTOPMode+0x232>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20015568:	4b43      	ldr	r3, [pc, #268]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
2001556a:	681b      	ldr	r3, [r3, #0]
2001556c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20015570:	687b      	ldr	r3, [r7, #4]
20015572:	691b      	ldr	r3, [r3, #16]
20015574:	00db      	lsls	r3, r3, #3
20015576:	4940      	ldr	r1, [pc, #256]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015578:	4313      	orrs	r3, r2
2001557a:	600b      	str	r3, [r1, #0]
2001557c:	e015      	b.n	200155aa <HAL_PWREx_EnterUnderDriveSTOPMode+0x292>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2001557e:	4b3f      	ldr	r3, [pc, #252]	; (2001567c <HAL_PWREx_EnterUnderDriveSTOPMode+0x364>)
20015580:	2200      	movs	r2, #0
20015582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20015584:	f7fb fb0e 	bl	20010ba4 <HAL_GetTick>
20015588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2001558a:	e008      	b.n	2001559e <HAL_PWREx_EnterUnderDriveSTOPMode+0x286>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2001558c:	f7fb fb0a 	bl	20010ba4 <HAL_GetTick>
20015590:	4602      	mov	r2, r0
20015592:	693b      	ldr	r3, [r7, #16]
20015594:	1ad3      	subs	r3, r2, r3
20015596:	2b02      	cmp	r3, #2
20015598:	d901      	bls.n	2001559e <HAL_PWREx_EnterUnderDriveSTOPMode+0x286>
          {
            return HAL_TIMEOUT;
2001559a:	2303      	movs	r3, #3
2001559c:	e17b      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2001559e:	4b36      	ldr	r3, [pc, #216]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
200155a0:	681b      	ldr	r3, [r3, #0]
200155a2:	f003 0302 	and.w	r3, r3, #2
200155a6:	2b00      	cmp	r3, #0
200155a8:	d1f0      	bne.n	2001558c <HAL_PWREx_EnterUnderDriveSTOPMode+0x274>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
200155aa:	687b      	ldr	r3, [r7, #4]
200155ac:	681b      	ldr	r3, [r3, #0]
200155ae:	f003 0308 	and.w	r3, r3, #8
200155b2:	2b00      	cmp	r3, #0
200155b4:	d030      	beq.n	20015618 <HAL_PWREx_EnterUnderDriveSTOPMode+0x300>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
200155b6:	687b      	ldr	r3, [r7, #4]
200155b8:	695b      	ldr	r3, [r3, #20]
200155ba:	2b00      	cmp	r3, #0
200155bc:	d016      	beq.n	200155ec <HAL_PWREx_EnterUnderDriveSTOPMode+0x2d4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
200155be:	4b30      	ldr	r3, [pc, #192]	; (20015680 <HAL_PWREx_EnterUnderDriveSTOPMode+0x368>)
200155c0:	2201      	movs	r2, #1
200155c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200155c4:	f7fb faee 	bl	20010ba4 <HAL_GetTick>
200155c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200155ca:	e008      	b.n	200155de <HAL_PWREx_EnterUnderDriveSTOPMode+0x2c6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
200155cc:	f7fb faea 	bl	20010ba4 <HAL_GetTick>
200155d0:	4602      	mov	r2, r0
200155d2:	693b      	ldr	r3, [r7, #16]
200155d4:	1ad3      	subs	r3, r2, r3
200155d6:	2b02      	cmp	r3, #2
200155d8:	d901      	bls.n	200155de <HAL_PWREx_EnterUnderDriveSTOPMode+0x2c6>
        {
          return HAL_TIMEOUT;
200155da:	2303      	movs	r3, #3
200155dc:	e15b      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200155de:	4b26      	ldr	r3, [pc, #152]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
200155e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200155e2:	f003 0302 	and.w	r3, r3, #2
200155e6:	2b00      	cmp	r3, #0
200155e8:	d0f0      	beq.n	200155cc <HAL_PWREx_EnterUnderDriveSTOPMode+0x2b4>
200155ea:	e015      	b.n	20015618 <HAL_PWREx_EnterUnderDriveSTOPMode+0x300>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
200155ec:	4b24      	ldr	r3, [pc, #144]	; (20015680 <HAL_PWREx_EnterUnderDriveSTOPMode+0x368>)
200155ee:	2200      	movs	r2, #0
200155f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
200155f2:	f7fb fad7 	bl	20010ba4 <HAL_GetTick>
200155f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200155f8:	e008      	b.n	2001560c <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
200155fa:	f7fb fad3 	bl	20010ba4 <HAL_GetTick>
200155fe:	4602      	mov	r2, r0
20015600:	693b      	ldr	r3, [r7, #16]
20015602:	1ad3      	subs	r3, r2, r3
20015604:	2b02      	cmp	r3, #2
20015606:	d901      	bls.n	2001560c <HAL_PWREx_EnterUnderDriveSTOPMode+0x2f4>
        {
          return HAL_TIMEOUT;
20015608:	2303      	movs	r3, #3
2001560a:	e144      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2001560c:	4b1a      	ldr	r3, [pc, #104]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
2001560e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20015610:	f003 0302 	and.w	r3, r3, #2
20015614:	2b00      	cmp	r3, #0
20015616:	d1f0      	bne.n	200155fa <HAL_PWREx_EnterUnderDriveSTOPMode+0x2e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20015618:	687b      	ldr	r3, [r7, #4]
2001561a:	681b      	ldr	r3, [r3, #0]
2001561c:	f003 0304 	and.w	r3, r3, #4
20015620:	2b00      	cmp	r3, #0
20015622:	f000 80a0 	beq.w	20015766 <HAL_PWREx_EnterUnderDriveSTOPMode+0x44e>
  {
    FlagStatus       pwrclkchanged = RESET;
20015626:	2300      	movs	r3, #0
20015628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2001562a:	4b13      	ldr	r3, [pc, #76]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
2001562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2001562e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20015632:	2b00      	cmp	r3, #0
20015634:	d10f      	bne.n	20015656 <HAL_PWREx_EnterUnderDriveSTOPMode+0x33e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
20015636:	2300      	movs	r3, #0
20015638:	60bb      	str	r3, [r7, #8]
2001563a:	4b0f      	ldr	r3, [pc, #60]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
2001563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2001563e:	4a0e      	ldr	r2, [pc, #56]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20015644:	6413      	str	r3, [r2, #64]	; 0x40
20015646:	4b0c      	ldr	r3, [pc, #48]	; (20015678 <HAL_PWREx_EnterUnderDriveSTOPMode+0x360>)
20015648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2001564a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2001564e:	60bb      	str	r3, [r7, #8]
20015650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20015652:	2301      	movs	r3, #1
20015654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20015656:	4b0b      	ldr	r3, [pc, #44]	; (20015684 <HAL_PWREx_EnterUnderDriveSTOPMode+0x36c>)
20015658:	681b      	ldr	r3, [r3, #0]
2001565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2001565e:	2b00      	cmp	r3, #0
20015660:	d121      	bne.n	200156a6 <HAL_PWREx_EnterUnderDriveSTOPMode+0x38e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
20015662:	4b08      	ldr	r3, [pc, #32]	; (20015684 <HAL_PWREx_EnterUnderDriveSTOPMode+0x36c>)
20015664:	681b      	ldr	r3, [r3, #0]
20015666:	4a07      	ldr	r2, [pc, #28]	; (20015684 <HAL_PWREx_EnterUnderDriveSTOPMode+0x36c>)
20015668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2001566c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2001566e:	f7fb fa99 	bl	20010ba4 <HAL_GetTick>
20015672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20015674:	e011      	b.n	2001569a <HAL_PWREx_EnterUnderDriveSTOPMode+0x382>
20015676:	bf00      	nop
20015678:	40023800 	.word	0x40023800
2001567c:	42470000 	.word	0x42470000
20015680:	42470e80 	.word	0x42470e80
20015684:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20015688:	f7fb fa8c 	bl	20010ba4 <HAL_GetTick>
2001568c:	4602      	mov	r2, r0
2001568e:	693b      	ldr	r3, [r7, #16]
20015690:	1ad3      	subs	r3, r2, r3
20015692:	2b02      	cmp	r3, #2
20015694:	d901      	bls.n	2001569a <HAL_PWREx_EnterUnderDriveSTOPMode+0x382>
        {
          return HAL_TIMEOUT;
20015696:	2303      	movs	r3, #3
20015698:	e0fd      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2001569a:	4b81      	ldr	r3, [pc, #516]	; (200158a0 <HAL_PWREx_EnterUnderDriveSTOPMode+0x588>)
2001569c:	681b      	ldr	r3, [r3, #0]
2001569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
200156a2:	2b00      	cmp	r3, #0
200156a4:	d0f0      	beq.n	20015688 <HAL_PWREx_EnterUnderDriveSTOPMode+0x370>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
200156a6:	687b      	ldr	r3, [r7, #4]
200156a8:	689b      	ldr	r3, [r3, #8]
200156aa:	2b01      	cmp	r3, #1
200156ac:	d106      	bne.n	200156bc <HAL_PWREx_EnterUnderDriveSTOPMode+0x3a4>
200156ae:	4b7d      	ldr	r3, [pc, #500]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200156b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200156b2:	4a7c      	ldr	r2, [pc, #496]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200156b4:	f043 0301 	orr.w	r3, r3, #1
200156b8:	6713      	str	r3, [r2, #112]	; 0x70
200156ba:	e01c      	b.n	200156f6 <HAL_PWREx_EnterUnderDriveSTOPMode+0x3de>
200156bc:	687b      	ldr	r3, [r7, #4]
200156be:	689b      	ldr	r3, [r3, #8]
200156c0:	2b05      	cmp	r3, #5
200156c2:	d10c      	bne.n	200156de <HAL_PWREx_EnterUnderDriveSTOPMode+0x3c6>
200156c4:	4b77      	ldr	r3, [pc, #476]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200156c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200156c8:	4a76      	ldr	r2, [pc, #472]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200156ca:	f043 0304 	orr.w	r3, r3, #4
200156ce:	6713      	str	r3, [r2, #112]	; 0x70
200156d0:	4b74      	ldr	r3, [pc, #464]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200156d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200156d4:	4a73      	ldr	r2, [pc, #460]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200156d6:	f043 0301 	orr.w	r3, r3, #1
200156da:	6713      	str	r3, [r2, #112]	; 0x70
200156dc:	e00b      	b.n	200156f6 <HAL_PWREx_EnterUnderDriveSTOPMode+0x3de>
200156de:	4b71      	ldr	r3, [pc, #452]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200156e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200156e2:	4a70      	ldr	r2, [pc, #448]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200156e4:	f023 0301 	bic.w	r3, r3, #1
200156e8:	6713      	str	r3, [r2, #112]	; 0x70
200156ea:	4b6e      	ldr	r3, [pc, #440]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200156ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200156ee:	4a6d      	ldr	r2, [pc, #436]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200156f0:	f023 0304 	bic.w	r3, r3, #4
200156f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
200156f6:	687b      	ldr	r3, [r7, #4]
200156f8:	689b      	ldr	r3, [r3, #8]
200156fa:	2b00      	cmp	r3, #0
200156fc:	d015      	beq.n	2001572a <HAL_PWREx_EnterUnderDriveSTOPMode+0x412>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200156fe:	f7fb fa51 	bl	20010ba4 <HAL_GetTick>
20015702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20015704:	e00a      	b.n	2001571c <HAL_PWREx_EnterUnderDriveSTOPMode+0x404>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20015706:	f7fb fa4d 	bl	20010ba4 <HAL_GetTick>
2001570a:	4602      	mov	r2, r0
2001570c:	693b      	ldr	r3, [r7, #16]
2001570e:	1ad3      	subs	r3, r2, r3
20015710:	f241 3288 	movw	r2, #5000	; 0x1388
20015714:	4293      	cmp	r3, r2
20015716:	d901      	bls.n	2001571c <HAL_PWREx_EnterUnderDriveSTOPMode+0x404>
        {
          return HAL_TIMEOUT;
20015718:	2303      	movs	r3, #3
2001571a:	e0bc      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2001571c:	4b61      	ldr	r3, [pc, #388]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
2001571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20015720:	f003 0302 	and.w	r3, r3, #2
20015724:	2b00      	cmp	r3, #0
20015726:	d0ee      	beq.n	20015706 <HAL_PWREx_EnterUnderDriveSTOPMode+0x3ee>
20015728:	e014      	b.n	20015754 <HAL_PWREx_EnterUnderDriveSTOPMode+0x43c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
2001572a:	f7fb fa3b 	bl	20010ba4 <HAL_GetTick>
2001572e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20015730:	e00a      	b.n	20015748 <HAL_PWREx_EnterUnderDriveSTOPMode+0x430>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20015732:	f7fb fa37 	bl	20010ba4 <HAL_GetTick>
20015736:	4602      	mov	r2, r0
20015738:	693b      	ldr	r3, [r7, #16]
2001573a:	1ad3      	subs	r3, r2, r3
2001573c:	f241 3288 	movw	r2, #5000	; 0x1388
20015740:	4293      	cmp	r3, r2
20015742:	d901      	bls.n	20015748 <HAL_PWREx_EnterUnderDriveSTOPMode+0x430>
        {
          return HAL_TIMEOUT;
20015744:	2303      	movs	r3, #3
20015746:	e0a6      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20015748:	4b56      	ldr	r3, [pc, #344]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
2001574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2001574c:	f003 0302 	and.w	r3, r3, #2
20015750:	2b00      	cmp	r3, #0
20015752:	d1ee      	bne.n	20015732 <HAL_PWREx_EnterUnderDriveSTOPMode+0x41a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
20015754:	7dfb      	ldrb	r3, [r7, #23]
20015756:	2b01      	cmp	r3, #1
20015758:	d105      	bne.n	20015766 <HAL_PWREx_EnterUnderDriveSTOPMode+0x44e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2001575a:	4b52      	ldr	r3, [pc, #328]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
2001575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2001575e:	4a51      	ldr	r2, [pc, #324]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
20015760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20015764:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20015766:	687b      	ldr	r3, [r7, #4]
20015768:	699b      	ldr	r3, [r3, #24]
2001576a:	2b00      	cmp	r3, #0
2001576c:	f000 8092 	beq.w	20015894 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20015770:	4b4c      	ldr	r3, [pc, #304]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
20015772:	689b      	ldr	r3, [r3, #8]
20015774:	f003 030c 	and.w	r3, r3, #12
20015778:	2b08      	cmp	r3, #8
2001577a:	d05c      	beq.n	20015836 <HAL_PWREx_EnterUnderDriveSTOPMode+0x51e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2001577c:	687b      	ldr	r3, [r7, #4]
2001577e:	699b      	ldr	r3, [r3, #24]
20015780:	2b02      	cmp	r3, #2
20015782:	d141      	bne.n	20015808 <HAL_PWREx_EnterUnderDriveSTOPMode+0x4f0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20015784:	4b48      	ldr	r3, [pc, #288]	; (200158a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x590>)
20015786:	2200      	movs	r2, #0
20015788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2001578a:	f7fb fa0b 	bl	20010ba4 <HAL_GetTick>
2001578e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20015790:	e008      	b.n	200157a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20015792:	f7fb fa07 	bl	20010ba4 <HAL_GetTick>
20015796:	4602      	mov	r2, r0
20015798:	693b      	ldr	r3, [r7, #16]
2001579a:	1ad3      	subs	r3, r2, r3
2001579c:	2b02      	cmp	r3, #2
2001579e:	d901      	bls.n	200157a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x48c>
          {
            return HAL_TIMEOUT;
200157a0:	2303      	movs	r3, #3
200157a2:	e078      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200157a4:	4b3f      	ldr	r3, [pc, #252]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200157a6:	681b      	ldr	r3, [r3, #0]
200157a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200157ac:	2b00      	cmp	r3, #0
200157ae:	d1f0      	bne.n	20015792 <HAL_PWREx_EnterUnderDriveSTOPMode+0x47a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
200157b0:	687b      	ldr	r3, [r7, #4]
200157b2:	69da      	ldr	r2, [r3, #28]
200157b4:	687b      	ldr	r3, [r7, #4]
200157b6:	6a1b      	ldr	r3, [r3, #32]
200157b8:	431a      	orrs	r2, r3
200157ba:	687b      	ldr	r3, [r7, #4]
200157bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200157be:	019b      	lsls	r3, r3, #6
200157c0:	431a      	orrs	r2, r3
200157c2:	687b      	ldr	r3, [r7, #4]
200157c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200157c6:	085b      	lsrs	r3, r3, #1
200157c8:	3b01      	subs	r3, #1
200157ca:	041b      	lsls	r3, r3, #16
200157cc:	431a      	orrs	r2, r3
200157ce:	687b      	ldr	r3, [r7, #4]
200157d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200157d2:	061b      	lsls	r3, r3, #24
200157d4:	4933      	ldr	r1, [pc, #204]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200157d6:	4313      	orrs	r3, r2
200157d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
200157da:	4b33      	ldr	r3, [pc, #204]	; (200158a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x590>)
200157dc:	2201      	movs	r2, #1
200157de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200157e0:	f7fb f9e0 	bl	20010ba4 <HAL_GetTick>
200157e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200157e6:	e008      	b.n	200157fa <HAL_PWREx_EnterUnderDriveSTOPMode+0x4e2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200157e8:	f7fb f9dc 	bl	20010ba4 <HAL_GetTick>
200157ec:	4602      	mov	r2, r0
200157ee:	693b      	ldr	r3, [r7, #16]
200157f0:	1ad3      	subs	r3, r2, r3
200157f2:	2b02      	cmp	r3, #2
200157f4:	d901      	bls.n	200157fa <HAL_PWREx_EnterUnderDriveSTOPMode+0x4e2>
          {
            return HAL_TIMEOUT;
200157f6:	2303      	movs	r3, #3
200157f8:	e04d      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200157fa:	4b2a      	ldr	r3, [pc, #168]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
200157fc:	681b      	ldr	r3, [r3, #0]
200157fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20015802:	2b00      	cmp	r3, #0
20015804:	d0f0      	beq.n	200157e8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x4d0>
20015806:	e045      	b.n	20015894 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20015808:	4b27      	ldr	r3, [pc, #156]	; (200158a8 <HAL_PWREx_EnterUnderDriveSTOPMode+0x590>)
2001580a:	2200      	movs	r2, #0
2001580c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2001580e:	f7fb f9c9 	bl	20010ba4 <HAL_GetTick>
20015812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20015814:	e008      	b.n	20015828 <HAL_PWREx_EnterUnderDriveSTOPMode+0x510>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20015816:	f7fb f9c5 	bl	20010ba4 <HAL_GetTick>
2001581a:	4602      	mov	r2, r0
2001581c:	693b      	ldr	r3, [r7, #16]
2001581e:	1ad3      	subs	r3, r2, r3
20015820:	2b02      	cmp	r3, #2
20015822:	d901      	bls.n	20015828 <HAL_PWREx_EnterUnderDriveSTOPMode+0x510>
          {
            return HAL_TIMEOUT;
20015824:	2303      	movs	r3, #3
20015826:	e036      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20015828:	4b1e      	ldr	r3, [pc, #120]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
2001582a:	681b      	ldr	r3, [r3, #0]
2001582c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20015830:	2b00      	cmp	r3, #0
20015832:	d1f0      	bne.n	20015816 <HAL_PWREx_EnterUnderDriveSTOPMode+0x4fe>
20015834:	e02e      	b.n	20015894 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20015836:	687b      	ldr	r3, [r7, #4]
20015838:	699b      	ldr	r3, [r3, #24]
2001583a:	2b01      	cmp	r3, #1
2001583c:	d101      	bne.n	20015842 <HAL_PWREx_EnterUnderDriveSTOPMode+0x52a>
      {
        return HAL_ERROR;
2001583e:	2301      	movs	r3, #1
20015840:	e029      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
20015842:	4b18      	ldr	r3, [pc, #96]	; (200158a4 <HAL_PWREx_EnterUnderDriveSTOPMode+0x58c>)
20015844:	685b      	ldr	r3, [r3, #4]
20015846:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20015848:	68fb      	ldr	r3, [r7, #12]
2001584a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2001584e:	687b      	ldr	r3, [r7, #4]
20015850:	69db      	ldr	r3, [r3, #28]
20015852:	429a      	cmp	r2, r3
20015854:	d11c      	bne.n	20015890 <HAL_PWREx_EnterUnderDriveSTOPMode+0x578>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20015856:	68fb      	ldr	r3, [r7, #12]
20015858:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2001585c:	687b      	ldr	r3, [r7, #4]
2001585e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20015860:	429a      	cmp	r2, r3
20015862:	d115      	bne.n	20015890 <HAL_PWREx_EnterUnderDriveSTOPMode+0x578>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
20015864:	68fa      	ldr	r2, [r7, #12]
20015866:	f647 73c0 	movw	r3, #32704	; 0x7fc0
2001586a:	4013      	ands	r3, r2
2001586c:	687a      	ldr	r2, [r7, #4]
2001586e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
20015870:	4293      	cmp	r3, r2
20015872:	d10d      	bne.n	20015890 <HAL_PWREx_EnterUnderDriveSTOPMode+0x578>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
20015874:	68fb      	ldr	r3, [r7, #12]
20015876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2001587a:	687b      	ldr	r3, [r7, #4]
2001587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2001587e:	429a      	cmp	r2, r3
20015880:	d106      	bne.n	20015890 <HAL_PWREx_EnterUnderDriveSTOPMode+0x578>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
20015882:	68fb      	ldr	r3, [r7, #12]
20015884:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
20015888:	687b      	ldr	r3, [r7, #4]
2001588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2001588c:	429a      	cmp	r2, r3
2001588e:	d001      	beq.n	20015894 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57c>
        {
          return HAL_ERROR;
20015890:	2301      	movs	r3, #1
20015892:	e000      	b.n	20015896 <HAL_PWREx_EnterUnderDriveSTOPMode+0x57e>
        }
      }
    }
  }
  return HAL_OK;
20015894:	2300      	movs	r3, #0
}
20015896:	4618      	mov	r0, r3
20015898:	3718      	adds	r7, #24
2001589a:	46bd      	mov	sp, r7
2001589c:	bd80      	pop	{r7, pc}
2001589e:	bf00      	nop
200158a0:	40007000 	.word	0x40007000
200158a4:	40023800 	.word	0x40023800
200158a8:	42470060 	.word	0x42470060

200158ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
200158ac:	b580      	push	{r7, lr}
200158ae:	b084      	sub	sp, #16
200158b0:	af00      	add	r7, sp, #0
200158b2:	6078      	str	r0, [r7, #4]
200158b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
200158b6:	687b      	ldr	r3, [r7, #4]
200158b8:	2b00      	cmp	r3, #0
200158ba:	d101      	bne.n	200158c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
200158bc:	2301      	movs	r3, #1
200158be:	e0cc      	b.n	20015a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
200158c0:	4b68      	ldr	r3, [pc, #416]	; (20015a64 <HAL_RCC_ClockConfig+0x1b8>)
200158c2:	681b      	ldr	r3, [r3, #0]
200158c4:	f003 030f 	and.w	r3, r3, #15
200158c8:	683a      	ldr	r2, [r7, #0]
200158ca:	429a      	cmp	r2, r3
200158cc:	d90c      	bls.n	200158e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200158ce:	4b65      	ldr	r3, [pc, #404]	; (20015a64 <HAL_RCC_ClockConfig+0x1b8>)
200158d0:	683a      	ldr	r2, [r7, #0]
200158d2:	b2d2      	uxtb	r2, r2
200158d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
200158d6:	4b63      	ldr	r3, [pc, #396]	; (20015a64 <HAL_RCC_ClockConfig+0x1b8>)
200158d8:	681b      	ldr	r3, [r3, #0]
200158da:	f003 030f 	and.w	r3, r3, #15
200158de:	683a      	ldr	r2, [r7, #0]
200158e0:	429a      	cmp	r2, r3
200158e2:	d001      	beq.n	200158e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
200158e4:	2301      	movs	r3, #1
200158e6:	e0b8      	b.n	20015a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
200158e8:	687b      	ldr	r3, [r7, #4]
200158ea:	681b      	ldr	r3, [r3, #0]
200158ec:	f003 0302 	and.w	r3, r3, #2
200158f0:	2b00      	cmp	r3, #0
200158f2:	d020      	beq.n	20015936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
200158f4:	687b      	ldr	r3, [r7, #4]
200158f6:	681b      	ldr	r3, [r3, #0]
200158f8:	f003 0304 	and.w	r3, r3, #4
200158fc:	2b00      	cmp	r3, #0
200158fe:	d005      	beq.n	2001590c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20015900:	4b59      	ldr	r3, [pc, #356]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
20015902:	689b      	ldr	r3, [r3, #8]
20015904:	4a58      	ldr	r2, [pc, #352]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
20015906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2001590a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2001590c:	687b      	ldr	r3, [r7, #4]
2001590e:	681b      	ldr	r3, [r3, #0]
20015910:	f003 0308 	and.w	r3, r3, #8
20015914:	2b00      	cmp	r3, #0
20015916:	d005      	beq.n	20015924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20015918:	4b53      	ldr	r3, [pc, #332]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
2001591a:	689b      	ldr	r3, [r3, #8]
2001591c:	4a52      	ldr	r2, [pc, #328]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
2001591e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
20015922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20015924:	4b50      	ldr	r3, [pc, #320]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
20015926:	689b      	ldr	r3, [r3, #8]
20015928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
2001592c:	687b      	ldr	r3, [r7, #4]
2001592e:	689b      	ldr	r3, [r3, #8]
20015930:	494d      	ldr	r1, [pc, #308]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
20015932:	4313      	orrs	r3, r2
20015934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20015936:	687b      	ldr	r3, [r7, #4]
20015938:	681b      	ldr	r3, [r3, #0]
2001593a:	f003 0301 	and.w	r3, r3, #1
2001593e:	2b00      	cmp	r3, #0
20015940:	d044      	beq.n	200159cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20015942:	687b      	ldr	r3, [r7, #4]
20015944:	685b      	ldr	r3, [r3, #4]
20015946:	2b01      	cmp	r3, #1
20015948:	d107      	bne.n	2001595a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2001594a:	4b47      	ldr	r3, [pc, #284]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
2001594c:	681b      	ldr	r3, [r3, #0]
2001594e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20015952:	2b00      	cmp	r3, #0
20015954:	d119      	bne.n	2001598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20015956:	2301      	movs	r3, #1
20015958:	e07f      	b.n	20015a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2001595a:	687b      	ldr	r3, [r7, #4]
2001595c:	685b      	ldr	r3, [r3, #4]
2001595e:	2b02      	cmp	r3, #2
20015960:	d003      	beq.n	2001596a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
20015962:	687b      	ldr	r3, [r7, #4]
20015964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20015966:	2b03      	cmp	r3, #3
20015968:	d107      	bne.n	2001597a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2001596a:	4b3f      	ldr	r3, [pc, #252]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
2001596c:	681b      	ldr	r3, [r3, #0]
2001596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20015972:	2b00      	cmp	r3, #0
20015974:	d109      	bne.n	2001598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20015976:	2301      	movs	r3, #1
20015978:	e06f      	b.n	20015a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2001597a:	4b3b      	ldr	r3, [pc, #236]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
2001597c:	681b      	ldr	r3, [r3, #0]
2001597e:	f003 0302 	and.w	r3, r3, #2
20015982:	2b00      	cmp	r3, #0
20015984:	d101      	bne.n	2001598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20015986:	2301      	movs	r3, #1
20015988:	e067      	b.n	20015a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2001598a:	4b37      	ldr	r3, [pc, #220]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
2001598c:	689b      	ldr	r3, [r3, #8]
2001598e:	f023 0203 	bic.w	r2, r3, #3
20015992:	687b      	ldr	r3, [r7, #4]
20015994:	685b      	ldr	r3, [r3, #4]
20015996:	4934      	ldr	r1, [pc, #208]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
20015998:	4313      	orrs	r3, r2
2001599a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
2001599c:	f7fb f902 	bl	20010ba4 <HAL_GetTick>
200159a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
200159a2:	e00a      	b.n	200159ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
200159a4:	f7fb f8fe 	bl	20010ba4 <HAL_GetTick>
200159a8:	4602      	mov	r2, r0
200159aa:	68fb      	ldr	r3, [r7, #12]
200159ac:	1ad3      	subs	r3, r2, r3
200159ae:	f241 3288 	movw	r2, #5000	; 0x1388
200159b2:	4293      	cmp	r3, r2
200159b4:	d901      	bls.n	200159ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
200159b6:	2303      	movs	r3, #3
200159b8:	e04f      	b.n	20015a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
200159ba:	4b2b      	ldr	r3, [pc, #172]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
200159bc:	689b      	ldr	r3, [r3, #8]
200159be:	f003 020c 	and.w	r2, r3, #12
200159c2:	687b      	ldr	r3, [r7, #4]
200159c4:	685b      	ldr	r3, [r3, #4]
200159c6:	009b      	lsls	r3, r3, #2
200159c8:	429a      	cmp	r2, r3
200159ca:	d1eb      	bne.n	200159a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
200159cc:	4b25      	ldr	r3, [pc, #148]	; (20015a64 <HAL_RCC_ClockConfig+0x1b8>)
200159ce:	681b      	ldr	r3, [r3, #0]
200159d0:	f003 030f 	and.w	r3, r3, #15
200159d4:	683a      	ldr	r2, [r7, #0]
200159d6:	429a      	cmp	r2, r3
200159d8:	d20c      	bcs.n	200159f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200159da:	4b22      	ldr	r3, [pc, #136]	; (20015a64 <HAL_RCC_ClockConfig+0x1b8>)
200159dc:	683a      	ldr	r2, [r7, #0]
200159de:	b2d2      	uxtb	r2, r2
200159e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
200159e2:	4b20      	ldr	r3, [pc, #128]	; (20015a64 <HAL_RCC_ClockConfig+0x1b8>)
200159e4:	681b      	ldr	r3, [r3, #0]
200159e6:	f003 030f 	and.w	r3, r3, #15
200159ea:	683a      	ldr	r2, [r7, #0]
200159ec:	429a      	cmp	r2, r3
200159ee:	d001      	beq.n	200159f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
200159f0:	2301      	movs	r3, #1
200159f2:	e032      	b.n	20015a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
200159f4:	687b      	ldr	r3, [r7, #4]
200159f6:	681b      	ldr	r3, [r3, #0]
200159f8:	f003 0304 	and.w	r3, r3, #4
200159fc:	2b00      	cmp	r3, #0
200159fe:	d008      	beq.n	20015a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20015a00:	4b19      	ldr	r3, [pc, #100]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
20015a02:	689b      	ldr	r3, [r3, #8]
20015a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20015a08:	687b      	ldr	r3, [r7, #4]
20015a0a:	68db      	ldr	r3, [r3, #12]
20015a0c:	4916      	ldr	r1, [pc, #88]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
20015a0e:	4313      	orrs	r3, r2
20015a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20015a12:	687b      	ldr	r3, [r7, #4]
20015a14:	681b      	ldr	r3, [r3, #0]
20015a16:	f003 0308 	and.w	r3, r3, #8
20015a1a:	2b00      	cmp	r3, #0
20015a1c:	d009      	beq.n	20015a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20015a1e:	4b12      	ldr	r3, [pc, #72]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
20015a20:	689b      	ldr	r3, [r3, #8]
20015a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20015a26:	687b      	ldr	r3, [r7, #4]
20015a28:	691b      	ldr	r3, [r3, #16]
20015a2a:	00db      	lsls	r3, r3, #3
20015a2c:	490e      	ldr	r1, [pc, #56]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
20015a2e:	4313      	orrs	r3, r2
20015a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
20015a32:	f001 f99f 	bl	20016d74 <HAL_RCC_GetSysClockFreq>
20015a36:	4601      	mov	r1, r0
20015a38:	4b0b      	ldr	r3, [pc, #44]	; (20015a68 <HAL_RCC_ClockConfig+0x1bc>)
20015a3a:	689b      	ldr	r3, [r3, #8]
20015a3c:	091b      	lsrs	r3, r3, #4
20015a3e:	f003 030f 	and.w	r3, r3, #15
20015a42:	4a0a      	ldr	r2, [pc, #40]	; (20015a6c <HAL_RCC_ClockConfig+0x1c0>)
20015a44:	5cd3      	ldrb	r3, [r2, r3]
20015a46:	fa21 f303 	lsr.w	r3, r1, r3
20015a4a:	4a09      	ldr	r2, [pc, #36]	; (20015a70 <HAL_RCC_ClockConfig+0x1c4>)
20015a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
20015a4e:	4b09      	ldr	r3, [pc, #36]	; (20015a74 <HAL_RCC_ClockConfig+0x1c8>)
20015a50:	681b      	ldr	r3, [r3, #0]
20015a52:	4618      	mov	r0, r3
20015a54:	f7fb f862 	bl	20010b1c <HAL_InitTick>

  return HAL_OK;
20015a58:	2300      	movs	r3, #0
}
20015a5a:	4618      	mov	r0, r3
20015a5c:	3710      	adds	r7, #16
20015a5e:	46bd      	mov	sp, r7
20015a60:	bd80      	pop	{r7, pc}
20015a62:	bf00      	nop
20015a64:	40023c00 	.word	0x40023c00
20015a68:	40023800 	.word	0x40023800
20015a6c:	20019fd0 	.word	0x20019fd0
20015a70:	2000e4dc 	.word	0x2000e4dc
20015a74:	2000e4e0 	.word	0x2000e4e0

20015a78 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
20015a78:	b580      	push	{r7, lr}
20015a7a:	b08c      	sub	sp, #48	; 0x30
20015a7c:	af00      	add	r7, sp, #0
20015a7e:	60f8      	str	r0, [r7, #12]
20015a80:	60b9      	str	r1, [r7, #8]
20015a82:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
20015a84:	68fb      	ldr	r3, [r7, #12]
20015a86:	2b00      	cmp	r3, #0
20015a88:	d129      	bne.n	20015ade <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
20015a8a:	2300      	movs	r3, #0
20015a8c:	61bb      	str	r3, [r7, #24]
20015a8e:	4b2b      	ldr	r3, [pc, #172]	; (20015b3c <HAL_RCC_MCOConfig+0xc4>)
20015a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20015a92:	4a2a      	ldr	r2, [pc, #168]	; (20015b3c <HAL_RCC_MCOConfig+0xc4>)
20015a94:	f043 0301 	orr.w	r3, r3, #1
20015a98:	6313      	str	r3, [r2, #48]	; 0x30
20015a9a:	4b28      	ldr	r3, [pc, #160]	; (20015b3c <HAL_RCC_MCOConfig+0xc4>)
20015a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20015a9e:	f003 0301 	and.w	r3, r3, #1
20015aa2:	61bb      	str	r3, [r7, #24]
20015aa4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
20015aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
20015aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20015aac:	2302      	movs	r3, #2
20015aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20015ab0:	2303      	movs	r3, #3
20015ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20015ab4:	2300      	movs	r3, #0
20015ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
20015ab8:	2300      	movs	r3, #0
20015aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
20015abc:	f107 031c 	add.w	r3, r7, #28
20015ac0:	4619      	mov	r1, r3
20015ac2:	481f      	ldr	r0, [pc, #124]	; (20015b40 <HAL_RCC_MCOConfig+0xc8>)
20015ac4:	f7fe fdfa 	bl	200146bc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
20015ac8:	4b1c      	ldr	r3, [pc, #112]	; (20015b3c <HAL_RCC_MCOConfig+0xc4>)
20015aca:	689b      	ldr	r3, [r3, #8]
20015acc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
20015ad0:	68b9      	ldr	r1, [r7, #8]
20015ad2:	687b      	ldr	r3, [r7, #4]
20015ad4:	430b      	orrs	r3, r1
20015ad6:	4919      	ldr	r1, [pc, #100]	; (20015b3c <HAL_RCC_MCOConfig+0xc4>)
20015ad8:	4313      	orrs	r3, r2
20015ada:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
20015adc:	e029      	b.n	20015b32 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
20015ade:	2300      	movs	r3, #0
20015ae0:	617b      	str	r3, [r7, #20]
20015ae2:	4b16      	ldr	r3, [pc, #88]	; (20015b3c <HAL_RCC_MCOConfig+0xc4>)
20015ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20015ae6:	4a15      	ldr	r2, [pc, #84]	; (20015b3c <HAL_RCC_MCOConfig+0xc4>)
20015ae8:	f043 0304 	orr.w	r3, r3, #4
20015aec:	6313      	str	r3, [r2, #48]	; 0x30
20015aee:	4b13      	ldr	r3, [pc, #76]	; (20015b3c <HAL_RCC_MCOConfig+0xc4>)
20015af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20015af2:	f003 0304 	and.w	r3, r3, #4
20015af6:	617b      	str	r3, [r7, #20]
20015af8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
20015afa:	f44f 7300 	mov.w	r3, #512	; 0x200
20015afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20015b00:	2302      	movs	r3, #2
20015b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20015b04:	2303      	movs	r3, #3
20015b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20015b08:	2300      	movs	r3, #0
20015b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
20015b0c:	2300      	movs	r3, #0
20015b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
20015b10:	f107 031c 	add.w	r3, r7, #28
20015b14:	4619      	mov	r1, r3
20015b16:	480b      	ldr	r0, [pc, #44]	; (20015b44 <HAL_RCC_MCOConfig+0xcc>)
20015b18:	f7fe fdd0 	bl	200146bc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
20015b1c:	4b07      	ldr	r3, [pc, #28]	; (20015b3c <HAL_RCC_MCOConfig+0xc4>)
20015b1e:	689b      	ldr	r3, [r3, #8]
20015b20:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
20015b24:	687b      	ldr	r3, [r7, #4]
20015b26:	00d9      	lsls	r1, r3, #3
20015b28:	68bb      	ldr	r3, [r7, #8]
20015b2a:	430b      	orrs	r3, r1
20015b2c:	4903      	ldr	r1, [pc, #12]	; (20015b3c <HAL_RCC_MCOConfig+0xc4>)
20015b2e:	4313      	orrs	r3, r2
20015b30:	608b      	str	r3, [r1, #8]
}
20015b32:	bf00      	nop
20015b34:	3730      	adds	r7, #48	; 0x30
20015b36:	46bd      	mov	sp, r7
20015b38:	bd80      	pop	{r7, pc}
20015b3a:	bf00      	nop
20015b3c:	40023800 	.word	0x40023800
20015b40:	40020000 	.word	0x40020000
20015b44:	40020800 	.word	0x40020800

20015b48 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
20015b48:	b480      	push	{r7}
20015b4a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
20015b4c:	4b03      	ldr	r3, [pc, #12]	; (20015b5c <HAL_RCC_EnableCSS+0x14>)
20015b4e:	2201      	movs	r2, #1
20015b50:	601a      	str	r2, [r3, #0]
}
20015b52:	bf00      	nop
20015b54:	46bd      	mov	sp, r7
20015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
20015b5a:	4770      	bx	lr
20015b5c:	4247004c 	.word	0x4247004c

20015b60 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
20015b60:	b480      	push	{r7}
20015b62:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
20015b64:	4b03      	ldr	r3, [pc, #12]	; (20015b74 <HAL_RCC_DisableCSS+0x14>)
20015b66:	2200      	movs	r2, #0
20015b68:	601a      	str	r2, [r3, #0]
}
20015b6a:	bf00      	nop
20015b6c:	46bd      	mov	sp, r7
20015b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
20015b72:	4770      	bx	lr
20015b74:	4247004c 	.word	0x4247004c
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
20015b78:	b5f0      	push	{r4, r5, r6, r7, lr}
20015b7a:	b085      	sub	sp, #20
20015b7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20015b7e:	2300      	movs	r3, #0
20015b80:	607b      	str	r3, [r7, #4]
20015b82:	2300      	movs	r3, #0
20015b84:	60fb      	str	r3, [r7, #12]
20015b86:	2300      	movs	r3, #0
20015b88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
20015b8a:	2300      	movs	r3, #0
20015b8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20015b8e:	4b63      	ldr	r3, [pc, #396]	; (20015d1c <HAL_RCC_DisableCSS+0x1bc>)
20015b90:	689b      	ldr	r3, [r3, #8]
20015b92:	f003 030c 	and.w	r3, r3, #12
20015b96:	2b04      	cmp	r3, #4
20015b98:	d007      	beq.n	20015baa <HAL_RCC_DisableCSS+0x4a>
20015b9a:	2b08      	cmp	r3, #8
20015b9c:	d008      	beq.n	20015bb0 <HAL_RCC_DisableCSS+0x50>
20015b9e:	2b00      	cmp	r3, #0
20015ba0:	f040 80b4 	bne.w	20015d0c <HAL_RCC_DisableCSS+0x1ac>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20015ba4:	4b5e      	ldr	r3, [pc, #376]	; (20015d20 <HAL_RCC_DisableCSS+0x1c0>)
20015ba6:	60bb      	str	r3, [r7, #8]
       break;
20015ba8:	e0b3      	b.n	20015d12 <HAL_RCC_DisableCSS+0x1b2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20015baa:	4b5e      	ldr	r3, [pc, #376]	; (20015d24 <HAL_RCC_DisableCSS+0x1c4>)
20015bac:	60bb      	str	r3, [r7, #8]
      break;
20015bae:	e0b0      	b.n	20015d12 <HAL_RCC_DisableCSS+0x1b2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20015bb0:	4b5a      	ldr	r3, [pc, #360]	; (20015d1c <HAL_RCC_DisableCSS+0x1bc>)
20015bb2:	685b      	ldr	r3, [r3, #4]
20015bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20015bb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20015bba:	4b58      	ldr	r3, [pc, #352]	; (20015d1c <HAL_RCC_DisableCSS+0x1bc>)
20015bbc:	685b      	ldr	r3, [r3, #4]
20015bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20015bc2:	2b00      	cmp	r3, #0
20015bc4:	d04a      	beq.n	20015c5c <HAL_RCC_DisableCSS+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20015bc6:	4b55      	ldr	r3, [pc, #340]	; (20015d1c <HAL_RCC_DisableCSS+0x1bc>)
20015bc8:	685b      	ldr	r3, [r3, #4]
20015bca:	099b      	lsrs	r3, r3, #6
20015bcc:	f04f 0400 	mov.w	r4, #0
20015bd0:	f240 11ff 	movw	r1, #511	; 0x1ff
20015bd4:	f04f 0200 	mov.w	r2, #0
20015bd8:	ea03 0501 	and.w	r5, r3, r1
20015bdc:	ea04 0602 	and.w	r6, r4, r2
20015be0:	4629      	mov	r1, r5
20015be2:	4632      	mov	r2, r6
20015be4:	f04f 0300 	mov.w	r3, #0
20015be8:	f04f 0400 	mov.w	r4, #0
20015bec:	0154      	lsls	r4, r2, #5
20015bee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
20015bf2:	014b      	lsls	r3, r1, #5
20015bf4:	4619      	mov	r1, r3
20015bf6:	4622      	mov	r2, r4
20015bf8:	1b49      	subs	r1, r1, r5
20015bfa:	eb62 0206 	sbc.w	r2, r2, r6
20015bfe:	f04f 0300 	mov.w	r3, #0
20015c02:	f04f 0400 	mov.w	r4, #0
20015c06:	0194      	lsls	r4, r2, #6
20015c08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
20015c0c:	018b      	lsls	r3, r1, #6
20015c0e:	1a5b      	subs	r3, r3, r1
20015c10:	eb64 0402 	sbc.w	r4, r4, r2
20015c14:	f04f 0100 	mov.w	r1, #0
20015c18:	f04f 0200 	mov.w	r2, #0
20015c1c:	00e2      	lsls	r2, r4, #3
20015c1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
20015c22:	00d9      	lsls	r1, r3, #3
20015c24:	460b      	mov	r3, r1
20015c26:	4614      	mov	r4, r2
20015c28:	195b      	adds	r3, r3, r5
20015c2a:	eb44 0406 	adc.w	r4, r4, r6
20015c2e:	f04f 0100 	mov.w	r1, #0
20015c32:	f04f 0200 	mov.w	r2, #0
20015c36:	0262      	lsls	r2, r4, #9
20015c38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
20015c3c:	0259      	lsls	r1, r3, #9
20015c3e:	460b      	mov	r3, r1
20015c40:	4614      	mov	r4, r2
20015c42:	4618      	mov	r0, r3
20015c44:	4621      	mov	r1, r4
20015c46:	687b      	ldr	r3, [r7, #4]
20015c48:	f04f 0400 	mov.w	r4, #0
20015c4c:	461a      	mov	r2, r3
20015c4e:	4623      	mov	r3, r4
20015c50:	f7f9 fd32 	bl	2000f6b8 <__aeabi_uldivmod>
20015c54:	4603      	mov	r3, r0
20015c56:	460c      	mov	r4, r1
20015c58:	60fb      	str	r3, [r7, #12]
20015c5a:	e049      	b.n	20015cf0 <HAL_RCC_DisableCSS+0x190>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20015c5c:	4b2f      	ldr	r3, [pc, #188]	; (20015d1c <HAL_RCC_DisableCSS+0x1bc>)
20015c5e:	685b      	ldr	r3, [r3, #4]
20015c60:	099b      	lsrs	r3, r3, #6
20015c62:	f04f 0400 	mov.w	r4, #0
20015c66:	f240 11ff 	movw	r1, #511	; 0x1ff
20015c6a:	f04f 0200 	mov.w	r2, #0
20015c6e:	ea03 0501 	and.w	r5, r3, r1
20015c72:	ea04 0602 	and.w	r6, r4, r2
20015c76:	4629      	mov	r1, r5
20015c78:	4632      	mov	r2, r6
20015c7a:	f04f 0300 	mov.w	r3, #0
20015c7e:	f04f 0400 	mov.w	r4, #0
20015c82:	0154      	lsls	r4, r2, #5
20015c84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
20015c88:	014b      	lsls	r3, r1, #5
20015c8a:	4619      	mov	r1, r3
20015c8c:	4622      	mov	r2, r4
20015c8e:	1b49      	subs	r1, r1, r5
20015c90:	eb62 0206 	sbc.w	r2, r2, r6
20015c94:	f04f 0300 	mov.w	r3, #0
20015c98:	f04f 0400 	mov.w	r4, #0
20015c9c:	0194      	lsls	r4, r2, #6
20015c9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
20015ca2:	018b      	lsls	r3, r1, #6
20015ca4:	1a5b      	subs	r3, r3, r1
20015ca6:	eb64 0402 	sbc.w	r4, r4, r2
20015caa:	f04f 0100 	mov.w	r1, #0
20015cae:	f04f 0200 	mov.w	r2, #0
20015cb2:	00e2      	lsls	r2, r4, #3
20015cb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
20015cb8:	00d9      	lsls	r1, r3, #3
20015cba:	460b      	mov	r3, r1
20015cbc:	4614      	mov	r4, r2
20015cbe:	195b      	adds	r3, r3, r5
20015cc0:	eb44 0406 	adc.w	r4, r4, r6
20015cc4:	f04f 0100 	mov.w	r1, #0
20015cc8:	f04f 0200 	mov.w	r2, #0
20015ccc:	02a2      	lsls	r2, r4, #10
20015cce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
20015cd2:	0299      	lsls	r1, r3, #10
20015cd4:	460b      	mov	r3, r1
20015cd6:	4614      	mov	r4, r2
20015cd8:	4618      	mov	r0, r3
20015cda:	4621      	mov	r1, r4
20015cdc:	687b      	ldr	r3, [r7, #4]
20015cde:	f04f 0400 	mov.w	r4, #0
20015ce2:	461a      	mov	r2, r3
20015ce4:	4623      	mov	r3, r4
20015ce6:	f7f9 fce7 	bl	2000f6b8 <__aeabi_uldivmod>
20015cea:	4603      	mov	r3, r0
20015cec:	460c      	mov	r4, r1
20015cee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20015cf0:	4b0a      	ldr	r3, [pc, #40]	; (20015d1c <HAL_RCC_DisableCSS+0x1bc>)
20015cf2:	685b      	ldr	r3, [r3, #4]
20015cf4:	0c1b      	lsrs	r3, r3, #16
20015cf6:	f003 0303 	and.w	r3, r3, #3
20015cfa:	3301      	adds	r3, #1
20015cfc:	005b      	lsls	r3, r3, #1
20015cfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
20015d00:	68fa      	ldr	r2, [r7, #12]
20015d02:	683b      	ldr	r3, [r7, #0]
20015d04:	fbb2 f3f3 	udiv	r3, r2, r3
20015d08:	60bb      	str	r3, [r7, #8]
      break;
20015d0a:	e002      	b.n	20015d12 <HAL_RCC_DisableCSS+0x1b2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20015d0c:	4b04      	ldr	r3, [pc, #16]	; (20015d20 <HAL_RCC_DisableCSS+0x1c0>)
20015d0e:	60bb      	str	r3, [r7, #8]
      break;
20015d10:	bf00      	nop
    }
  }
  return sysclockfreq;
20015d12:	68bb      	ldr	r3, [r7, #8]
}
20015d14:	4618      	mov	r0, r3
20015d16:	3714      	adds	r7, #20
20015d18:	46bd      	mov	sp, r7
20015d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
20015d1c:	40023800 	.word	0x40023800
20015d20:	00f42400 	.word	0x00f42400
20015d24:	007a1200 	.word	0x007a1200

20015d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20015d28:	b480      	push	{r7}
20015d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20015d2c:	4b03      	ldr	r3, [pc, #12]	; (20015d3c <HAL_RCC_GetHCLKFreq+0x14>)
20015d2e:	681b      	ldr	r3, [r3, #0]
}
20015d30:	4618      	mov	r0, r3
20015d32:	46bd      	mov	sp, r7
20015d34:	f85d 7b04 	ldr.w	r7, [sp], #4
20015d38:	4770      	bx	lr
20015d3a:	bf00      	nop
20015d3c:	2000e4dc 	.word	0x2000e4dc

20015d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20015d40:	b580      	push	{r7, lr}
20015d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
20015d44:	f7ff fff0 	bl	20015d28 <HAL_RCC_GetHCLKFreq>
20015d48:	4601      	mov	r1, r0
20015d4a:	4b05      	ldr	r3, [pc, #20]	; (20015d60 <HAL_RCC_GetPCLK1Freq+0x20>)
20015d4c:	689b      	ldr	r3, [r3, #8]
20015d4e:	0a9b      	lsrs	r3, r3, #10
20015d50:	f003 0307 	and.w	r3, r3, #7
20015d54:	4a03      	ldr	r2, [pc, #12]	; (20015d64 <HAL_RCC_GetPCLK1Freq+0x24>)
20015d56:	5cd3      	ldrb	r3, [r2, r3]
20015d58:	fa21 f303 	lsr.w	r3, r1, r3
}
20015d5c:	4618      	mov	r0, r3
20015d5e:	bd80      	pop	{r7, pc}
20015d60:	40023800 	.word	0x40023800
20015d64:	20019fe0 	.word	0x20019fe0

20015d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
20015d68:	b580      	push	{r7, lr}
20015d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
20015d6c:	f7ff ffdc 	bl	20015d28 <HAL_RCC_GetHCLKFreq>
20015d70:	4601      	mov	r1, r0
20015d72:	4b05      	ldr	r3, [pc, #20]	; (20015d88 <HAL_RCC_GetPCLK2Freq+0x20>)
20015d74:	689b      	ldr	r3, [r3, #8]
20015d76:	0b5b      	lsrs	r3, r3, #13
20015d78:	f003 0307 	and.w	r3, r3, #7
20015d7c:	4a03      	ldr	r2, [pc, #12]	; (20015d8c <HAL_RCC_GetPCLK2Freq+0x24>)
20015d7e:	5cd3      	ldrb	r3, [r2, r3]
20015d80:	fa21 f303 	lsr.w	r3, r1, r3
}
20015d84:	4618      	mov	r0, r3
20015d86:	bd80      	pop	{r7, pc}
20015d88:	40023800 	.word	0x40023800
20015d8c:	20019fe0 	.word	0x20019fe0
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20015d90:	b480      	push	{r7}
20015d92:	b083      	sub	sp, #12
20015d94:	af00      	add	r7, sp, #0
20015d96:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
20015d98:	687b      	ldr	r3, [r7, #4]
20015d9a:	220f      	movs	r2, #15
20015d9c:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
20015d9e:	4b45      	ldr	r3, [pc, #276]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015da0:	681b      	ldr	r3, [r3, #0]
20015da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20015da6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
20015daa:	d104      	bne.n	20015db6 <HAL_RCC_GetPCLK2Freq+0x4e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
20015dac:	687b      	ldr	r3, [r7, #4]
20015dae:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
20015db2:	605a      	str	r2, [r3, #4]
20015db4:	e00e      	b.n	20015dd4 <HAL_RCC_GetPCLK2Freq+0x6c>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
20015db6:	4b3f      	ldr	r3, [pc, #252]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015db8:	681b      	ldr	r3, [r3, #0]
20015dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20015dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20015dc2:	d104      	bne.n	20015dce <HAL_RCC_GetPCLK2Freq+0x66>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
20015dc4:	687b      	ldr	r3, [r7, #4]
20015dc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20015dca:	605a      	str	r2, [r3, #4]
20015dcc:	e002      	b.n	20015dd4 <HAL_RCC_GetPCLK2Freq+0x6c>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
20015dce:	687b      	ldr	r3, [r7, #4]
20015dd0:	2200      	movs	r2, #0
20015dd2:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
20015dd4:	4b37      	ldr	r3, [pc, #220]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015dd6:	681b      	ldr	r3, [r3, #0]
20015dd8:	f003 0301 	and.w	r3, r3, #1
20015ddc:	2b01      	cmp	r3, #1
20015dde:	d103      	bne.n	20015de8 <HAL_RCC_GetPCLK2Freq+0x80>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
20015de0:	687b      	ldr	r3, [r7, #4]
20015de2:	2201      	movs	r2, #1
20015de4:	60da      	str	r2, [r3, #12]
20015de6:	e002      	b.n	20015dee <HAL_RCC_GetPCLK2Freq+0x86>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
20015de8:	687b      	ldr	r3, [r7, #4]
20015dea:	2200      	movs	r2, #0
20015dec:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
20015dee:	4b31      	ldr	r3, [pc, #196]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015df0:	681b      	ldr	r3, [r3, #0]
20015df2:	08db      	lsrs	r3, r3, #3
20015df4:	f003 021f 	and.w	r2, r3, #31
20015df8:	687b      	ldr	r3, [r7, #4]
20015dfa:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
20015dfc:	4b2d      	ldr	r3, [pc, #180]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20015e00:	f003 0304 	and.w	r3, r3, #4
20015e04:	2b04      	cmp	r3, #4
20015e06:	d103      	bne.n	20015e10 <HAL_RCC_GetPCLK2Freq+0xa8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
20015e08:	687b      	ldr	r3, [r7, #4]
20015e0a:	2205      	movs	r2, #5
20015e0c:	609a      	str	r2, [r3, #8]
20015e0e:	e00c      	b.n	20015e2a <HAL_RCC_GetPCLK2Freq+0xc2>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
20015e10:	4b28      	ldr	r3, [pc, #160]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20015e14:	f003 0301 	and.w	r3, r3, #1
20015e18:	2b01      	cmp	r3, #1
20015e1a:	d103      	bne.n	20015e24 <HAL_RCC_GetPCLK2Freq+0xbc>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
20015e1c:	687b      	ldr	r3, [r7, #4]
20015e1e:	2201      	movs	r2, #1
20015e20:	609a      	str	r2, [r3, #8]
20015e22:	e002      	b.n	20015e2a <HAL_RCC_GetPCLK2Freq+0xc2>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
20015e24:	687b      	ldr	r3, [r7, #4]
20015e26:	2200      	movs	r2, #0
20015e28:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
20015e2a:	4b22      	ldr	r3, [pc, #136]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20015e2e:	f003 0301 	and.w	r3, r3, #1
20015e32:	2b01      	cmp	r3, #1
20015e34:	d103      	bne.n	20015e3e <HAL_RCC_GetPCLK2Freq+0xd6>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
20015e36:	687b      	ldr	r3, [r7, #4]
20015e38:	2201      	movs	r2, #1
20015e3a:	615a      	str	r2, [r3, #20]
20015e3c:	e002      	b.n	20015e44 <HAL_RCC_GetPCLK2Freq+0xdc>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
20015e3e:	687b      	ldr	r3, [r7, #4]
20015e40:	2200      	movs	r2, #0
20015e42:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
20015e44:	4b1b      	ldr	r3, [pc, #108]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015e46:	681b      	ldr	r3, [r3, #0]
20015e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20015e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20015e50:	d103      	bne.n	20015e5a <HAL_RCC_GetPCLK2Freq+0xf2>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
20015e52:	687b      	ldr	r3, [r7, #4]
20015e54:	2202      	movs	r2, #2
20015e56:	619a      	str	r2, [r3, #24]
20015e58:	e002      	b.n	20015e60 <HAL_RCC_GetPCLK2Freq+0xf8>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
20015e5a:	687b      	ldr	r3, [r7, #4]
20015e5c:	2201      	movs	r2, #1
20015e5e:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
20015e60:	4b14      	ldr	r3, [pc, #80]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015e62:	685b      	ldr	r3, [r3, #4]
20015e64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
20015e68:	687b      	ldr	r3, [r7, #4]
20015e6a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
20015e6c:	4b11      	ldr	r3, [pc, #68]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015e6e:	685b      	ldr	r3, [r3, #4]
20015e70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
20015e74:	687b      	ldr	r3, [r7, #4]
20015e76:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
20015e78:	4b0e      	ldr	r3, [pc, #56]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015e7a:	685b      	ldr	r3, [r3, #4]
20015e7c:	099b      	lsrs	r3, r3, #6
20015e7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
20015e82:	687b      	ldr	r3, [r7, #4]
20015e84:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
20015e86:	4b0b      	ldr	r3, [pc, #44]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015e88:	685b      	ldr	r3, [r3, #4]
20015e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
20015e8e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
20015e92:	005b      	lsls	r3, r3, #1
20015e94:	0c1a      	lsrs	r2, r3, #16
20015e96:	687b      	ldr	r3, [r7, #4]
20015e98:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
20015e9a:	4b06      	ldr	r3, [pc, #24]	; (20015eb4 <HAL_RCC_GetPCLK2Freq+0x14c>)
20015e9c:	685b      	ldr	r3, [r3, #4]
20015e9e:	0e1b      	lsrs	r3, r3, #24
20015ea0:	f003 020f 	and.w	r2, r3, #15
20015ea4:	687b      	ldr	r3, [r7, #4]
20015ea6:	62da      	str	r2, [r3, #44]	; 0x2c
}
20015ea8:	bf00      	nop
20015eaa:	370c      	adds	r7, #12
20015eac:	46bd      	mov	sp, r7
20015eae:	f85d 7b04 	ldr.w	r7, [sp], #4
20015eb2:	4770      	bx	lr
20015eb4:	40023800 	.word	0x40023800

20015eb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
20015eb8:	b480      	push	{r7}
20015eba:	b083      	sub	sp, #12
20015ebc:	af00      	add	r7, sp, #0
20015ebe:	6078      	str	r0, [r7, #4]
20015ec0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
20015ec2:	687b      	ldr	r3, [r7, #4]
20015ec4:	220f      	movs	r2, #15
20015ec6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
20015ec8:	4b12      	ldr	r3, [pc, #72]	; (20015f14 <HAL_RCC_GetClockConfig+0x5c>)
20015eca:	689b      	ldr	r3, [r3, #8]
20015ecc:	f003 0203 	and.w	r2, r3, #3
20015ed0:	687b      	ldr	r3, [r7, #4]
20015ed2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
20015ed4:	4b0f      	ldr	r3, [pc, #60]	; (20015f14 <HAL_RCC_GetClockConfig+0x5c>)
20015ed6:	689b      	ldr	r3, [r3, #8]
20015ed8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
20015edc:	687b      	ldr	r3, [r7, #4]
20015ede:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
20015ee0:	4b0c      	ldr	r3, [pc, #48]	; (20015f14 <HAL_RCC_GetClockConfig+0x5c>)
20015ee2:	689b      	ldr	r3, [r3, #8]
20015ee4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
20015ee8:	687b      	ldr	r3, [r7, #4]
20015eea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
20015eec:	4b09      	ldr	r3, [pc, #36]	; (20015f14 <HAL_RCC_GetClockConfig+0x5c>)
20015eee:	689b      	ldr	r3, [r3, #8]
20015ef0:	08db      	lsrs	r3, r3, #3
20015ef2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
20015ef6:	687b      	ldr	r3, [r7, #4]
20015ef8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
20015efa:	4b07      	ldr	r3, [pc, #28]	; (20015f18 <HAL_RCC_GetClockConfig+0x60>)
20015efc:	681b      	ldr	r3, [r3, #0]
20015efe:	f003 020f 	and.w	r2, r3, #15
20015f02:	683b      	ldr	r3, [r7, #0]
20015f04:	601a      	str	r2, [r3, #0]
}
20015f06:	bf00      	nop
20015f08:	370c      	adds	r7, #12
20015f0a:	46bd      	mov	sp, r7
20015f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
20015f10:	4770      	bx	lr
20015f12:	bf00      	nop
20015f14:	40023800 	.word	0x40023800
20015f18:	40023c00 	.word	0x40023c00

20015f1c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
20015f1c:	b580      	push	{r7, lr}
20015f1e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
20015f20:	4b06      	ldr	r3, [pc, #24]	; (20015f3c <HAL_RCC_NMI_IRQHandler+0x20>)
20015f22:	68db      	ldr	r3, [r3, #12]
20015f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
20015f28:	2b80      	cmp	r3, #128	; 0x80
20015f2a:	d104      	bne.n	20015f36 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
20015f2c:	f000 f80a 	bl	20015f44 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
20015f30:	4b03      	ldr	r3, [pc, #12]	; (20015f40 <HAL_RCC_NMI_IRQHandler+0x24>)
20015f32:	2280      	movs	r2, #128	; 0x80
20015f34:	701a      	strb	r2, [r3, #0]
  }
}
20015f36:	bf00      	nop
20015f38:	bd80      	pop	{r7, pc}
20015f3a:	bf00      	nop
20015f3c:	40023800 	.word	0x40023800
20015f40:	4002380e 	.word	0x4002380e

20015f44 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
20015f44:	b480      	push	{r7}
20015f46:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
20015f48:	bf00      	nop
20015f4a:	46bd      	mov	sp, r7
20015f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
20015f50:	4770      	bx	lr
	...

20015f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
20015f54:	b580      	push	{r7, lr}
20015f56:	b08c      	sub	sp, #48	; 0x30
20015f58:	af00      	add	r7, sp, #0
20015f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20015f5c:	2300      	movs	r3, #0
20015f5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
20015f60:	2300      	movs	r3, #0
20015f62:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
20015f64:	2300      	movs	r3, #0
20015f66:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
20015f68:	2300      	movs	r3, #0
20015f6a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
20015f6c:	2300      	movs	r3, #0
20015f6e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
20015f70:	2300      	movs	r3, #0
20015f72:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
20015f74:	2300      	movs	r3, #0
20015f76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
20015f78:	2300      	movs	r3, #0
20015f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
20015f7c:	2300      	movs	r3, #0
20015f7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
20015f80:	687b      	ldr	r3, [r7, #4]
20015f82:	681b      	ldr	r3, [r3, #0]
20015f84:	f003 0301 	and.w	r3, r3, #1
20015f88:	2b00      	cmp	r3, #0
20015f8a:	d010      	beq.n	20015fae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
20015f8c:	4b6f      	ldr	r3, [pc, #444]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20015f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20015f92:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
20015f96:	687b      	ldr	r3, [r7, #4]
20015f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20015f9a:	496c      	ldr	r1, [pc, #432]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20015f9c:	4313      	orrs	r3, r2
20015f9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
20015fa2:	687b      	ldr	r3, [r7, #4]
20015fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20015fa6:	2b00      	cmp	r3, #0
20015fa8:	d101      	bne.n	20015fae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
20015faa:	2301      	movs	r3, #1
20015fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
20015fae:	687b      	ldr	r3, [r7, #4]
20015fb0:	681b      	ldr	r3, [r3, #0]
20015fb2:	f003 0302 	and.w	r3, r3, #2
20015fb6:	2b00      	cmp	r3, #0
20015fb8:	d010      	beq.n	20015fdc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
20015fba:	4b64      	ldr	r3, [pc, #400]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20015fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20015fc0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
20015fc4:	687b      	ldr	r3, [r7, #4]
20015fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20015fc8:	4960      	ldr	r1, [pc, #384]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20015fca:	4313      	orrs	r3, r2
20015fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
20015fd0:	687b      	ldr	r3, [r7, #4]
20015fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20015fd4:	2b00      	cmp	r3, #0
20015fd6:	d101      	bne.n	20015fdc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
20015fd8:	2301      	movs	r3, #1
20015fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
20015fdc:	687b      	ldr	r3, [r7, #4]
20015fde:	681b      	ldr	r3, [r3, #0]
20015fe0:	f003 0304 	and.w	r3, r3, #4
20015fe4:	2b00      	cmp	r3, #0
20015fe6:	d017      	beq.n	20016018 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
20015fe8:	4b58      	ldr	r3, [pc, #352]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20015fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20015fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
20015ff2:	687b      	ldr	r3, [r7, #4]
20015ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20015ff6:	4955      	ldr	r1, [pc, #340]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20015ff8:	4313      	orrs	r3, r2
20015ffa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
20015ffe:	687b      	ldr	r3, [r7, #4]
20016000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20016002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
20016006:	d101      	bne.n	2001600c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
20016008:	2301      	movs	r3, #1
2001600a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
2001600c:	687b      	ldr	r3, [r7, #4]
2001600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20016010:	2b00      	cmp	r3, #0
20016012:	d101      	bne.n	20016018 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
20016014:	2301      	movs	r3, #1
20016016:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
20016018:	687b      	ldr	r3, [r7, #4]
2001601a:	681b      	ldr	r3, [r3, #0]
2001601c:	f003 0308 	and.w	r3, r3, #8
20016020:	2b00      	cmp	r3, #0
20016022:	d017      	beq.n	20016054 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
20016024:	4b49      	ldr	r3, [pc, #292]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20016026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2001602a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
2001602e:	687b      	ldr	r3, [r7, #4]
20016030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20016032:	4946      	ldr	r1, [pc, #280]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20016034:	4313      	orrs	r3, r2
20016036:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
2001603a:	687b      	ldr	r3, [r7, #4]
2001603c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2001603e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20016042:	d101      	bne.n	20016048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
20016044:	2301      	movs	r3, #1
20016046:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
20016048:	687b      	ldr	r3, [r7, #4]
2001604a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2001604c:	2b00      	cmp	r3, #0
2001604e:	d101      	bne.n	20016054 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
20016050:	2301      	movs	r3, #1
20016052:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
20016054:	687b      	ldr	r3, [r7, #4]
20016056:	681b      	ldr	r3, [r3, #0]
20016058:	f003 0320 	and.w	r3, r3, #32
2001605c:	2b00      	cmp	r3, #0
2001605e:	f000 808a 	beq.w	20016176 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
20016062:	2300      	movs	r3, #0
20016064:	60bb      	str	r3, [r7, #8]
20016066:	4b39      	ldr	r3, [pc, #228]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20016068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2001606a:	4a38      	ldr	r2, [pc, #224]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
2001606c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20016070:	6413      	str	r3, [r2, #64]	; 0x40
20016072:	4b36      	ldr	r3, [pc, #216]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20016074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20016076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2001607a:	60bb      	str	r3, [r7, #8]
2001607c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
2001607e:	4b34      	ldr	r3, [pc, #208]	; (20016150 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
20016080:	681b      	ldr	r3, [r3, #0]
20016082:	4a33      	ldr	r2, [pc, #204]	; (20016150 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
20016084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20016088:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
2001608a:	f7fa fd8b 	bl	20010ba4 <HAL_GetTick>
2001608e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
20016090:	e008      	b.n	200160a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
20016092:	f7fa fd87 	bl	20010ba4 <HAL_GetTick>
20016096:	4602      	mov	r2, r0
20016098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2001609a:	1ad3      	subs	r3, r2, r3
2001609c:	2b02      	cmp	r3, #2
2001609e:	d901      	bls.n	200160a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
200160a0:	2303      	movs	r3, #3
200160a2:	e278      	b.n	20016596 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
200160a4:	4b2a      	ldr	r3, [pc, #168]	; (20016150 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
200160a6:	681b      	ldr	r3, [r3, #0]
200160a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
200160ac:	2b00      	cmp	r3, #0
200160ae:	d0f0      	beq.n	20016092 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
200160b0:	4b26      	ldr	r3, [pc, #152]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
200160b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200160b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
200160b8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
200160ba:	6a3b      	ldr	r3, [r7, #32]
200160bc:	2b00      	cmp	r3, #0
200160be:	d02f      	beq.n	20016120 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
200160c0:	687b      	ldr	r3, [r7, #4]
200160c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200160c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
200160c8:	6a3a      	ldr	r2, [r7, #32]
200160ca:	429a      	cmp	r2, r3
200160cc:	d028      	beq.n	20016120 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
200160ce:	4b1f      	ldr	r3, [pc, #124]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
200160d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200160d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
200160d6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
200160d8:	4b1e      	ldr	r3, [pc, #120]	; (20016154 <HAL_RCCEx_PeriphCLKConfig+0x200>)
200160da:	2201      	movs	r2, #1
200160dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
200160de:	4b1d      	ldr	r3, [pc, #116]	; (20016154 <HAL_RCCEx_PeriphCLKConfig+0x200>)
200160e0:	2200      	movs	r2, #0
200160e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
200160e4:	4a19      	ldr	r2, [pc, #100]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
200160e6:	6a3b      	ldr	r3, [r7, #32]
200160e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
200160ea:	4b18      	ldr	r3, [pc, #96]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
200160ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200160ee:	f003 0301 	and.w	r3, r3, #1
200160f2:	2b01      	cmp	r3, #1
200160f4:	d114      	bne.n	20016120 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
200160f6:	f7fa fd55 	bl	20010ba4 <HAL_GetTick>
200160fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200160fc:	e00a      	b.n	20016114 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
200160fe:	f7fa fd51 	bl	20010ba4 <HAL_GetTick>
20016102:	4602      	mov	r2, r0
20016104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20016106:	1ad3      	subs	r3, r2, r3
20016108:	f241 3288 	movw	r2, #5000	; 0x1388
2001610c:	4293      	cmp	r3, r2
2001610e:	d901      	bls.n	20016114 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
20016110:	2303      	movs	r3, #3
20016112:	e240      	b.n	20016596 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20016114:	4b0d      	ldr	r3, [pc, #52]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20016116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20016118:	f003 0302 	and.w	r3, r3, #2
2001611c:	2b00      	cmp	r3, #0
2001611e:	d0ee      	beq.n	200160fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
20016120:	687b      	ldr	r3, [r7, #4]
20016122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20016124:	f403 7340 	and.w	r3, r3, #768	; 0x300
20016128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2001612c:	d114      	bne.n	20016158 <HAL_RCCEx_PeriphCLKConfig+0x204>
2001612e:	4b07      	ldr	r3, [pc, #28]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20016130:	689b      	ldr	r3, [r3, #8]
20016132:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
20016136:	687b      	ldr	r3, [r7, #4]
20016138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2001613a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
2001613e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20016142:	4902      	ldr	r1, [pc, #8]	; (2001614c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
20016144:	4313      	orrs	r3, r2
20016146:	608b      	str	r3, [r1, #8]
20016148:	e00c      	b.n	20016164 <HAL_RCCEx_PeriphCLKConfig+0x210>
2001614a:	bf00      	nop
2001614c:	40023800 	.word	0x40023800
20016150:	40007000 	.word	0x40007000
20016154:	42470e40 	.word	0x42470e40
20016158:	4b4a      	ldr	r3, [pc, #296]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
2001615a:	689b      	ldr	r3, [r3, #8]
2001615c:	4a49      	ldr	r2, [pc, #292]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
2001615e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
20016162:	6093      	str	r3, [r2, #8]
20016164:	4b47      	ldr	r3, [pc, #284]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
20016166:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20016168:	687b      	ldr	r3, [r7, #4]
2001616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2001616c:	f3c3 030b 	ubfx	r3, r3, #0, #12
20016170:	4944      	ldr	r1, [pc, #272]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
20016172:	4313      	orrs	r3, r2
20016174:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
20016176:	687b      	ldr	r3, [r7, #4]
20016178:	681b      	ldr	r3, [r3, #0]
2001617a:	f003 0310 	and.w	r3, r3, #16
2001617e:	2b00      	cmp	r3, #0
20016180:	d004      	beq.n	2001618c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
20016182:	687b      	ldr	r3, [r7, #4]
20016184:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
20016188:	4b3f      	ldr	r3, [pc, #252]	; (20016288 <HAL_RCCEx_PeriphCLKConfig+0x334>)
2001618a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
2001618c:	687b      	ldr	r3, [r7, #4]
2001618e:	681b      	ldr	r3, [r3, #0]
20016190:	f003 0380 	and.w	r3, r3, #128	; 0x80
20016194:	2b00      	cmp	r3, #0
20016196:	d00a      	beq.n	200161ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
20016198:	4b3a      	ldr	r3, [pc, #232]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
2001619a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2001619e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
200161a2:	687b      	ldr	r3, [r7, #4]
200161a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200161a6:	4937      	ldr	r1, [pc, #220]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
200161a8:	4313      	orrs	r3, r2
200161aa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
200161ae:	687b      	ldr	r3, [r7, #4]
200161b0:	681b      	ldr	r3, [r3, #0]
200161b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
200161b6:	2b00      	cmp	r3, #0
200161b8:	d00a      	beq.n	200161d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
200161ba:	4b32      	ldr	r3, [pc, #200]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
200161bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200161c0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
200161c4:	687b      	ldr	r3, [r7, #4]
200161c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200161c8:	492e      	ldr	r1, [pc, #184]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
200161ca:	4313      	orrs	r3, r2
200161cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
200161d0:	687b      	ldr	r3, [r7, #4]
200161d2:	681b      	ldr	r3, [r3, #0]
200161d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
200161d8:	2b00      	cmp	r3, #0
200161da:	d011      	beq.n	20016200 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
200161dc:	4b29      	ldr	r3, [pc, #164]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
200161de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200161e2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
200161e6:	687b      	ldr	r3, [r7, #4]
200161e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200161ea:	4926      	ldr	r1, [pc, #152]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
200161ec:	4313      	orrs	r3, r2
200161ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
200161f2:	687b      	ldr	r3, [r7, #4]
200161f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200161f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
200161fa:	d101      	bne.n	20016200 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
200161fc:	2301      	movs	r3, #1
200161fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
20016200:	687b      	ldr	r3, [r7, #4]
20016202:	681b      	ldr	r3, [r3, #0]
20016204:	f403 7300 	and.w	r3, r3, #512	; 0x200
20016208:	2b00      	cmp	r3, #0
2001620a:	d00a      	beq.n	20016222 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
2001620c:	4b1d      	ldr	r3, [pc, #116]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
2001620e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
20016212:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
20016216:	687b      	ldr	r3, [r7, #4]
20016218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2001621a:	491a      	ldr	r1, [pc, #104]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
2001621c:	4313      	orrs	r3, r2
2001621e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
20016222:	687b      	ldr	r3, [r7, #4]
20016224:	681b      	ldr	r3, [r3, #0]
20016226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2001622a:	2b00      	cmp	r3, #0
2001622c:	d011      	beq.n	20016252 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
2001622e:	4b15      	ldr	r3, [pc, #84]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
20016230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
20016234:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
20016238:	687b      	ldr	r3, [r7, #4]
2001623a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2001623c:	4911      	ldr	r1, [pc, #68]	; (20016284 <HAL_RCCEx_PeriphCLKConfig+0x330>)
2001623e:	4313      	orrs	r3, r2
20016240:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
20016244:	687b      	ldr	r3, [r7, #4]
20016246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20016248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2001624c:	d101      	bne.n	20016252 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
2001624e:	2301      	movs	r3, #1
20016250:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
20016252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20016254:	2b01      	cmp	r3, #1
20016256:	d005      	beq.n	20016264 <HAL_RCCEx_PeriphCLKConfig+0x310>
20016258:	687b      	ldr	r3, [r7, #4]
2001625a:	681b      	ldr	r3, [r3, #0]
2001625c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20016260:	f040 80ff 	bne.w	20016462 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
20016264:	4b09      	ldr	r3, [pc, #36]	; (2001628c <HAL_RCCEx_PeriphCLKConfig+0x338>)
20016266:	2200      	movs	r2, #0
20016268:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
2001626a:	f7fa fc9b 	bl	20010ba4 <HAL_GetTick>
2001626e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20016270:	e00e      	b.n	20016290 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
20016272:	f7fa fc97 	bl	20010ba4 <HAL_GetTick>
20016276:	4602      	mov	r2, r0
20016278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2001627a:	1ad3      	subs	r3, r2, r3
2001627c:	2b02      	cmp	r3, #2
2001627e:	d907      	bls.n	20016290 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20016280:	2303      	movs	r3, #3
20016282:	e188      	b.n	20016596 <HAL_RCCEx_PeriphCLKConfig+0x642>
20016284:	40023800 	.word	0x40023800
20016288:	424711e0 	.word	0x424711e0
2001628c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20016290:	4b7e      	ldr	r3, [pc, #504]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
20016292:	681b      	ldr	r3, [r3, #0]
20016294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20016298:	2b00      	cmp	r3, #0
2001629a:	d1ea      	bne.n	20016272 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
2001629c:	687b      	ldr	r3, [r7, #4]
2001629e:	681b      	ldr	r3, [r3, #0]
200162a0:	f003 0301 	and.w	r3, r3, #1
200162a4:	2b00      	cmp	r3, #0
200162a6:	d003      	beq.n	200162b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
200162a8:	687b      	ldr	r3, [r7, #4]
200162aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200162ac:	2b00      	cmp	r3, #0
200162ae:	d009      	beq.n	200162c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
200162b0:	687b      	ldr	r3, [r7, #4]
200162b2:	681b      	ldr	r3, [r3, #0]
200162b4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
200162b8:	2b00      	cmp	r3, #0
200162ba:	d028      	beq.n	2001630e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
200162bc:	687b      	ldr	r3, [r7, #4]
200162be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200162c0:	2b00      	cmp	r3, #0
200162c2:	d124      	bne.n	2001630e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
200162c4:	4b71      	ldr	r3, [pc, #452]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
200162c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200162ca:	0c1b      	lsrs	r3, r3, #16
200162cc:	f003 0303 	and.w	r3, r3, #3
200162d0:	3301      	adds	r3, #1
200162d2:	005b      	lsls	r3, r3, #1
200162d4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
200162d6:	4b6d      	ldr	r3, [pc, #436]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
200162d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200162dc:	0e1b      	lsrs	r3, r3, #24
200162de:	f003 030f 	and.w	r3, r3, #15
200162e2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
200162e4:	687b      	ldr	r3, [r7, #4]
200162e6:	685a      	ldr	r2, [r3, #4]
200162e8:	687b      	ldr	r3, [r7, #4]
200162ea:	689b      	ldr	r3, [r3, #8]
200162ec:	019b      	lsls	r3, r3, #6
200162ee:	431a      	orrs	r2, r3
200162f0:	69fb      	ldr	r3, [r7, #28]
200162f2:	085b      	lsrs	r3, r3, #1
200162f4:	3b01      	subs	r3, #1
200162f6:	041b      	lsls	r3, r3, #16
200162f8:	431a      	orrs	r2, r3
200162fa:	69bb      	ldr	r3, [r7, #24]
200162fc:	061b      	lsls	r3, r3, #24
200162fe:	431a      	orrs	r2, r3
20016300:	687b      	ldr	r3, [r7, #4]
20016302:	695b      	ldr	r3, [r3, #20]
20016304:	071b      	lsls	r3, r3, #28
20016306:	4961      	ldr	r1, [pc, #388]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
20016308:	4313      	orrs	r3, r2
2001630a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
2001630e:	687b      	ldr	r3, [r7, #4]
20016310:	681b      	ldr	r3, [r3, #0]
20016312:	f003 0304 	and.w	r3, r3, #4
20016316:	2b00      	cmp	r3, #0
20016318:	d004      	beq.n	20016324 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
2001631a:	687b      	ldr	r3, [r7, #4]
2001631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2001631e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
20016322:	d00a      	beq.n	2001633a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
20016324:	687b      	ldr	r3, [r7, #4]
20016326:	681b      	ldr	r3, [r3, #0]
20016328:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
2001632c:	2b00      	cmp	r3, #0
2001632e:	d035      	beq.n	2001639c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
20016330:	687b      	ldr	r3, [r7, #4]
20016332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20016334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20016338:	d130      	bne.n	2001639c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
2001633a:	4b54      	ldr	r3, [pc, #336]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
2001633c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20016340:	0c1b      	lsrs	r3, r3, #16
20016342:	f003 0303 	and.w	r3, r3, #3
20016346:	3301      	adds	r3, #1
20016348:	005b      	lsls	r3, r3, #1
2001634a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
2001634c:	4b4f      	ldr	r3, [pc, #316]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
2001634e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20016352:	0f1b      	lsrs	r3, r3, #28
20016354:	f003 0307 	and.w	r3, r3, #7
20016358:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
2001635a:	687b      	ldr	r3, [r7, #4]
2001635c:	685a      	ldr	r2, [r3, #4]
2001635e:	687b      	ldr	r3, [r7, #4]
20016360:	689b      	ldr	r3, [r3, #8]
20016362:	019b      	lsls	r3, r3, #6
20016364:	431a      	orrs	r2, r3
20016366:	69fb      	ldr	r3, [r7, #28]
20016368:	085b      	lsrs	r3, r3, #1
2001636a:	3b01      	subs	r3, #1
2001636c:	041b      	lsls	r3, r3, #16
2001636e:	431a      	orrs	r2, r3
20016370:	687b      	ldr	r3, [r7, #4]
20016372:	691b      	ldr	r3, [r3, #16]
20016374:	061b      	lsls	r3, r3, #24
20016376:	431a      	orrs	r2, r3
20016378:	697b      	ldr	r3, [r7, #20]
2001637a:	071b      	lsls	r3, r3, #28
2001637c:	4943      	ldr	r1, [pc, #268]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
2001637e:	4313      	orrs	r3, r2
20016380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
20016384:	4b41      	ldr	r3, [pc, #260]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
20016386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2001638a:	f023 021f 	bic.w	r2, r3, #31
2001638e:	687b      	ldr	r3, [r7, #4]
20016390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20016392:	3b01      	subs	r3, #1
20016394:	493d      	ldr	r1, [pc, #244]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
20016396:	4313      	orrs	r3, r2
20016398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
2001639c:	687b      	ldr	r3, [r7, #4]
2001639e:	681b      	ldr	r3, [r3, #0]
200163a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
200163a4:	2b00      	cmp	r3, #0
200163a6:	d029      	beq.n	200163fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
200163a8:	687b      	ldr	r3, [r7, #4]
200163aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200163ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
200163b0:	d124      	bne.n	200163fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
200163b2:	4b36      	ldr	r3, [pc, #216]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
200163b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200163b8:	0c1b      	lsrs	r3, r3, #16
200163ba:	f003 0303 	and.w	r3, r3, #3
200163be:	3301      	adds	r3, #1
200163c0:	005b      	lsls	r3, r3, #1
200163c2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
200163c4:	4b31      	ldr	r3, [pc, #196]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
200163c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200163ca:	0f1b      	lsrs	r3, r3, #28
200163cc:	f003 0307 	and.w	r3, r3, #7
200163d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
200163d2:	687b      	ldr	r3, [r7, #4]
200163d4:	685a      	ldr	r2, [r3, #4]
200163d6:	687b      	ldr	r3, [r7, #4]
200163d8:	689b      	ldr	r3, [r3, #8]
200163da:	019b      	lsls	r3, r3, #6
200163dc:	431a      	orrs	r2, r3
200163de:	687b      	ldr	r3, [r7, #4]
200163e0:	68db      	ldr	r3, [r3, #12]
200163e2:	085b      	lsrs	r3, r3, #1
200163e4:	3b01      	subs	r3, #1
200163e6:	041b      	lsls	r3, r3, #16
200163e8:	431a      	orrs	r2, r3
200163ea:	69bb      	ldr	r3, [r7, #24]
200163ec:	061b      	lsls	r3, r3, #24
200163ee:	431a      	orrs	r2, r3
200163f0:	697b      	ldr	r3, [r7, #20]
200163f2:	071b      	lsls	r3, r3, #28
200163f4:	4925      	ldr	r1, [pc, #148]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
200163f6:	4313      	orrs	r3, r2
200163f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
200163fc:	687b      	ldr	r3, [r7, #4]
200163fe:	681b      	ldr	r3, [r3, #0]
20016400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
20016404:	2b00      	cmp	r3, #0
20016406:	d016      	beq.n	20016436 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
20016408:	687b      	ldr	r3, [r7, #4]
2001640a:	685a      	ldr	r2, [r3, #4]
2001640c:	687b      	ldr	r3, [r7, #4]
2001640e:	689b      	ldr	r3, [r3, #8]
20016410:	019b      	lsls	r3, r3, #6
20016412:	431a      	orrs	r2, r3
20016414:	687b      	ldr	r3, [r7, #4]
20016416:	68db      	ldr	r3, [r3, #12]
20016418:	085b      	lsrs	r3, r3, #1
2001641a:	3b01      	subs	r3, #1
2001641c:	041b      	lsls	r3, r3, #16
2001641e:	431a      	orrs	r2, r3
20016420:	687b      	ldr	r3, [r7, #4]
20016422:	691b      	ldr	r3, [r3, #16]
20016424:	061b      	lsls	r3, r3, #24
20016426:	431a      	orrs	r2, r3
20016428:	687b      	ldr	r3, [r7, #4]
2001642a:	695b      	ldr	r3, [r3, #20]
2001642c:	071b      	lsls	r3, r3, #28
2001642e:	4917      	ldr	r1, [pc, #92]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
20016430:	4313      	orrs	r3, r2
20016432:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
20016436:	4b16      	ldr	r3, [pc, #88]	; (20016490 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
20016438:	2201      	movs	r2, #1
2001643a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
2001643c:	f7fa fbb2 	bl	20010ba4 <HAL_GetTick>
20016440:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20016442:	e008      	b.n	20016456 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
20016444:	f7fa fbae 	bl	20010ba4 <HAL_GetTick>
20016448:	4602      	mov	r2, r0
2001644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2001644c:	1ad3      	subs	r3, r2, r3
2001644e:	2b02      	cmp	r3, #2
20016450:	d901      	bls.n	20016456 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20016452:	2303      	movs	r3, #3
20016454:	e09f      	b.n	20016596 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20016456:	4b0d      	ldr	r3, [pc, #52]	; (2001648c <HAL_RCCEx_PeriphCLKConfig+0x538>)
20016458:	681b      	ldr	r3, [r3, #0]
2001645a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2001645e:	2b00      	cmp	r3, #0
20016460:	d0f0      	beq.n	20016444 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
20016462:	6abb      	ldr	r3, [r7, #40]	; 0x28
20016464:	2b01      	cmp	r3, #1
20016466:	f040 8095 	bne.w	20016594 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
2001646a:	4b0a      	ldr	r3, [pc, #40]	; (20016494 <HAL_RCCEx_PeriphCLKConfig+0x540>)
2001646c:	2200      	movs	r2, #0
2001646e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
20016470:	f7fa fb98 	bl	20010ba4 <HAL_GetTick>
20016474:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20016476:	e00f      	b.n	20016498 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
20016478:	f7fa fb94 	bl	20010ba4 <HAL_GetTick>
2001647c:	4602      	mov	r2, r0
2001647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20016480:	1ad3      	subs	r3, r2, r3
20016482:	2b02      	cmp	r3, #2
20016484:	d908      	bls.n	20016498 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20016486:	2303      	movs	r3, #3
20016488:	e085      	b.n	20016596 <HAL_RCCEx_PeriphCLKConfig+0x642>
2001648a:	bf00      	nop
2001648c:	40023800 	.word	0x40023800
20016490:	42470068 	.word	0x42470068
20016494:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20016498:	4b41      	ldr	r3, [pc, #260]	; (200165a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
2001649a:	681b      	ldr	r3, [r3, #0]
2001649c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
200164a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
200164a4:	d0e8      	beq.n	20016478 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
200164a6:	687b      	ldr	r3, [r7, #4]
200164a8:	681b      	ldr	r3, [r3, #0]
200164aa:	f003 0304 	and.w	r3, r3, #4
200164ae:	2b00      	cmp	r3, #0
200164b0:	d003      	beq.n	200164ba <HAL_RCCEx_PeriphCLKConfig+0x566>
200164b2:	687b      	ldr	r3, [r7, #4]
200164b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200164b6:	2b00      	cmp	r3, #0
200164b8:	d009      	beq.n	200164ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
200164ba:	687b      	ldr	r3, [r7, #4]
200164bc:	681b      	ldr	r3, [r3, #0]
200164be:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
200164c2:	2b00      	cmp	r3, #0
200164c4:	d02b      	beq.n	2001651e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
200164c6:	687b      	ldr	r3, [r7, #4]
200164c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200164ca:	2b00      	cmp	r3, #0
200164cc:	d127      	bne.n	2001651e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
200164ce:	4b34      	ldr	r3, [pc, #208]	; (200165a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
200164d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
200164d4:	0c1b      	lsrs	r3, r3, #16
200164d6:	f003 0303 	and.w	r3, r3, #3
200164da:	3301      	adds	r3, #1
200164dc:	005b      	lsls	r3, r3, #1
200164de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
200164e0:	687b      	ldr	r3, [r7, #4]
200164e2:	699a      	ldr	r2, [r3, #24]
200164e4:	687b      	ldr	r3, [r7, #4]
200164e6:	69db      	ldr	r3, [r3, #28]
200164e8:	019b      	lsls	r3, r3, #6
200164ea:	431a      	orrs	r2, r3
200164ec:	693b      	ldr	r3, [r7, #16]
200164ee:	085b      	lsrs	r3, r3, #1
200164f0:	3b01      	subs	r3, #1
200164f2:	041b      	lsls	r3, r3, #16
200164f4:	431a      	orrs	r2, r3
200164f6:	687b      	ldr	r3, [r7, #4]
200164f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200164fa:	061b      	lsls	r3, r3, #24
200164fc:	4928      	ldr	r1, [pc, #160]	; (200165a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
200164fe:	4313      	orrs	r3, r2
20016500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
20016504:	4b26      	ldr	r3, [pc, #152]	; (200165a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
20016506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2001650a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
2001650e:	687b      	ldr	r3, [r7, #4]
20016510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20016512:	3b01      	subs	r3, #1
20016514:	021b      	lsls	r3, r3, #8
20016516:	4922      	ldr	r1, [pc, #136]	; (200165a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
20016518:	4313      	orrs	r3, r2
2001651a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
2001651e:	687b      	ldr	r3, [r7, #4]
20016520:	681b      	ldr	r3, [r3, #0]
20016522:	f403 7380 	and.w	r3, r3, #256	; 0x100
20016526:	2b00      	cmp	r3, #0
20016528:	d01d      	beq.n	20016566 <HAL_RCCEx_PeriphCLKConfig+0x612>
2001652a:	687b      	ldr	r3, [r7, #4]
2001652c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2001652e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
20016532:	d118      	bne.n	20016566 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
20016534:	4b1a      	ldr	r3, [pc, #104]	; (200165a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
20016536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2001653a:	0e1b      	lsrs	r3, r3, #24
2001653c:	f003 030f 	and.w	r3, r3, #15
20016540:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
20016542:	687b      	ldr	r3, [r7, #4]
20016544:	699a      	ldr	r2, [r3, #24]
20016546:	687b      	ldr	r3, [r7, #4]
20016548:	69db      	ldr	r3, [r3, #28]
2001654a:	019b      	lsls	r3, r3, #6
2001654c:	431a      	orrs	r2, r3
2001654e:	687b      	ldr	r3, [r7, #4]
20016550:	6a1b      	ldr	r3, [r3, #32]
20016552:	085b      	lsrs	r3, r3, #1
20016554:	3b01      	subs	r3, #1
20016556:	041b      	lsls	r3, r3, #16
20016558:	431a      	orrs	r2, r3
2001655a:	68fb      	ldr	r3, [r7, #12]
2001655c:	061b      	lsls	r3, r3, #24
2001655e:	4910      	ldr	r1, [pc, #64]	; (200165a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
20016560:	4313      	orrs	r3, r2
20016562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
20016566:	4b0f      	ldr	r3, [pc, #60]	; (200165a4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
20016568:	2201      	movs	r2, #1
2001656a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
2001656c:	f7fa fb1a 	bl	20010ba4 <HAL_GetTick>
20016570:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20016572:	e008      	b.n	20016586 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
20016574:	f7fa fb16 	bl	20010ba4 <HAL_GetTick>
20016578:	4602      	mov	r2, r0
2001657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2001657c:	1ad3      	subs	r3, r2, r3
2001657e:	2b02      	cmp	r3, #2
20016580:	d901      	bls.n	20016586 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20016582:	2303      	movs	r3, #3
20016584:	e007      	b.n	20016596 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20016586:	4b06      	ldr	r3, [pc, #24]	; (200165a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
20016588:	681b      	ldr	r3, [r3, #0]
2001658a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2001658e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
20016592:	d1ef      	bne.n	20016574 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
20016594:	2300      	movs	r3, #0
}
20016596:	4618      	mov	r0, r3
20016598:	3730      	adds	r7, #48	; 0x30
2001659a:	46bd      	mov	sp, r7
2001659c:	bd80      	pop	{r7, pc}
2001659e:	bf00      	nop
200165a0:	40023800 	.word	0x40023800
200165a4:	42470070 	.word	0x42470070

200165a8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
200165a8:	b480      	push	{r7}
200165aa:	b085      	sub	sp, #20
200165ac:	af00      	add	r7, sp, #0
200165ae:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 |\
200165b0:	687b      	ldr	r3, [r7, #4]
200165b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
200165b6:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_FMPI2C1  |\
                                        RCC_PERIPHCLK_CLK48     | RCC_PERIPHCLK_SDIO     |\
                                        RCC_PERIPHCLK_SPDIFRX;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI2SCFGR_PLLI2SM_Pos);
200165b8:	4b5d      	ldr	r3, [pc, #372]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200165ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200165be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
200165c2:	687b      	ldr	r3, [r7, #4]
200165c4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
200165c6:	4b5a      	ldr	r3, [pc, #360]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200165c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200165cc:	099b      	lsrs	r3, r3, #6
200165ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
200165d2:	687b      	ldr	r3, [r7, #4]
200165d4:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
200165d6:	4b56      	ldr	r3, [pc, #344]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200165d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200165dc:	0c1b      	lsrs	r3, r3, #16
200165de:	f003 0303 	and.w	r3, r3, #3
200165e2:	3301      	adds	r3, #1
200165e4:	005a      	lsls	r2, r3, #1
200165e6:	687b      	ldr	r3, [r7, #4]
200165e8:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
200165ea:	4b51      	ldr	r3, [pc, #324]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200165ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200165f0:	0e1b      	lsrs	r3, r3, #24
200165f2:	f003 020f 	and.w	r2, r3, #15
200165f6:	687b      	ldr	r3, [r7, #4]
200165f8:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
200165fa:	4b4d      	ldr	r3, [pc, #308]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200165fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20016600:	0f1b      	lsrs	r3, r3, #28
20016602:	f003 0207 	and.w	r2, r3, #7
20016606:	687b      	ldr	r3, [r7, #4]
20016608:	615a      	str	r2, [r3, #20]
  /* Get the PLLSAI Clock configuration --------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIM = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM) >> RCC_PLLSAICFGR_PLLSAIM_Pos);
2001660a:	4b49      	ldr	r3, [pc, #292]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
2001660c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20016610:	f003 023f 	and.w	r2, r3, #63	; 0x3f
20016614:	687b      	ldr	r3, [r7, #4]
20016616:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
20016618:	4b45      	ldr	r3, [pc, #276]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
2001661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2001661e:	099b      	lsrs	r3, r3, #6
20016620:	f3c3 0208 	ubfx	r2, r3, #0, #9
20016624:	687b      	ldr	r3, [r7, #4]
20016626:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
20016628:	4b41      	ldr	r3, [pc, #260]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
2001662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2001662e:	0c1b      	lsrs	r3, r3, #16
20016630:	f003 0303 	and.w	r3, r3, #3
20016634:	3301      	adds	r3, #1
20016636:	005a      	lsls	r2, r3, #1
20016638:	687b      	ldr	r3, [r7, #4]
2001663a:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
2001663c:	4b3c      	ldr	r3, [pc, #240]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
2001663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20016642:	0e1b      	lsrs	r3, r3, #24
20016644:	f003 020f 	and.w	r2, r3, #15
20016648:	687b      	ldr	r3, [r7, #4]
2001664a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLLI2SDIVQ_Pos);
2001664c:	4b38      	ldr	r3, [pc, #224]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
2001664e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20016652:	f003 021f 	and.w	r2, r3, #31
20016656:	687b      	ldr	r3, [r7, #4]
20016658:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLLSAIDIVQ_Pos);
2001665a:	4b35      	ldr	r3, [pc, #212]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
2001665c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20016660:	0a1b      	lsrs	r3, r3, #8
20016662:	f003 021f 	and.w	r2, r3, #31
20016666:	687b      	ldr	r3, [r7, #4]
20016668:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
2001666a:	4b31      	ldr	r3, [pc, #196]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
2001666c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20016670:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
20016674:	687b      	ldr	r3, [r7, #4]
20016676:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the SAI2 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
20016678:	4b2d      	ldr	r3, [pc, #180]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
2001667a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2001667e:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
20016682:	687b      	ldr	r3, [r7, #4]
20016684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2S APB1 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
20016686:	4b2a      	ldr	r3, [pc, #168]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20016688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2001668c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
20016690:	687b      	ldr	r3, [r7, #4]
20016692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get the I2S APB2 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
20016694:	4b26      	ldr	r3, [pc, #152]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20016696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2001669a:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
2001669e:	687b      	ldr	r3, [r7, #4]
200166a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
200166a2:	4b23      	ldr	r3, [pc, #140]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200166a4:	689b      	ldr	r3, [r3, #8]
200166a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
200166aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
200166ac:	4b20      	ldr	r3, [pc, #128]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200166ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200166b0:	f403 7240 	and.w	r2, r3, #768	; 0x300
200166b4:	68fb      	ldr	r3, [r7, #12]
200166b6:	431a      	orrs	r2, r3
200166b8:	687b      	ldr	r3, [r7, #4]
200166ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the CEC clock configuration -----------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
200166bc:	4b1c      	ldr	r3, [pc, #112]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200166be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200166c2:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
200166c6:	687b      	ldr	r3, [r7, #4]
200166c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the FMPI2C1 clock configuration -------------------------------------*/
  PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
200166ca:	4b19      	ldr	r3, [pc, #100]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200166cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200166d0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
200166d4:	687b      	ldr	r3, [r7, #4]
200166d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the CLK48 clock configuration ----------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
200166d8:	4b15      	ldr	r3, [pc, #84]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200166da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200166de:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
200166e2:	687b      	ldr	r3, [r7, #4]
200166e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
200166e6:	4b12      	ldr	r3, [pc, #72]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200166e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200166ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
200166f0:	687b      	ldr	r3, [r7, #4]
200166f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the SPDIFRX clock configuration -------------------------------------*/
  PeriphClkInit->SpdifClockSelection = __HAL_RCC_GET_SPDIFRX_SOURCE();
200166f4:	4b0e      	ldr	r3, [pc, #56]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
200166f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
200166fa:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
200166fe:	687b      	ldr	r3, [r7, #4]
20016700:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
20016702:	4b0b      	ldr	r3, [pc, #44]	; (20016730 <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
20016704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20016708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2001670c:	2b00      	cmp	r3, #0
2001670e:	d104      	bne.n	2001671a <HAL_RCCEx_GetPeriphCLKConfig+0x172>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
20016710:	687b      	ldr	r3, [r7, #4]
20016712:	2200      	movs	r2, #0
20016714:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
20016718:	e003      	b.n	20016722 <HAL_RCCEx_GetPeriphCLKConfig+0x17a>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
2001671a:	687b      	ldr	r3, [r7, #4]
2001671c:	2201      	movs	r2, #1
2001671e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
20016722:	bf00      	nop
20016724:	3714      	adds	r7, #20
20016726:	46bd      	mov	sp, r7
20016728:	f85d 7b04 	ldr.w	r7, [sp], #4
2001672c:	4770      	bx	lr
2001672e:	bf00      	nop
20016730:	40023800 	.word	0x40023800

20016734 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
20016734:	b480      	push	{r7}
20016736:	b089      	sub	sp, #36	; 0x24
20016738:	af00      	add	r7, sp, #0
2001673a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
2001673c:	2300      	movs	r3, #0
2001673e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
20016740:	2300      	movs	r3, #0
20016742:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
20016744:	2300      	movs	r3, #0
20016746:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
20016748:	2300      	movs	r3, #0
2001674a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
2001674c:	2300      	movs	r3, #0
2001674e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
20016750:	2300      	movs	r3, #0
20016752:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
20016754:	687b      	ldr	r3, [r7, #4]
20016756:	3b01      	subs	r3, #1
20016758:	2b07      	cmp	r3, #7
2001675a:	f200 81fa 	bhi.w	20016b52 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
2001675e:	a201      	add	r2, pc, #4	; (adr r2, 20016764 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
20016760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20016764:	2001692d 	.word	0x2001692d
20016768:	20016a49 	.word	0x20016a49
2001676c:	20016b53 	.word	0x20016b53
20016770:	20016785 	.word	0x20016785
20016774:	20016b53 	.word	0x20016b53
20016778:	20016b53 	.word	0x20016b53
2001677c:	20016b53 	.word	0x20016b53
20016780:	20016785 	.word	0x20016785
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
20016784:	4bac      	ldr	r3, [pc, #688]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2001678a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
2001678c:	693b      	ldr	r3, [r7, #16]
2001678e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
20016792:	613b      	str	r3, [r7, #16]
      switch (saiclocksource)
20016794:	693b      	ldr	r3, [r7, #16]
20016796:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2001679a:	f000 80b7 	beq.w	2001690c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
2001679e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
200167a2:	d809      	bhi.n	200167b8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
200167a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
200167a8:	d04c      	beq.n	20016844 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
200167aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
200167ae:	f000 8083 	beq.w	200168b8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
200167b2:	2b00      	cmp	r3, #0
200167b4:	d00b      	beq.n	200167ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          }
          break;
        }
      default :
        {
          break;
200167b6:	e0b8      	b.n	2001692a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
      switch (saiclocksource)
200167b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
200167bc:	d07c      	beq.n	200168b8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
200167be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
200167c2:	f000 80a6 	beq.w	20016912 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
200167c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
200167ca:	d03b      	beq.n	20016844 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          break;
200167cc:	e0ad      	b.n	2001692a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
200167ce:	4b9a      	ldr	r3, [pc, #616]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200167d0:	685b      	ldr	r3, [r3, #4]
200167d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200167d6:	2b00      	cmp	r3, #0
200167d8:	d109      	bne.n	200167ee <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
200167da:	4b97      	ldr	r3, [pc, #604]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200167dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
200167e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200167e4:	4a95      	ldr	r2, [pc, #596]	; (20016a3c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
200167e6:	fbb2 f3f3 	udiv	r3, r2, r3
200167ea:	61bb      	str	r3, [r7, #24]
200167ec:	e008      	b.n	20016800 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
200167ee:	4b92      	ldr	r3, [pc, #584]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200167f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
200167f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200167f8:	4a91      	ldr	r2, [pc, #580]	; (20016a40 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
200167fa:	fbb2 f3f3 	udiv	r3, r2, r3
200167fe:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
20016800:	4b8d      	ldr	r3, [pc, #564]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20016806:	0e1b      	lsrs	r3, r3, #24
20016808:	f003 030f 	and.w	r3, r3, #15
2001680c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
2001680e:	4b8a      	ldr	r3, [pc, #552]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20016814:	099b      	lsrs	r3, r3, #6
20016816:	f3c3 0308 	ubfx	r3, r3, #0, #9
2001681a:	69ba      	ldr	r2, [r7, #24]
2001681c:	fb02 f203 	mul.w	r2, r2, r3
20016820:	697b      	ldr	r3, [r7, #20]
20016822:	fbb2 f3f3 	udiv	r3, r2, r3
20016826:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
20016828:	4b83      	ldr	r3, [pc, #524]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
2001682a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2001682e:	0a1b      	lsrs	r3, r3, #8
20016830:	f003 031f 	and.w	r3, r3, #31
20016834:	3301      	adds	r3, #1
20016836:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
20016838:	69fa      	ldr	r2, [r7, #28]
2001683a:	697b      	ldr	r3, [r7, #20]
2001683c:	fbb2 f3f3 	udiv	r3, r2, r3
20016840:	61fb      	str	r3, [r7, #28]
          break;
20016842:	e072      	b.n	2001692a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
20016844:	4b7c      	ldr	r3, [pc, #496]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016846:	685b      	ldr	r3, [r3, #4]
20016848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2001684c:	2b00      	cmp	r3, #0
2001684e:	d109      	bne.n	20016864 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
20016850:	4b79      	ldr	r3, [pc, #484]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20016856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2001685a:	4a78      	ldr	r2, [pc, #480]	; (20016a3c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
2001685c:	fbb2 f3f3 	udiv	r3, r2, r3
20016860:	61bb      	str	r3, [r7, #24]
20016862:	e008      	b.n	20016876 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
20016864:	4b74      	ldr	r3, [pc, #464]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2001686a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2001686e:	4a74      	ldr	r2, [pc, #464]	; (20016a40 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
20016870:	fbb2 f3f3 	udiv	r3, r2, r3
20016874:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
20016876:	4b70      	ldr	r3, [pc, #448]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2001687c:	0e1b      	lsrs	r3, r3, #24
2001687e:	f003 030f 	and.w	r3, r3, #15
20016882:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
20016884:	4b6c      	ldr	r3, [pc, #432]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2001688a:	099b      	lsrs	r3, r3, #6
2001688c:	f3c3 0308 	ubfx	r3, r3, #0, #9
20016890:	69ba      	ldr	r2, [r7, #24]
20016892:	fb02 f203 	mul.w	r2, r2, r3
20016896:	697b      	ldr	r3, [r7, #20]
20016898:	fbb2 f3f3 	udiv	r3, r2, r3
2001689c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
2001689e:	4b66      	ldr	r3, [pc, #408]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200168a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
200168a4:	f003 031f 	and.w	r3, r3, #31
200168a8:	3301      	adds	r3, #1
200168aa:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
200168ac:	69fa      	ldr	r2, [r7, #28]
200168ae:	697b      	ldr	r3, [r7, #20]
200168b0:	fbb2 f3f3 	udiv	r3, r2, r3
200168b4:	61fb      	str	r3, [r7, #28]
          break;
200168b6:	e038      	b.n	2001692a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
200168b8:	4b5f      	ldr	r3, [pc, #380]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200168ba:	685b      	ldr	r3, [r3, #4]
200168bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200168c0:	2b00      	cmp	r3, #0
200168c2:	d108      	bne.n	200168d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
200168c4:	4b5c      	ldr	r3, [pc, #368]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200168c6:	685b      	ldr	r3, [r3, #4]
200168c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200168cc:	4a5b      	ldr	r2, [pc, #364]	; (20016a3c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
200168ce:	fbb2 f3f3 	udiv	r3, r2, r3
200168d2:	61bb      	str	r3, [r7, #24]
200168d4:	e007      	b.n	200168e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
200168d6:	4b58      	ldr	r3, [pc, #352]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200168d8:	685b      	ldr	r3, [r3, #4]
200168da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200168de:	4a58      	ldr	r2, [pc, #352]	; (20016a40 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
200168e0:	fbb2 f3f3 	udiv	r3, r2, r3
200168e4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
200168e6:	4b54      	ldr	r3, [pc, #336]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200168e8:	685b      	ldr	r3, [r3, #4]
200168ea:	0f1b      	lsrs	r3, r3, #28
200168ec:	f003 0307 	and.w	r3, r3, #7
200168f0:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
200168f2:	4b51      	ldr	r3, [pc, #324]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200168f4:	685b      	ldr	r3, [r3, #4]
200168f6:	099b      	lsrs	r3, r3, #6
200168f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
200168fc:	69ba      	ldr	r2, [r7, #24]
200168fe:	fb02 f203 	mul.w	r2, r2, r3
20016902:	697b      	ldr	r3, [r7, #20]
20016904:	fbb2 f3f3 	udiv	r3, r2, r3
20016908:	61fb      	str	r3, [r7, #28]
          break;
2001690a:	e00e      	b.n	2001692a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          frequency = EXTERNAL_CLOCK_VALUE;
2001690c:	4b4d      	ldr	r3, [pc, #308]	; (20016a44 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
2001690e:	61fb      	str	r3, [r7, #28]
          break;
20016910:	e00b      	b.n	2001692a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
20016912:	4b49      	ldr	r3, [pc, #292]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016914:	685b      	ldr	r3, [r3, #4]
20016916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2001691a:	2b00      	cmp	r3, #0
2001691c:	d102      	bne.n	20016924 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
            frequency = (uint32_t)(HSI_VALUE);
2001691e:	4b47      	ldr	r3, [pc, #284]	; (20016a3c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
20016920:	61fb      	str	r3, [r7, #28]
          break;
20016922:	e001      	b.n	20016928 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            frequency = (uint32_t)(HSE_VALUE);
20016924:	4b46      	ldr	r3, [pc, #280]	; (20016a40 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
20016926:	61fb      	str	r3, [r7, #28]
          break;
20016928:	bf00      	nop
        }
      }
      break;
2001692a:	e112      	b.n	20016b52 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
2001692c:	4b42      	ldr	r3, [pc, #264]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
2001692e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20016932:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
20016936:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
20016938:	68fb      	ldr	r3, [r7, #12]
2001693a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2001693e:	d00c      	beq.n	2001695a <HAL_RCCEx_GetPeriphCLKFreq+0x226>
20016940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20016944:	d802      	bhi.n	2001694c <HAL_RCCEx_GetPeriphCLKFreq+0x218>
20016946:	2b00      	cmp	r3, #0
20016948:	d00a      	beq.n	20016960 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
2001694a:	e070      	b.n	20016a2e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
2001694c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
20016950:	d035      	beq.n	200169be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
20016952:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
20016956:	d05d      	beq.n	20016a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
20016958:	e069      	b.n	20016a2e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
2001695a:	4b3a      	ldr	r3, [pc, #232]	; (20016a44 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
2001695c:	61fb      	str	r3, [r7, #28]
          break;
2001695e:	e069      	b.n	20016a34 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20016960:	4b35      	ldr	r3, [pc, #212]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016962:	685b      	ldr	r3, [r3, #4]
20016964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20016968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2001696c:	d109      	bne.n	20016982 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
2001696e:	4b32      	ldr	r3, [pc, #200]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20016974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20016978:	4a31      	ldr	r2, [pc, #196]	; (20016a40 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
2001697a:	fbb2 f3f3 	udiv	r3, r2, r3
2001697e:	61bb      	str	r3, [r7, #24]
20016980:	e008      	b.n	20016994 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
20016982:	4b2d      	ldr	r3, [pc, #180]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20016988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2001698c:	4a2b      	ldr	r2, [pc, #172]	; (20016a3c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
2001698e:	fbb2 f3f3 	udiv	r3, r2, r3
20016992:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
20016994:	4b28      	ldr	r3, [pc, #160]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2001699a:	099b      	lsrs	r3, r3, #6
2001699c:	f3c3 0208 	ubfx	r2, r3, #0, #9
200169a0:	69bb      	ldr	r3, [r7, #24]
200169a2:	fb02 f303 	mul.w	r3, r2, r3
200169a6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
200169a8:	4b23      	ldr	r3, [pc, #140]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200169aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200169ae:	0f1b      	lsrs	r3, r3, #28
200169b0:	f003 0307 	and.w	r3, r3, #7
200169b4:	68ba      	ldr	r2, [r7, #8]
200169b6:	fbb2 f3f3 	udiv	r3, r2, r3
200169ba:	61fb      	str	r3, [r7, #28]
          break;
200169bc:	e03a      	b.n	20016a34 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
200169be:	4b1e      	ldr	r3, [pc, #120]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200169c0:	685b      	ldr	r3, [r3, #4]
200169c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200169c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
200169ca:	d108      	bne.n	200169de <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
200169cc:	4b1a      	ldr	r3, [pc, #104]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200169ce:	685b      	ldr	r3, [r3, #4]
200169d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200169d4:	4a1a      	ldr	r2, [pc, #104]	; (20016a40 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
200169d6:	fbb2 f3f3 	udiv	r3, r2, r3
200169da:	61bb      	str	r3, [r7, #24]
200169dc:	e007      	b.n	200169ee <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
200169de:	4b16      	ldr	r3, [pc, #88]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200169e0:	685b      	ldr	r3, [r3, #4]
200169e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200169e6:	4a15      	ldr	r2, [pc, #84]	; (20016a3c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
200169e8:	fbb2 f3f3 	udiv	r3, r2, r3
200169ec:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
200169ee:	4b12      	ldr	r3, [pc, #72]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
200169f0:	685b      	ldr	r3, [r3, #4]
200169f2:	099b      	lsrs	r3, r3, #6
200169f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
200169f8:	69bb      	ldr	r3, [r7, #24]
200169fa:	fb02 f303 	mul.w	r3, r2, r3
200169fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
20016a00:	4b0d      	ldr	r3, [pc, #52]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016a02:	685b      	ldr	r3, [r3, #4]
20016a04:	0f1b      	lsrs	r3, r3, #28
20016a06:	f003 0307 	and.w	r3, r3, #7
20016a0a:	68ba      	ldr	r2, [r7, #8]
20016a0c:	fbb2 f3f3 	udiv	r3, r2, r3
20016a10:	61fb      	str	r3, [r7, #28]
          break;
20016a12:	e00f      	b.n	20016a34 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20016a14:	4b08      	ldr	r3, [pc, #32]	; (20016a38 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
20016a16:	685b      	ldr	r3, [r3, #4]
20016a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20016a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20016a20:	d102      	bne.n	20016a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
          {
            frequency = HSE_VALUE;
20016a22:	4b07      	ldr	r3, [pc, #28]	; (20016a40 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
20016a24:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
20016a26:	e005      	b.n	20016a34 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
            frequency = HSI_VALUE;
20016a28:	4b04      	ldr	r3, [pc, #16]	; (20016a3c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
20016a2a:	61fb      	str	r3, [r7, #28]
          break;
20016a2c:	e002      	b.n	20016a34 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
20016a2e:	2300      	movs	r3, #0
20016a30:	61fb      	str	r3, [r7, #28]
          break;
20016a32:	bf00      	nop
        }
      }
      break;
20016a34:	e08d      	b.n	20016b52 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
20016a36:	bf00      	nop
20016a38:	40023800 	.word	0x40023800
20016a3c:	00f42400 	.word	0x00f42400
20016a40:	007a1200 	.word	0x007a1200
20016a44:	00bb8000 	.word	0x00bb8000
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
20016a48:	4b45      	ldr	r3, [pc, #276]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20016a4e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
20016a52:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
20016a54:	68fb      	ldr	r3, [r7, #12]
20016a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
20016a5a:	d00c      	beq.n	20016a76 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
20016a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
20016a60:	d802      	bhi.n	20016a68 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
20016a62:	2b00      	cmp	r3, #0
20016a64:	d00a      	beq.n	20016a7c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
20016a66:	e070      	b.n	20016b4a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
20016a68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
20016a6c:	d035      	beq.n	20016ada <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
20016a6e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
20016a72:	d05d      	beq.n	20016b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
20016a74:	e069      	b.n	20016b4a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
20016a76:	4b3b      	ldr	r3, [pc, #236]	; (20016b64 <HAL_RCCEx_GetPeriphCLKFreq+0x430>)
20016a78:	61fb      	str	r3, [r7, #28]
          break;
20016a7a:	e069      	b.n	20016b50 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20016a7c:	4b38      	ldr	r3, [pc, #224]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016a7e:	685b      	ldr	r3, [r3, #4]
20016a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20016a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20016a88:	d109      	bne.n	20016a9e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
20016a8a:	4b35      	ldr	r3, [pc, #212]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20016a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20016a94:	4a34      	ldr	r2, [pc, #208]	; (20016b68 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
20016a96:	fbb2 f3f3 	udiv	r3, r2, r3
20016a9a:	61bb      	str	r3, [r7, #24]
20016a9c:	e008      	b.n	20016ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
20016a9e:	4b30      	ldr	r3, [pc, #192]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20016aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20016aa8:	4a30      	ldr	r2, [pc, #192]	; (20016b6c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
20016aaa:	fbb2 f3f3 	udiv	r3, r2, r3
20016aae:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
20016ab0:	4b2b      	ldr	r3, [pc, #172]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20016ab6:	099b      	lsrs	r3, r3, #6
20016ab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
20016abc:	69bb      	ldr	r3, [r7, #24]
20016abe:	fb02 f303 	mul.w	r3, r2, r3
20016ac2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
20016ac4:	4b26      	ldr	r3, [pc, #152]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20016aca:	0f1b      	lsrs	r3, r3, #28
20016acc:	f003 0307 	and.w	r3, r3, #7
20016ad0:	68ba      	ldr	r2, [r7, #8]
20016ad2:	fbb2 f3f3 	udiv	r3, r2, r3
20016ad6:	61fb      	str	r3, [r7, #28]
          break;
20016ad8:	e03a      	b.n	20016b50 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20016ada:	4b21      	ldr	r3, [pc, #132]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016adc:	685b      	ldr	r3, [r3, #4]
20016ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20016ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20016ae6:	d108      	bne.n	20016afa <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
20016ae8:	4b1d      	ldr	r3, [pc, #116]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016aea:	685b      	ldr	r3, [r3, #4]
20016aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20016af0:	4a1d      	ldr	r2, [pc, #116]	; (20016b68 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
20016af2:	fbb2 f3f3 	udiv	r3, r2, r3
20016af6:	61bb      	str	r3, [r7, #24]
20016af8:	e007      	b.n	20016b0a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
20016afa:	4b19      	ldr	r3, [pc, #100]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016afc:	685b      	ldr	r3, [r3, #4]
20016afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20016b02:	4a1a      	ldr	r2, [pc, #104]	; (20016b6c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
20016b04:	fbb2 f3f3 	udiv	r3, r2, r3
20016b08:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
20016b0a:	4b15      	ldr	r3, [pc, #84]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016b0c:	685b      	ldr	r3, [r3, #4]
20016b0e:	099b      	lsrs	r3, r3, #6
20016b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
20016b14:	69bb      	ldr	r3, [r7, #24]
20016b16:	fb02 f303 	mul.w	r3, r2, r3
20016b1a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
20016b1c:	4b10      	ldr	r3, [pc, #64]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016b1e:	685b      	ldr	r3, [r3, #4]
20016b20:	0f1b      	lsrs	r3, r3, #28
20016b22:	f003 0307 	and.w	r3, r3, #7
20016b26:	68ba      	ldr	r2, [r7, #8]
20016b28:	fbb2 f3f3 	udiv	r3, r2, r3
20016b2c:	61fb      	str	r3, [r7, #28]
          break;
20016b2e:	e00f      	b.n	20016b50 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20016b30:	4b0b      	ldr	r3, [pc, #44]	; (20016b60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
20016b32:	685b      	ldr	r3, [r3, #4]
20016b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20016b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20016b3c:	d102      	bne.n	20016b44 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          {
            frequency = HSE_VALUE;
20016b3e:	4b0a      	ldr	r3, [pc, #40]	; (20016b68 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
20016b40:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
20016b42:	e005      	b.n	20016b50 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            frequency = HSI_VALUE;
20016b44:	4b09      	ldr	r3, [pc, #36]	; (20016b6c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
20016b46:	61fb      	str	r3, [r7, #28]
          break;
20016b48:	e002      	b.n	20016b50 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
20016b4a:	2300      	movs	r3, #0
20016b4c:	61fb      	str	r3, [r7, #28]
          break;
20016b4e:	bf00      	nop
        }
      }
      break;
20016b50:	bf00      	nop
    }
  }
  return frequency;
20016b52:	69fb      	ldr	r3, [r7, #28]
}
20016b54:	4618      	mov	r0, r3
20016b56:	3724      	adds	r7, #36	; 0x24
20016b58:	46bd      	mov	sp, r7
20016b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
20016b5e:	4770      	bx	lr
20016b60:	40023800 	.word	0x40023800
20016b64:	00bb8000 	.word	0x00bb8000
20016b68:	007a1200 	.word	0x007a1200
20016b6c:	00f42400 	.word	0x00f42400

20016b70 <HAL_RCCEx_SelectLSEMode>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode selection
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode selection
  * @retval None
  */
void HAL_RCCEx_SelectLSEMode(uint8_t Mode)
{
20016b70:	b480      	push	{r7}
20016b72:	b083      	sub	sp, #12
20016b74:	af00      	add	r7, sp, #0
20016b76:	4603      	mov	r3, r0
20016b78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(Mode));
  if(Mode == RCC_LSE_HIGHDRIVE_MODE)
20016b7a:	79fb      	ldrb	r3, [r7, #7]
20016b7c:	2b01      	cmp	r3, #1
20016b7e:	d106      	bne.n	20016b8e <HAL_RCCEx_SelectLSEMode+0x1e>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20016b80:	4b09      	ldr	r3, [pc, #36]	; (20016ba8 <HAL_RCCEx_SelectLSEMode+0x38>)
20016b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20016b84:	4a08      	ldr	r2, [pc, #32]	; (20016ba8 <HAL_RCCEx_SelectLSEMode+0x38>)
20016b86:	f043 0308 	orr.w	r3, r3, #8
20016b8a:	6713      	str	r3, [r2, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20016b8c:	e005      	b.n	20016b9a <HAL_RCCEx_SelectLSEMode+0x2a>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20016b8e:	4b06      	ldr	r3, [pc, #24]	; (20016ba8 <HAL_RCCEx_SelectLSEMode+0x38>)
20016b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20016b92:	4a05      	ldr	r2, [pc, #20]	; (20016ba8 <HAL_RCCEx_SelectLSEMode+0x38>)
20016b94:	f023 0308 	bic.w	r3, r3, #8
20016b98:	6713      	str	r3, [r2, #112]	; 0x70
}
20016b9a:	bf00      	nop
20016b9c:	370c      	adds	r7, #12
20016b9e:	46bd      	mov	sp, r7
20016ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
20016ba4:	4770      	bx	lr
20016ba6:	bf00      	nop
20016ba8:	40023800 	.word	0x40023800

20016bac <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
20016bac:	b580      	push	{r7, lr}
20016bae:	b084      	sub	sp, #16
20016bb0:	af00      	add	r7, sp, #0
20016bb2:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
20016bb4:	4b23      	ldr	r3, [pc, #140]	; (20016c44 <HAL_RCCEx_EnablePLLI2S+0x98>)
20016bb6:	2200      	movs	r2, #0
20016bb8:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
20016bba:	f7f9 fff3 	bl	20010ba4 <HAL_GetTick>
20016bbe:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
20016bc0:	e008      	b.n	20016bd4 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
20016bc2:	f7f9 ffef 	bl	20010ba4 <HAL_GetTick>
20016bc6:	4602      	mov	r2, r0
20016bc8:	68fb      	ldr	r3, [r7, #12]
20016bca:	1ad3      	subs	r3, r2, r3
20016bcc:	2b02      	cmp	r3, #2
20016bce:	d901      	bls.n	20016bd4 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20016bd0:	2303      	movs	r3, #3
20016bd2:	e033      	b.n	20016c3c <HAL_RCCEx_EnablePLLI2S+0x90>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
20016bd4:	4b1c      	ldr	r3, [pc, #112]	; (20016c48 <HAL_RCCEx_EnablePLLI2S+0x9c>)
20016bd6:	681b      	ldr	r3, [r3, #0]
20016bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20016bdc:	2b00      	cmp	r3, #0
20016bde:	d1f0      	bne.n	20016bc2 <HAL_RCCEx_EnablePLLI2S+0x16>
#if defined(STM32F446xx)
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
  /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
  /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
20016be0:	687b      	ldr	r3, [r7, #4]
20016be2:	681a      	ldr	r2, [r3, #0]
20016be4:	687b      	ldr	r3, [r7, #4]
20016be6:	685b      	ldr	r3, [r3, #4]
20016be8:	019b      	lsls	r3, r3, #6
20016bea:	431a      	orrs	r2, r3
20016bec:	687b      	ldr	r3, [r7, #4]
20016bee:	689b      	ldr	r3, [r3, #8]
20016bf0:	085b      	lsrs	r3, r3, #1
20016bf2:	3b01      	subs	r3, #1
20016bf4:	041b      	lsls	r3, r3, #16
20016bf6:	431a      	orrs	r2, r3
20016bf8:	687b      	ldr	r3, [r7, #4]
20016bfa:	68db      	ldr	r3, [r3, #12]
20016bfc:	061b      	lsls	r3, r3, #24
20016bfe:	431a      	orrs	r2, r3
20016c00:	687b      	ldr	r3, [r7, #4]
20016c02:	691b      	ldr	r3, [r3, #16]
20016c04:	071b      	lsls	r3, r3, #28
20016c06:	4910      	ldr	r1, [pc, #64]	; (20016c48 <HAL_RCCEx_EnablePLLI2S+0x9c>)
20016c08:	4313      	orrs	r3, r2
20016c0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
20016c0e:	4b0d      	ldr	r3, [pc, #52]	; (20016c44 <HAL_RCCEx_EnablePLLI2S+0x98>)
20016c10:	2201      	movs	r2, #1
20016c12:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
20016c14:	f7f9 ffc6 	bl	20010ba4 <HAL_GetTick>
20016c18:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
20016c1a:	e008      	b.n	20016c2e <HAL_RCCEx_EnablePLLI2S+0x82>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
20016c1c:	f7f9 ffc2 	bl	20010ba4 <HAL_GetTick>
20016c20:	4602      	mov	r2, r0
20016c22:	68fb      	ldr	r3, [r7, #12]
20016c24:	1ad3      	subs	r3, r2, r3
20016c26:	2b02      	cmp	r3, #2
20016c28:	d901      	bls.n	20016c2e <HAL_RCCEx_EnablePLLI2S+0x82>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20016c2a:	2303      	movs	r3, #3
20016c2c:	e006      	b.n	20016c3c <HAL_RCCEx_EnablePLLI2S+0x90>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
20016c2e:	4b06      	ldr	r3, [pc, #24]	; (20016c48 <HAL_RCCEx_EnablePLLI2S+0x9c>)
20016c30:	681b      	ldr	r3, [r3, #0]
20016c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20016c36:	2b00      	cmp	r3, #0
20016c38:	d0f0      	beq.n	20016c1c <HAL_RCCEx_EnablePLLI2S+0x70>
    }
  }

 return HAL_OK;
20016c3a:	2300      	movs	r3, #0
}
20016c3c:	4618      	mov	r0, r3
20016c3e:	3710      	adds	r7, #16
20016c40:	46bd      	mov	sp, r7
20016c42:	bd80      	pop	{r7, pc}
20016c44:	42470068 	.word	0x42470068
20016c48:	40023800 	.word	0x40023800

20016c4c <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
20016c4c:	b580      	push	{r7, lr}
20016c4e:	b082      	sub	sp, #8
20016c50:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
20016c52:	4b0d      	ldr	r3, [pc, #52]	; (20016c88 <HAL_RCCEx_DisablePLLI2S+0x3c>)
20016c54:	2200      	movs	r2, #0
20016c56:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
20016c58:	f7f9 ffa4 	bl	20010ba4 <HAL_GetTick>
20016c5c:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20016c5e:	e008      	b.n	20016c72 <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20016c60:	f7f9 ffa0 	bl	20010ba4 <HAL_GetTick>
20016c64:	4602      	mov	r2, r0
20016c66:	687b      	ldr	r3, [r7, #4]
20016c68:	1ad3      	subs	r3, r2, r3
20016c6a:	2b02      	cmp	r3, #2
20016c6c:	d901      	bls.n	20016c72 <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20016c6e:	2303      	movs	r3, #3
20016c70:	e006      	b.n	20016c80 <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20016c72:	4b06      	ldr	r3, [pc, #24]	; (20016c8c <HAL_RCCEx_DisablePLLI2S+0x40>)
20016c74:	681b      	ldr	r3, [r3, #0]
20016c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20016c7a:	2b00      	cmp	r3, #0
20016c7c:	d1f0      	bne.n	20016c60 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
20016c7e:	2300      	movs	r3, #0
}
20016c80:	4618      	mov	r0, r3
20016c82:	3708      	adds	r7, #8
20016c84:	46bd      	mov	sp, r7
20016c86:	bd80      	pop	{r7, pc}
20016c88:	42470068 	.word	0x42470068
20016c8c:	40023800 	.word	0x40023800

20016c90 <HAL_RCCEx_EnablePLLSAI>:
  * @param  PLLSAIInit  pointer to an RCC_PLLSAIInitTypeDef structure that
  *         contains the configuration information for the PLLSAI
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI(RCC_PLLSAIInitTypeDef  *PLLSAIInit)
{
20016c90:	b580      	push	{r7, lr}
20016c92:	b084      	sub	sp, #16
20016c94:	af00      	add	r7, sp, #0
20016c96:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLSAICFGR_PLLSAIR)
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
#endif /* RCC_PLLSAICFGR_PLLSAIR */

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
20016c98:	4b22      	ldr	r3, [pc, #136]	; (20016d24 <HAL_RCCEx_EnablePLLSAI+0x94>)
20016c9a:	2200      	movs	r2, #0
20016c9c:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
20016c9e:	f7f9 ff81 	bl	20010ba4 <HAL_GetTick>
20016ca2:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20016ca4:	e008      	b.n	20016cb8 <HAL_RCCEx_EnablePLLSAI+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
20016ca6:	f7f9 ff7d 	bl	20010ba4 <HAL_GetTick>
20016caa:	4602      	mov	r2, r0
20016cac:	68fb      	ldr	r3, [r7, #12]
20016cae:	1ad3      	subs	r3, r2, r3
20016cb0:	2b02      	cmp	r3, #2
20016cb2:	d901      	bls.n	20016cb8 <HAL_RCCEx_EnablePLLSAI+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20016cb4:	2303      	movs	r3, #3
20016cb6:	e031      	b.n	20016d1c <HAL_RCCEx_EnablePLLSAI+0x8c>
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20016cb8:	4b1b      	ldr	r3, [pc, #108]	; (20016d28 <HAL_RCCEx_EnablePLLSAI+0x98>)
20016cba:	681b      	ldr	r3, [r3, #0]
20016cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
20016cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
20016cc4:	d0ef      	beq.n	20016ca6 <HAL_RCCEx_EnablePLLSAI+0x16>
#if defined(STM32F446xx)
  /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLSAIN/PLLSAIM) */
  /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
  /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
  /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
  __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIM, PLLSAIInit->PLLSAIN, \
20016cc6:	687b      	ldr	r3, [r7, #4]
20016cc8:	681a      	ldr	r2, [r3, #0]
20016cca:	687b      	ldr	r3, [r7, #4]
20016ccc:	685b      	ldr	r3, [r3, #4]
20016cce:	019b      	lsls	r3, r3, #6
20016cd0:	431a      	orrs	r2, r3
20016cd2:	687b      	ldr	r3, [r7, #4]
20016cd4:	689b      	ldr	r3, [r3, #8]
20016cd6:	085b      	lsrs	r3, r3, #1
20016cd8:	3b01      	subs	r3, #1
20016cda:	041b      	lsls	r3, r3, #16
20016cdc:	431a      	orrs	r2, r3
20016cde:	687b      	ldr	r3, [r7, #4]
20016ce0:	68db      	ldr	r3, [r3, #12]
20016ce2:	061b      	lsls	r3, r3, #24
20016ce4:	4910      	ldr	r1, [pc, #64]	; (20016d28 <HAL_RCCEx_EnablePLLSAI+0x98>)
20016ce6:	4313      	orrs	r3, r2
20016ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
  __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
#endif /* STM32F446xx */

  /* Enable the PLLSAI */
  __HAL_RCC_PLLSAI_ENABLE();
20016cec:	4b0d      	ldr	r3, [pc, #52]	; (20016d24 <HAL_RCCEx_EnablePLLSAI+0x94>)
20016cee:	2201      	movs	r2, #1
20016cf0:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is ready */
  tickstart = HAL_GetTick();
20016cf2:	f7f9 ff57 	bl	20010ba4 <HAL_GetTick>
20016cf6:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20016cf8:	e008      	b.n	20016d0c <HAL_RCCEx_EnablePLLSAI+0x7c>
  {
    if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
20016cfa:	f7f9 ff53 	bl	20010ba4 <HAL_GetTick>
20016cfe:	4602      	mov	r2, r0
20016d00:	68fb      	ldr	r3, [r7, #12]
20016d02:	1ad3      	subs	r3, r2, r3
20016d04:	2b02      	cmp	r3, #2
20016d06:	d901      	bls.n	20016d0c <HAL_RCCEx_EnablePLLSAI+0x7c>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20016d08:	2303      	movs	r3, #3
20016d0a:	e007      	b.n	20016d1c <HAL_RCCEx_EnablePLLSAI+0x8c>
  while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
20016d0c:	4b06      	ldr	r3, [pc, #24]	; (20016d28 <HAL_RCCEx_EnablePLLSAI+0x98>)
20016d0e:	681b      	ldr	r3, [r3, #0]
20016d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
20016d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
20016d18:	d1ef      	bne.n	20016cfa <HAL_RCCEx_EnablePLLSAI+0x6a>
    }
  }

 return HAL_OK;
20016d1a:	2300      	movs	r3, #0
}
20016d1c:	4618      	mov	r0, r3
20016d1e:	3710      	adds	r7, #16
20016d20:	46bd      	mov	sp, r7
20016d22:	bd80      	pop	{r7, pc}
20016d24:	42470070 	.word	0x42470070
20016d28:	40023800 	.word	0x40023800

20016d2c <HAL_RCCEx_DisablePLLSAI>:
/**
  * @brief  Disable PLLSAI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
{
20016d2c:	b580      	push	{r7, lr}
20016d2e:	b082      	sub	sp, #8
20016d30:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
20016d32:	4b0e      	ldr	r3, [pc, #56]	; (20016d6c <HAL_RCCEx_DisablePLLSAI+0x40>)
20016d34:	2200      	movs	r2, #0
20016d36:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
20016d38:	f7f9 ff34 	bl	20010ba4 <HAL_GetTick>
20016d3c:	6078      	str	r0, [r7, #4]
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20016d3e:	e008      	b.n	20016d52 <HAL_RCCEx_DisablePLLSAI+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
20016d40:	f7f9 ff30 	bl	20010ba4 <HAL_GetTick>
20016d44:	4602      	mov	r2, r0
20016d46:	687b      	ldr	r3, [r7, #4]
20016d48:	1ad3      	subs	r3, r2, r3
20016d4a:	2b02      	cmp	r3, #2
20016d4c:	d901      	bls.n	20016d52 <HAL_RCCEx_DisablePLLSAI+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20016d4e:	2303      	movs	r3, #3
20016d50:	e007      	b.n	20016d62 <HAL_RCCEx_DisablePLLSAI+0x36>
  while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
20016d52:	4b07      	ldr	r3, [pc, #28]	; (20016d70 <HAL_RCCEx_DisablePLLSAI+0x44>)
20016d54:	681b      	ldr	r3, [r3, #0]
20016d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
20016d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
20016d5e:	d0ef      	beq.n	20016d40 <HAL_RCCEx_DisablePLLSAI+0x14>
    }
  }

  return HAL_OK;
20016d60:	2300      	movs	r3, #0
}
20016d62:	4618      	mov	r0, r3
20016d64:	3708      	adds	r7, #8
20016d66:	46bd      	mov	sp, r7
20016d68:	bd80      	pop	{r7, pc}
20016d6a:	bf00      	nop
20016d6c:	42470070 	.word	0x42470070
20016d70:	40023800 	.word	0x40023800

20016d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
20016d74:	b5f0      	push	{r4, r5, r6, r7, lr}
20016d76:	b087      	sub	sp, #28
20016d78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
20016d7a:	2300      	movs	r3, #0
20016d7c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
20016d7e:	2300      	movs	r3, #0
20016d80:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
20016d82:	2300      	movs	r3, #0
20016d84:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
20016d86:	2300      	movs	r3, #0
20016d88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
20016d8a:	2300      	movs	r3, #0
20016d8c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20016d8e:	4bc6      	ldr	r3, [pc, #792]	; (200170a8 <HAL_RCC_GetSysClockFreq+0x334>)
20016d90:	689b      	ldr	r3, [r3, #8]
20016d92:	f003 030c 	and.w	r3, r3, #12
20016d96:	2b0c      	cmp	r3, #12
20016d98:	f200 817e 	bhi.w	20017098 <HAL_RCC_GetSysClockFreq+0x324>
20016d9c:	a201      	add	r2, pc, #4	; (adr r2, 20016da4 <HAL_RCC_GetSysClockFreq+0x30>)
20016d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20016da2:	bf00      	nop
20016da4:	20016dd9 	.word	0x20016dd9
20016da8:	20017099 	.word	0x20017099
20016dac:	20017099 	.word	0x20017099
20016db0:	20017099 	.word	0x20017099
20016db4:	20016ddf 	.word	0x20016ddf
20016db8:	20017099 	.word	0x20017099
20016dbc:	20017099 	.word	0x20017099
20016dc0:	20017099 	.word	0x20017099
20016dc4:	20016de5 	.word	0x20016de5
20016dc8:	20017099 	.word	0x20017099
20016dcc:	20017099 	.word	0x20017099
20016dd0:	20017099 	.word	0x20017099
20016dd4:	20016f41 	.word	0x20016f41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20016dd8:	4bb4      	ldr	r3, [pc, #720]	; (200170ac <HAL_RCC_GetSysClockFreq+0x338>)
20016dda:	613b      	str	r3, [r7, #16]
       break;
20016ddc:	e15f      	b.n	2001709e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20016dde:	4bb4      	ldr	r3, [pc, #720]	; (200170b0 <HAL_RCC_GetSysClockFreq+0x33c>)
20016de0:	613b      	str	r3, [r7, #16]
      break;
20016de2:	e15c      	b.n	2001709e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20016de4:	4bb0      	ldr	r3, [pc, #704]	; (200170a8 <HAL_RCC_GetSysClockFreq+0x334>)
20016de6:	685b      	ldr	r3, [r3, #4]
20016de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20016dec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20016dee:	4bae      	ldr	r3, [pc, #696]	; (200170a8 <HAL_RCC_GetSysClockFreq+0x334>)
20016df0:	685b      	ldr	r3, [r3, #4]
20016df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20016df6:	2b00      	cmp	r3, #0
20016df8:	d04a      	beq.n	20016e90 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20016dfa:	4bab      	ldr	r3, [pc, #684]	; (200170a8 <HAL_RCC_GetSysClockFreq+0x334>)
20016dfc:	685b      	ldr	r3, [r3, #4]
20016dfe:	099b      	lsrs	r3, r3, #6
20016e00:	f04f 0400 	mov.w	r4, #0
20016e04:	f240 11ff 	movw	r1, #511	; 0x1ff
20016e08:	f04f 0200 	mov.w	r2, #0
20016e0c:	ea03 0501 	and.w	r5, r3, r1
20016e10:	ea04 0602 	and.w	r6, r4, r2
20016e14:	4629      	mov	r1, r5
20016e16:	4632      	mov	r2, r6
20016e18:	f04f 0300 	mov.w	r3, #0
20016e1c:	f04f 0400 	mov.w	r4, #0
20016e20:	0154      	lsls	r4, r2, #5
20016e22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
20016e26:	014b      	lsls	r3, r1, #5
20016e28:	4619      	mov	r1, r3
20016e2a:	4622      	mov	r2, r4
20016e2c:	1b49      	subs	r1, r1, r5
20016e2e:	eb62 0206 	sbc.w	r2, r2, r6
20016e32:	f04f 0300 	mov.w	r3, #0
20016e36:	f04f 0400 	mov.w	r4, #0
20016e3a:	0194      	lsls	r4, r2, #6
20016e3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
20016e40:	018b      	lsls	r3, r1, #6
20016e42:	1a5b      	subs	r3, r3, r1
20016e44:	eb64 0402 	sbc.w	r4, r4, r2
20016e48:	f04f 0100 	mov.w	r1, #0
20016e4c:	f04f 0200 	mov.w	r2, #0
20016e50:	00e2      	lsls	r2, r4, #3
20016e52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
20016e56:	00d9      	lsls	r1, r3, #3
20016e58:	460b      	mov	r3, r1
20016e5a:	4614      	mov	r4, r2
20016e5c:	195b      	adds	r3, r3, r5
20016e5e:	eb44 0406 	adc.w	r4, r4, r6
20016e62:	f04f 0100 	mov.w	r1, #0
20016e66:	f04f 0200 	mov.w	r2, #0
20016e6a:	0262      	lsls	r2, r4, #9
20016e6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
20016e70:	0259      	lsls	r1, r3, #9
20016e72:	460b      	mov	r3, r1
20016e74:	4614      	mov	r4, r2
20016e76:	4618      	mov	r0, r3
20016e78:	4621      	mov	r1, r4
20016e7a:	68fb      	ldr	r3, [r7, #12]
20016e7c:	f04f 0400 	mov.w	r4, #0
20016e80:	461a      	mov	r2, r3
20016e82:	4623      	mov	r3, r4
20016e84:	f7f8 fc18 	bl	2000f6b8 <__aeabi_uldivmod>
20016e88:	4603      	mov	r3, r0
20016e8a:	460c      	mov	r4, r1
20016e8c:	617b      	str	r3, [r7, #20]
20016e8e:	e049      	b.n	20016f24 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20016e90:	4b85      	ldr	r3, [pc, #532]	; (200170a8 <HAL_RCC_GetSysClockFreq+0x334>)
20016e92:	685b      	ldr	r3, [r3, #4]
20016e94:	099b      	lsrs	r3, r3, #6
20016e96:	f04f 0400 	mov.w	r4, #0
20016e9a:	f240 11ff 	movw	r1, #511	; 0x1ff
20016e9e:	f04f 0200 	mov.w	r2, #0
20016ea2:	ea03 0501 	and.w	r5, r3, r1
20016ea6:	ea04 0602 	and.w	r6, r4, r2
20016eaa:	4629      	mov	r1, r5
20016eac:	4632      	mov	r2, r6
20016eae:	f04f 0300 	mov.w	r3, #0
20016eb2:	f04f 0400 	mov.w	r4, #0
20016eb6:	0154      	lsls	r4, r2, #5
20016eb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
20016ebc:	014b      	lsls	r3, r1, #5
20016ebe:	4619      	mov	r1, r3
20016ec0:	4622      	mov	r2, r4
20016ec2:	1b49      	subs	r1, r1, r5
20016ec4:	eb62 0206 	sbc.w	r2, r2, r6
20016ec8:	f04f 0300 	mov.w	r3, #0
20016ecc:	f04f 0400 	mov.w	r4, #0
20016ed0:	0194      	lsls	r4, r2, #6
20016ed2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
20016ed6:	018b      	lsls	r3, r1, #6
20016ed8:	1a5b      	subs	r3, r3, r1
20016eda:	eb64 0402 	sbc.w	r4, r4, r2
20016ede:	f04f 0100 	mov.w	r1, #0
20016ee2:	f04f 0200 	mov.w	r2, #0
20016ee6:	00e2      	lsls	r2, r4, #3
20016ee8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
20016eec:	00d9      	lsls	r1, r3, #3
20016eee:	460b      	mov	r3, r1
20016ef0:	4614      	mov	r4, r2
20016ef2:	195b      	adds	r3, r3, r5
20016ef4:	eb44 0406 	adc.w	r4, r4, r6
20016ef8:	f04f 0100 	mov.w	r1, #0
20016efc:	f04f 0200 	mov.w	r2, #0
20016f00:	02a2      	lsls	r2, r4, #10
20016f02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
20016f06:	0299      	lsls	r1, r3, #10
20016f08:	460b      	mov	r3, r1
20016f0a:	4614      	mov	r4, r2
20016f0c:	4618      	mov	r0, r3
20016f0e:	4621      	mov	r1, r4
20016f10:	68fb      	ldr	r3, [r7, #12]
20016f12:	f04f 0400 	mov.w	r4, #0
20016f16:	461a      	mov	r2, r3
20016f18:	4623      	mov	r3, r4
20016f1a:	f7f8 fbcd 	bl	2000f6b8 <__aeabi_uldivmod>
20016f1e:	4603      	mov	r3, r0
20016f20:	460c      	mov	r4, r1
20016f22:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20016f24:	4b60      	ldr	r3, [pc, #384]	; (200170a8 <HAL_RCC_GetSysClockFreq+0x334>)
20016f26:	685b      	ldr	r3, [r3, #4]
20016f28:	0c1b      	lsrs	r3, r3, #16
20016f2a:	f003 0303 	and.w	r3, r3, #3
20016f2e:	3301      	adds	r3, #1
20016f30:	005b      	lsls	r3, r3, #1
20016f32:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
20016f34:	697a      	ldr	r2, [r7, #20]
20016f36:	68bb      	ldr	r3, [r7, #8]
20016f38:	fbb2 f3f3 	udiv	r3, r2, r3
20016f3c:	613b      	str	r3, [r7, #16]
      break;
20016f3e:	e0ae      	b.n	2001709e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20016f40:	4b59      	ldr	r3, [pc, #356]	; (200170a8 <HAL_RCC_GetSysClockFreq+0x334>)
20016f42:	685b      	ldr	r3, [r3, #4]
20016f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20016f48:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20016f4a:	4b57      	ldr	r3, [pc, #348]	; (200170a8 <HAL_RCC_GetSysClockFreq+0x334>)
20016f4c:	685b      	ldr	r3, [r3, #4]
20016f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20016f52:	2b00      	cmp	r3, #0
20016f54:	d04a      	beq.n	20016fec <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20016f56:	4b54      	ldr	r3, [pc, #336]	; (200170a8 <HAL_RCC_GetSysClockFreq+0x334>)
20016f58:	685b      	ldr	r3, [r3, #4]
20016f5a:	099b      	lsrs	r3, r3, #6
20016f5c:	f04f 0400 	mov.w	r4, #0
20016f60:	f240 11ff 	movw	r1, #511	; 0x1ff
20016f64:	f04f 0200 	mov.w	r2, #0
20016f68:	ea03 0501 	and.w	r5, r3, r1
20016f6c:	ea04 0602 	and.w	r6, r4, r2
20016f70:	4629      	mov	r1, r5
20016f72:	4632      	mov	r2, r6
20016f74:	f04f 0300 	mov.w	r3, #0
20016f78:	f04f 0400 	mov.w	r4, #0
20016f7c:	0154      	lsls	r4, r2, #5
20016f7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
20016f82:	014b      	lsls	r3, r1, #5
20016f84:	4619      	mov	r1, r3
20016f86:	4622      	mov	r2, r4
20016f88:	1b49      	subs	r1, r1, r5
20016f8a:	eb62 0206 	sbc.w	r2, r2, r6
20016f8e:	f04f 0300 	mov.w	r3, #0
20016f92:	f04f 0400 	mov.w	r4, #0
20016f96:	0194      	lsls	r4, r2, #6
20016f98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
20016f9c:	018b      	lsls	r3, r1, #6
20016f9e:	1a5b      	subs	r3, r3, r1
20016fa0:	eb64 0402 	sbc.w	r4, r4, r2
20016fa4:	f04f 0100 	mov.w	r1, #0
20016fa8:	f04f 0200 	mov.w	r2, #0
20016fac:	00e2      	lsls	r2, r4, #3
20016fae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
20016fb2:	00d9      	lsls	r1, r3, #3
20016fb4:	460b      	mov	r3, r1
20016fb6:	4614      	mov	r4, r2
20016fb8:	195b      	adds	r3, r3, r5
20016fba:	eb44 0406 	adc.w	r4, r4, r6
20016fbe:	f04f 0100 	mov.w	r1, #0
20016fc2:	f04f 0200 	mov.w	r2, #0
20016fc6:	0262      	lsls	r2, r4, #9
20016fc8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
20016fcc:	0259      	lsls	r1, r3, #9
20016fce:	460b      	mov	r3, r1
20016fd0:	4614      	mov	r4, r2
20016fd2:	4618      	mov	r0, r3
20016fd4:	4621      	mov	r1, r4
20016fd6:	68fb      	ldr	r3, [r7, #12]
20016fd8:	f04f 0400 	mov.w	r4, #0
20016fdc:	461a      	mov	r2, r3
20016fde:	4623      	mov	r3, r4
20016fe0:	f7f8 fb6a 	bl	2000f6b8 <__aeabi_uldivmod>
20016fe4:	4603      	mov	r3, r0
20016fe6:	460c      	mov	r4, r1
20016fe8:	617b      	str	r3, [r7, #20]
20016fea:	e049      	b.n	20017080 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20016fec:	4b2e      	ldr	r3, [pc, #184]	; (200170a8 <HAL_RCC_GetSysClockFreq+0x334>)
20016fee:	685b      	ldr	r3, [r3, #4]
20016ff0:	099b      	lsrs	r3, r3, #6
20016ff2:	f04f 0400 	mov.w	r4, #0
20016ff6:	f240 11ff 	movw	r1, #511	; 0x1ff
20016ffa:	f04f 0200 	mov.w	r2, #0
20016ffe:	ea03 0501 	and.w	r5, r3, r1
20017002:	ea04 0602 	and.w	r6, r4, r2
20017006:	4629      	mov	r1, r5
20017008:	4632      	mov	r2, r6
2001700a:	f04f 0300 	mov.w	r3, #0
2001700e:	f04f 0400 	mov.w	r4, #0
20017012:	0154      	lsls	r4, r2, #5
20017014:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
20017018:	014b      	lsls	r3, r1, #5
2001701a:	4619      	mov	r1, r3
2001701c:	4622      	mov	r2, r4
2001701e:	1b49      	subs	r1, r1, r5
20017020:	eb62 0206 	sbc.w	r2, r2, r6
20017024:	f04f 0300 	mov.w	r3, #0
20017028:	f04f 0400 	mov.w	r4, #0
2001702c:	0194      	lsls	r4, r2, #6
2001702e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
20017032:	018b      	lsls	r3, r1, #6
20017034:	1a5b      	subs	r3, r3, r1
20017036:	eb64 0402 	sbc.w	r4, r4, r2
2001703a:	f04f 0100 	mov.w	r1, #0
2001703e:	f04f 0200 	mov.w	r2, #0
20017042:	00e2      	lsls	r2, r4, #3
20017044:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
20017048:	00d9      	lsls	r1, r3, #3
2001704a:	460b      	mov	r3, r1
2001704c:	4614      	mov	r4, r2
2001704e:	195b      	adds	r3, r3, r5
20017050:	eb44 0406 	adc.w	r4, r4, r6
20017054:	f04f 0100 	mov.w	r1, #0
20017058:	f04f 0200 	mov.w	r2, #0
2001705c:	02a2      	lsls	r2, r4, #10
2001705e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
20017062:	0299      	lsls	r1, r3, #10
20017064:	460b      	mov	r3, r1
20017066:	4614      	mov	r4, r2
20017068:	4618      	mov	r0, r3
2001706a:	4621      	mov	r1, r4
2001706c:	68fb      	ldr	r3, [r7, #12]
2001706e:	f04f 0400 	mov.w	r4, #0
20017072:	461a      	mov	r2, r3
20017074:	4623      	mov	r3, r4
20017076:	f7f8 fb1f 	bl	2000f6b8 <__aeabi_uldivmod>
2001707a:	4603      	mov	r3, r0
2001707c:	460c      	mov	r4, r1
2001707e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
20017080:	4b09      	ldr	r3, [pc, #36]	; (200170a8 <HAL_RCC_GetSysClockFreq+0x334>)
20017082:	685b      	ldr	r3, [r3, #4]
20017084:	0f1b      	lsrs	r3, r3, #28
20017086:	f003 0307 	and.w	r3, r3, #7
2001708a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
2001708c:	697a      	ldr	r2, [r7, #20]
2001708e:	687b      	ldr	r3, [r7, #4]
20017090:	fbb2 f3f3 	udiv	r3, r2, r3
20017094:	613b      	str	r3, [r7, #16]
      break;
20017096:	e002      	b.n	2001709e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20017098:	4b04      	ldr	r3, [pc, #16]	; (200170ac <HAL_RCC_GetSysClockFreq+0x338>)
2001709a:	613b      	str	r3, [r7, #16]
      break;
2001709c:	bf00      	nop
    }
  }
  return sysclockfreq;
2001709e:	693b      	ldr	r3, [r7, #16]
}
200170a0:	4618      	mov	r0, r3
200170a2:	371c      	adds	r7, #28
200170a4:	46bd      	mov	sp, r7
200170a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
200170a8:	40023800 	.word	0x40023800
200170ac:	00f42400 	.word	0x00f42400
200170b0:	007a1200 	.word	0x007a1200

200170b4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
200170b4:	b580      	push	{r7, lr}
200170b6:	b082      	sub	sp, #8
200170b8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
200170ba:	f7f9 fd73 	bl	20010ba4 <HAL_GetTick>
200170be:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
200170c0:	4b72      	ldr	r3, [pc, #456]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
200170c2:	681b      	ldr	r3, [r3, #0]
200170c4:	4a71      	ldr	r2, [pc, #452]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
200170c6:	f043 0301 	orr.w	r3, r3, #1
200170ca:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
200170cc:	e008      	b.n	200170e0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
200170ce:	f7f9 fd69 	bl	20010ba4 <HAL_GetTick>
200170d2:	4602      	mov	r2, r0
200170d4:	687b      	ldr	r3, [r7, #4]
200170d6:	1ad3      	subs	r3, r2, r3
200170d8:	2b02      	cmp	r3, #2
200170da:	d901      	bls.n	200170e0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
200170dc:	2303      	movs	r3, #3
200170de:	e0d0      	b.n	20017282 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
200170e0:	4b6a      	ldr	r3, [pc, #424]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
200170e2:	681b      	ldr	r3, [r3, #0]
200170e4:	f003 0302 	and.w	r3, r3, #2
200170e8:	2b00      	cmp	r3, #0
200170ea:	d0f0      	beq.n	200170ce <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
200170ec:	4b67      	ldr	r3, [pc, #412]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
200170ee:	681b      	ldr	r3, [r3, #0]
200170f0:	4a66      	ldr	r2, [pc, #408]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
200170f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
200170f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
200170f8:	f7f9 fd54 	bl	20010ba4 <HAL_GetTick>
200170fc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
200170fe:	4b63      	ldr	r3, [pc, #396]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017100:	2200      	movs	r2, #0
20017102:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
20017104:	e00a      	b.n	2001711c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20017106:	f7f9 fd4d 	bl	20010ba4 <HAL_GetTick>
2001710a:	4602      	mov	r2, r0
2001710c:	687b      	ldr	r3, [r7, #4]
2001710e:	1ad3      	subs	r3, r2, r3
20017110:	f241 3288 	movw	r2, #5000	; 0x1388
20017114:	4293      	cmp	r3, r2
20017116:	d901      	bls.n	2001711c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
20017118:	2303      	movs	r3, #3
2001711a:	e0b2      	b.n	20017282 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
2001711c:	4b5b      	ldr	r3, [pc, #364]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
2001711e:	689b      	ldr	r3, [r3, #8]
20017120:	f003 030c 	and.w	r3, r3, #12
20017124:	2b00      	cmp	r3, #0
20017126:	d1ee      	bne.n	20017106 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20017128:	f7f9 fd3c 	bl	20010ba4 <HAL_GetTick>
2001712c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
2001712e:	4b57      	ldr	r3, [pc, #348]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017130:	681b      	ldr	r3, [r3, #0]
20017132:	4a56      	ldr	r2, [pc, #344]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017134:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
20017138:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
2001713a:	e008      	b.n	2001714e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2001713c:	f7f9 fd32 	bl	20010ba4 <HAL_GetTick>
20017140:	4602      	mov	r2, r0
20017142:	687b      	ldr	r3, [r7, #4]
20017144:	1ad3      	subs	r3, r2, r3
20017146:	2b64      	cmp	r3, #100	; 0x64
20017148:	d901      	bls.n	2001714e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
2001714a:	2303      	movs	r3, #3
2001714c:	e099      	b.n	20017282 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
2001714e:	4b4f      	ldr	r3, [pc, #316]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017150:	681b      	ldr	r3, [r3, #0]
20017152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20017156:	2b00      	cmp	r3, #0
20017158:	d1f0      	bne.n	2001713c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2001715a:	f7f9 fd23 	bl	20010ba4 <HAL_GetTick>
2001715e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
20017160:	4b4a      	ldr	r3, [pc, #296]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017162:	681b      	ldr	r3, [r3, #0]
20017164:	4a49      	ldr	r2, [pc, #292]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2001716a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
2001716c:	e008      	b.n	20017180 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2001716e:	f7f9 fd19 	bl	20010ba4 <HAL_GetTick>
20017172:	4602      	mov	r2, r0
20017174:	687b      	ldr	r3, [r7, #4]
20017176:	1ad3      	subs	r3, r2, r3
20017178:	2b02      	cmp	r3, #2
2001717a:	d901      	bls.n	20017180 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
2001717c:	2303      	movs	r3, #3
2001717e:	e080      	b.n	20017282 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
20017180:	4b42      	ldr	r3, [pc, #264]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017182:	681b      	ldr	r3, [r3, #0]
20017184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20017188:	2b00      	cmp	r3, #0
2001718a:	d1f0      	bne.n	2001716e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
2001718c:	f7f9 fd0a 	bl	20010ba4 <HAL_GetTick>
20017190:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
20017192:	4b3e      	ldr	r3, [pc, #248]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017194:	681b      	ldr	r3, [r3, #0]
20017196:	4a3d      	ldr	r2, [pc, #244]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017198:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2001719c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2001719e:	e008      	b.n	200171b2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
200171a0:	f7f9 fd00 	bl	20010ba4 <HAL_GetTick>
200171a4:	4602      	mov	r2, r0
200171a6:	687b      	ldr	r3, [r7, #4]
200171a8:	1ad3      	subs	r3, r2, r3
200171aa:	2b02      	cmp	r3, #2
200171ac:	d901      	bls.n	200171b2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
200171ae:	2303      	movs	r3, #3
200171b0:	e067      	b.n	20017282 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
200171b2:	4b36      	ldr	r3, [pc, #216]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
200171b4:	681b      	ldr	r3, [r3, #0]
200171b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
200171ba:	2b00      	cmp	r3, #0
200171bc:	d1f0      	bne.n	200171a0 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
200171be:	f7f9 fcf1 	bl	20010ba4 <HAL_GetTick>
200171c2:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
200171c4:	4b31      	ldr	r3, [pc, #196]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
200171c6:	681b      	ldr	r3, [r3, #0]
200171c8:	4a30      	ldr	r2, [pc, #192]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
200171ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
200171ce:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
200171d0:	e008      	b.n	200171e4 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
200171d2:	f7f9 fce7 	bl	20010ba4 <HAL_GetTick>
200171d6:	4602      	mov	r2, r0
200171d8:	687b      	ldr	r3, [r7, #4]
200171da:	1ad3      	subs	r3, r2, r3
200171dc:	2b02      	cmp	r3, #2
200171de:	d901      	bls.n	200171e4 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
200171e0:	2303      	movs	r3, #3
200171e2:	e04e      	b.n	20017282 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
200171e4:	4b29      	ldr	r3, [pc, #164]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
200171e6:	681b      	ldr	r3, [r3, #0]
200171e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
200171ec:	2b00      	cmp	r3, #0
200171ee:	d1f0      	bne.n	200171d2 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
200171f0:	4b26      	ldr	r3, [pc, #152]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
200171f2:	4a27      	ldr	r2, [pc, #156]	; (20017290 <HAL_RCC_DeInit+0x1dc>)
200171f4:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
200171f6:	4b25      	ldr	r3, [pc, #148]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
200171f8:	4a25      	ldr	r2, [pc, #148]	; (20017290 <HAL_RCC_DeInit+0x1dc>)
200171fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
200171fe:	4b23      	ldr	r3, [pc, #140]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017200:	4a24      	ldr	r2, [pc, #144]	; (20017294 <HAL_RCC_DeInit+0x1e0>)
20017202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
20017206:	4b21      	ldr	r3, [pc, #132]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017208:	68db      	ldr	r3, [r3, #12]
2001720a:	4a20      	ldr	r2, [pc, #128]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
2001720c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
20017210:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
20017212:	4b1e      	ldr	r3, [pc, #120]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017214:	68db      	ldr	r3, [r3, #12]
20017216:	4a1d      	ldr	r2, [pc, #116]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
2001721c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
2001721e:	4b1b      	ldr	r3, [pc, #108]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017220:	68db      	ldr	r3, [r3, #12]
20017222:	4a1a      	ldr	r2, [pc, #104]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
20017228:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
2001722a:	4b18      	ldr	r3, [pc, #96]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
2001722c:	68db      	ldr	r3, [r3, #12]
2001722e:	4a17      	ldr	r2, [pc, #92]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017230:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
20017234:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
20017236:	4b15      	ldr	r3, [pc, #84]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017238:	68db      	ldr	r3, [r3, #12]
2001723a:	4a14      	ldr	r2, [pc, #80]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
2001723c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
20017240:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
20017242:	4b12      	ldr	r3, [pc, #72]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017244:	68db      	ldr	r3, [r3, #12]
20017246:	4a11      	ldr	r2, [pc, #68]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017248:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2001724c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
2001724e:	4b0f      	ldr	r3, [pc, #60]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20017252:	4a0e      	ldr	r2, [pc, #56]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017254:	f023 0301 	bic.w	r3, r3, #1
20017258:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
2001725a:	4b0c      	ldr	r3, [pc, #48]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
2001725c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2001725e:	4a0b      	ldr	r2, [pc, #44]	; (2001728c <HAL_RCC_DeInit+0x1d8>)
20017260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20017264:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
20017266:	4b0c      	ldr	r3, [pc, #48]	; (20017298 <HAL_RCC_DeInit+0x1e4>)
20017268:	4a0c      	ldr	r2, [pc, #48]	; (2001729c <HAL_RCC_DeInit+0x1e8>)
2001726a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
2001726c:	4b0c      	ldr	r3, [pc, #48]	; (200172a0 <HAL_RCC_DeInit+0x1ec>)
2001726e:	681b      	ldr	r3, [r3, #0]
20017270:	4618      	mov	r0, r3
20017272:	f7f9 fc53 	bl	20010b1c <HAL_InitTick>
20017276:	4603      	mov	r3, r0
20017278:	2b00      	cmp	r3, #0
2001727a:	d001      	beq.n	20017280 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
2001727c:	2301      	movs	r3, #1
2001727e:	e000      	b.n	20017282 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
20017280:	2300      	movs	r3, #0
  }
}
20017282:	4618      	mov	r0, r3
20017284:	3708      	adds	r7, #8
20017286:	46bd      	mov	sp, r7
20017288:	bd80      	pop	{r7, pc}
2001728a:	bf00      	nop
2001728c:	40023800 	.word	0x40023800
20017290:	24003010 	.word	0x24003010
20017294:	04003010 	.word	0x04003010
20017298:	2000e4dc 	.word	0x2000e4dc
2001729c:	00f42400 	.word	0x00f42400
200172a0:	2000e4e0 	.word	0x2000e4e0

200172a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
200172a4:	b580      	push	{r7, lr}
200172a6:	b086      	sub	sp, #24
200172a8:	af00      	add	r7, sp, #0
200172aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
200172ac:	2300      	movs	r3, #0
200172ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
200172b0:	687b      	ldr	r3, [r7, #4]
200172b2:	681b      	ldr	r3, [r3, #0]
200172b4:	f003 0301 	and.w	r3, r3, #1
200172b8:	2b00      	cmp	r3, #0
200172ba:	f000 8083 	beq.w	200173c4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
200172be:	4b95      	ldr	r3, [pc, #596]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200172c0:	689b      	ldr	r3, [r3, #8]
200172c2:	f003 030c 	and.w	r3, r3, #12
200172c6:	2b04      	cmp	r3, #4
200172c8:	d019      	beq.n	200172fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
200172ca:	4b92      	ldr	r3, [pc, #584]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200172cc:	689b      	ldr	r3, [r3, #8]
200172ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
200172d2:	2b08      	cmp	r3, #8
200172d4:	d106      	bne.n	200172e4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
200172d6:	4b8f      	ldr	r3, [pc, #572]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200172d8:	685b      	ldr	r3, [r3, #4]
200172da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200172de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
200172e2:	d00c      	beq.n	200172fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200172e4:	4b8b      	ldr	r3, [pc, #556]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200172e6:	689b      	ldr	r3, [r3, #8]
200172e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
200172ec:	2b0c      	cmp	r3, #12
200172ee:	d112      	bne.n	20017316 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200172f0:	4b88      	ldr	r3, [pc, #544]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200172f2:	685b      	ldr	r3, [r3, #4]
200172f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200172f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
200172fc:	d10b      	bne.n	20017316 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200172fe:	4b85      	ldr	r3, [pc, #532]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017300:	681b      	ldr	r3, [r3, #0]
20017302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20017306:	2b00      	cmp	r3, #0
20017308:	d05b      	beq.n	200173c2 <HAL_RCC_OscConfig+0x11e>
2001730a:	687b      	ldr	r3, [r7, #4]
2001730c:	685b      	ldr	r3, [r3, #4]
2001730e:	2b00      	cmp	r3, #0
20017310:	d157      	bne.n	200173c2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
20017312:	2301      	movs	r3, #1
20017314:	e216      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20017316:	687b      	ldr	r3, [r7, #4]
20017318:	685b      	ldr	r3, [r3, #4]
2001731a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2001731e:	d106      	bne.n	2001732e <HAL_RCC_OscConfig+0x8a>
20017320:	4b7c      	ldr	r3, [pc, #496]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017322:	681b      	ldr	r3, [r3, #0]
20017324:	4a7b      	ldr	r2, [pc, #492]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2001732a:	6013      	str	r3, [r2, #0]
2001732c:	e01d      	b.n	2001736a <HAL_RCC_OscConfig+0xc6>
2001732e:	687b      	ldr	r3, [r7, #4]
20017330:	685b      	ldr	r3, [r3, #4]
20017332:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20017336:	d10c      	bne.n	20017352 <HAL_RCC_OscConfig+0xae>
20017338:	4b76      	ldr	r3, [pc, #472]	; (20017514 <HAL_RCC_OscConfig+0x270>)
2001733a:	681b      	ldr	r3, [r3, #0]
2001733c:	4a75      	ldr	r2, [pc, #468]	; (20017514 <HAL_RCC_OscConfig+0x270>)
2001733e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20017342:	6013      	str	r3, [r2, #0]
20017344:	4b73      	ldr	r3, [pc, #460]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017346:	681b      	ldr	r3, [r3, #0]
20017348:	4a72      	ldr	r2, [pc, #456]	; (20017514 <HAL_RCC_OscConfig+0x270>)
2001734a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2001734e:	6013      	str	r3, [r2, #0]
20017350:	e00b      	b.n	2001736a <HAL_RCC_OscConfig+0xc6>
20017352:	4b70      	ldr	r3, [pc, #448]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017354:	681b      	ldr	r3, [r3, #0]
20017356:	4a6f      	ldr	r2, [pc, #444]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2001735c:	6013      	str	r3, [r2, #0]
2001735e:	4b6d      	ldr	r3, [pc, #436]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017360:	681b      	ldr	r3, [r3, #0]
20017362:	4a6c      	ldr	r2, [pc, #432]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
20017368:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
2001736a:	687b      	ldr	r3, [r7, #4]
2001736c:	685b      	ldr	r3, [r3, #4]
2001736e:	2b00      	cmp	r3, #0
20017370:	d013      	beq.n	2001739a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20017372:	f7f9 fc17 	bl	20010ba4 <HAL_GetTick>
20017376:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20017378:	e008      	b.n	2001738c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2001737a:	f7f9 fc13 	bl	20010ba4 <HAL_GetTick>
2001737e:	4602      	mov	r2, r0
20017380:	693b      	ldr	r3, [r7, #16]
20017382:	1ad3      	subs	r3, r2, r3
20017384:	2b64      	cmp	r3, #100	; 0x64
20017386:	d901      	bls.n	2001738c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
20017388:	2303      	movs	r3, #3
2001738a:	e1db      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2001738c:	4b61      	ldr	r3, [pc, #388]	; (20017514 <HAL_RCC_OscConfig+0x270>)
2001738e:	681b      	ldr	r3, [r3, #0]
20017390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20017394:	2b00      	cmp	r3, #0
20017396:	d0f0      	beq.n	2001737a <HAL_RCC_OscConfig+0xd6>
20017398:	e014      	b.n	200173c4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2001739a:	f7f9 fc03 	bl	20010ba4 <HAL_GetTick>
2001739e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200173a0:	e008      	b.n	200173b4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
200173a2:	f7f9 fbff 	bl	20010ba4 <HAL_GetTick>
200173a6:	4602      	mov	r2, r0
200173a8:	693b      	ldr	r3, [r7, #16]
200173aa:	1ad3      	subs	r3, r2, r3
200173ac:	2b64      	cmp	r3, #100	; 0x64
200173ae:	d901      	bls.n	200173b4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
200173b0:	2303      	movs	r3, #3
200173b2:	e1c7      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
200173b4:	4b57      	ldr	r3, [pc, #348]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200173b6:	681b      	ldr	r3, [r3, #0]
200173b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200173bc:	2b00      	cmp	r3, #0
200173be:	d1f0      	bne.n	200173a2 <HAL_RCC_OscConfig+0xfe>
200173c0:	e000      	b.n	200173c4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200173c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
200173c4:	687b      	ldr	r3, [r7, #4]
200173c6:	681b      	ldr	r3, [r3, #0]
200173c8:	f003 0302 	and.w	r3, r3, #2
200173cc:	2b00      	cmp	r3, #0
200173ce:	d06f      	beq.n	200174b0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
200173d0:	4b50      	ldr	r3, [pc, #320]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200173d2:	689b      	ldr	r3, [r3, #8]
200173d4:	f003 030c 	and.w	r3, r3, #12
200173d8:	2b00      	cmp	r3, #0
200173da:	d017      	beq.n	2001740c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
200173dc:	4b4d      	ldr	r3, [pc, #308]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200173de:	689b      	ldr	r3, [r3, #8]
200173e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
200173e4:	2b08      	cmp	r3, #8
200173e6:	d105      	bne.n	200173f4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
200173e8:	4b4a      	ldr	r3, [pc, #296]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200173ea:	685b      	ldr	r3, [r3, #4]
200173ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200173f0:	2b00      	cmp	r3, #0
200173f2:	d00b      	beq.n	2001740c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200173f4:	4b47      	ldr	r3, [pc, #284]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200173f6:	689b      	ldr	r3, [r3, #8]
200173f8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
200173fc:	2b0c      	cmp	r3, #12
200173fe:	d11c      	bne.n	2001743a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20017400:	4b44      	ldr	r3, [pc, #272]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017402:	685b      	ldr	r3, [r3, #4]
20017404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20017408:	2b00      	cmp	r3, #0
2001740a:	d116      	bne.n	2001743a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2001740c:	4b41      	ldr	r3, [pc, #260]	; (20017514 <HAL_RCC_OscConfig+0x270>)
2001740e:	681b      	ldr	r3, [r3, #0]
20017410:	f003 0302 	and.w	r3, r3, #2
20017414:	2b00      	cmp	r3, #0
20017416:	d005      	beq.n	20017424 <HAL_RCC_OscConfig+0x180>
20017418:	687b      	ldr	r3, [r7, #4]
2001741a:	68db      	ldr	r3, [r3, #12]
2001741c:	2b01      	cmp	r3, #1
2001741e:	d001      	beq.n	20017424 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
20017420:	2301      	movs	r3, #1
20017422:	e18f      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20017424:	4b3b      	ldr	r3, [pc, #236]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017426:	681b      	ldr	r3, [r3, #0]
20017428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2001742c:	687b      	ldr	r3, [r7, #4]
2001742e:	691b      	ldr	r3, [r3, #16]
20017430:	00db      	lsls	r3, r3, #3
20017432:	4938      	ldr	r1, [pc, #224]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017434:	4313      	orrs	r3, r2
20017436:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20017438:	e03a      	b.n	200174b0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
2001743a:	687b      	ldr	r3, [r7, #4]
2001743c:	68db      	ldr	r3, [r3, #12]
2001743e:	2b00      	cmp	r3, #0
20017440:	d020      	beq.n	20017484 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20017442:	4b35      	ldr	r3, [pc, #212]	; (20017518 <HAL_RCC_OscConfig+0x274>)
20017444:	2201      	movs	r2, #1
20017446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20017448:	f7f9 fbac 	bl	20010ba4 <HAL_GetTick>
2001744c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2001744e:	e008      	b.n	20017462 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20017450:	f7f9 fba8 	bl	20010ba4 <HAL_GetTick>
20017454:	4602      	mov	r2, r0
20017456:	693b      	ldr	r3, [r7, #16]
20017458:	1ad3      	subs	r3, r2, r3
2001745a:	2b02      	cmp	r3, #2
2001745c:	d901      	bls.n	20017462 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
2001745e:	2303      	movs	r3, #3
20017460:	e170      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20017462:	4b2c      	ldr	r3, [pc, #176]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017464:	681b      	ldr	r3, [r3, #0]
20017466:	f003 0302 	and.w	r3, r3, #2
2001746a:	2b00      	cmp	r3, #0
2001746c:	d0f0      	beq.n	20017450 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2001746e:	4b29      	ldr	r3, [pc, #164]	; (20017514 <HAL_RCC_OscConfig+0x270>)
20017470:	681b      	ldr	r3, [r3, #0]
20017472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20017476:	687b      	ldr	r3, [r7, #4]
20017478:	691b      	ldr	r3, [r3, #16]
2001747a:	00db      	lsls	r3, r3, #3
2001747c:	4925      	ldr	r1, [pc, #148]	; (20017514 <HAL_RCC_OscConfig+0x270>)
2001747e:	4313      	orrs	r3, r2
20017480:	600b      	str	r3, [r1, #0]
20017482:	e015      	b.n	200174b0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20017484:	4b24      	ldr	r3, [pc, #144]	; (20017518 <HAL_RCC_OscConfig+0x274>)
20017486:	2200      	movs	r2, #0
20017488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2001748a:	f7f9 fb8b 	bl	20010ba4 <HAL_GetTick>
2001748e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20017490:	e008      	b.n	200174a4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20017492:	f7f9 fb87 	bl	20010ba4 <HAL_GetTick>
20017496:	4602      	mov	r2, r0
20017498:	693b      	ldr	r3, [r7, #16]
2001749a:	1ad3      	subs	r3, r2, r3
2001749c:	2b02      	cmp	r3, #2
2001749e:	d901      	bls.n	200174a4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
200174a0:	2303      	movs	r3, #3
200174a2:	e14f      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200174a4:	4b1b      	ldr	r3, [pc, #108]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200174a6:	681b      	ldr	r3, [r3, #0]
200174a8:	f003 0302 	and.w	r3, r3, #2
200174ac:	2b00      	cmp	r3, #0
200174ae:	d1f0      	bne.n	20017492 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
200174b0:	687b      	ldr	r3, [r7, #4]
200174b2:	681b      	ldr	r3, [r3, #0]
200174b4:	f003 0308 	and.w	r3, r3, #8
200174b8:	2b00      	cmp	r3, #0
200174ba:	d037      	beq.n	2001752c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
200174bc:	687b      	ldr	r3, [r7, #4]
200174be:	695b      	ldr	r3, [r3, #20]
200174c0:	2b00      	cmp	r3, #0
200174c2:	d016      	beq.n	200174f2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
200174c4:	4b15      	ldr	r3, [pc, #84]	; (2001751c <HAL_RCC_OscConfig+0x278>)
200174c6:	2201      	movs	r2, #1
200174c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200174ca:	f7f9 fb6b 	bl	20010ba4 <HAL_GetTick>
200174ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200174d0:	e008      	b.n	200174e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
200174d2:	f7f9 fb67 	bl	20010ba4 <HAL_GetTick>
200174d6:	4602      	mov	r2, r0
200174d8:	693b      	ldr	r3, [r7, #16]
200174da:	1ad3      	subs	r3, r2, r3
200174dc:	2b02      	cmp	r3, #2
200174de:	d901      	bls.n	200174e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
200174e0:	2303      	movs	r3, #3
200174e2:	e12f      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200174e4:	4b0b      	ldr	r3, [pc, #44]	; (20017514 <HAL_RCC_OscConfig+0x270>)
200174e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200174e8:	f003 0302 	and.w	r3, r3, #2
200174ec:	2b00      	cmp	r3, #0
200174ee:	d0f0      	beq.n	200174d2 <HAL_RCC_OscConfig+0x22e>
200174f0:	e01c      	b.n	2001752c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
200174f2:	4b0a      	ldr	r3, [pc, #40]	; (2001751c <HAL_RCC_OscConfig+0x278>)
200174f4:	2200      	movs	r2, #0
200174f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200174f8:	f7f9 fb54 	bl	20010ba4 <HAL_GetTick>
200174fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200174fe:	e00f      	b.n	20017520 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20017500:	f7f9 fb50 	bl	20010ba4 <HAL_GetTick>
20017504:	4602      	mov	r2, r0
20017506:	693b      	ldr	r3, [r7, #16]
20017508:	1ad3      	subs	r3, r2, r3
2001750a:	2b02      	cmp	r3, #2
2001750c:	d908      	bls.n	20017520 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
2001750e:	2303      	movs	r3, #3
20017510:	e118      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
20017512:	bf00      	nop
20017514:	40023800 	.word	0x40023800
20017518:	42470000 	.word	0x42470000
2001751c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20017520:	4b8a      	ldr	r3, [pc, #552]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
20017522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20017524:	f003 0302 	and.w	r3, r3, #2
20017528:	2b00      	cmp	r3, #0
2001752a:	d1e9      	bne.n	20017500 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2001752c:	687b      	ldr	r3, [r7, #4]
2001752e:	681b      	ldr	r3, [r3, #0]
20017530:	f003 0304 	and.w	r3, r3, #4
20017534:	2b00      	cmp	r3, #0
20017536:	f000 8097 	beq.w	20017668 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
2001753a:	2300      	movs	r3, #0
2001753c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2001753e:	4b83      	ldr	r3, [pc, #524]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
20017540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20017542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20017546:	2b00      	cmp	r3, #0
20017548:	d10f      	bne.n	2001756a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
2001754a:	2300      	movs	r3, #0
2001754c:	60fb      	str	r3, [r7, #12]
2001754e:	4b7f      	ldr	r3, [pc, #508]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
20017550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20017552:	4a7e      	ldr	r2, [pc, #504]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
20017554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20017558:	6413      	str	r3, [r2, #64]	; 0x40
2001755a:	4b7c      	ldr	r3, [pc, #496]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
2001755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2001755e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20017562:	60fb      	str	r3, [r7, #12]
20017564:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
20017566:	2301      	movs	r3, #1
20017568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2001756a:	4b79      	ldr	r3, [pc, #484]	; (20017750 <HAL_RCC_OscConfig+0x4ac>)
2001756c:	681b      	ldr	r3, [r3, #0]
2001756e:	f403 7380 	and.w	r3, r3, #256	; 0x100
20017572:	2b00      	cmp	r3, #0
20017574:	d118      	bne.n	200175a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
20017576:	4b76      	ldr	r3, [pc, #472]	; (20017750 <HAL_RCC_OscConfig+0x4ac>)
20017578:	681b      	ldr	r3, [r3, #0]
2001757a:	4a75      	ldr	r2, [pc, #468]	; (20017750 <HAL_RCC_OscConfig+0x4ac>)
2001757c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20017580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
20017582:	f7f9 fb0f 	bl	20010ba4 <HAL_GetTick>
20017586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20017588:	e008      	b.n	2001759c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2001758a:	f7f9 fb0b 	bl	20010ba4 <HAL_GetTick>
2001758e:	4602      	mov	r2, r0
20017590:	693b      	ldr	r3, [r7, #16]
20017592:	1ad3      	subs	r3, r2, r3
20017594:	2b02      	cmp	r3, #2
20017596:	d901      	bls.n	2001759c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
20017598:	2303      	movs	r3, #3
2001759a:	e0d3      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2001759c:	4b6c      	ldr	r3, [pc, #432]	; (20017750 <HAL_RCC_OscConfig+0x4ac>)
2001759e:	681b      	ldr	r3, [r3, #0]
200175a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
200175a4:	2b00      	cmp	r3, #0
200175a6:	d0f0      	beq.n	2001758a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
200175a8:	687b      	ldr	r3, [r7, #4]
200175aa:	689b      	ldr	r3, [r3, #8]
200175ac:	2b01      	cmp	r3, #1
200175ae:	d106      	bne.n	200175be <HAL_RCC_OscConfig+0x31a>
200175b0:	4b66      	ldr	r3, [pc, #408]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200175b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200175b4:	4a65      	ldr	r2, [pc, #404]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200175b6:	f043 0301 	orr.w	r3, r3, #1
200175ba:	6713      	str	r3, [r2, #112]	; 0x70
200175bc:	e01c      	b.n	200175f8 <HAL_RCC_OscConfig+0x354>
200175be:	687b      	ldr	r3, [r7, #4]
200175c0:	689b      	ldr	r3, [r3, #8]
200175c2:	2b05      	cmp	r3, #5
200175c4:	d10c      	bne.n	200175e0 <HAL_RCC_OscConfig+0x33c>
200175c6:	4b61      	ldr	r3, [pc, #388]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200175c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200175ca:	4a60      	ldr	r2, [pc, #384]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200175cc:	f043 0304 	orr.w	r3, r3, #4
200175d0:	6713      	str	r3, [r2, #112]	; 0x70
200175d2:	4b5e      	ldr	r3, [pc, #376]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200175d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200175d6:	4a5d      	ldr	r2, [pc, #372]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200175d8:	f043 0301 	orr.w	r3, r3, #1
200175dc:	6713      	str	r3, [r2, #112]	; 0x70
200175de:	e00b      	b.n	200175f8 <HAL_RCC_OscConfig+0x354>
200175e0:	4b5a      	ldr	r3, [pc, #360]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200175e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200175e4:	4a59      	ldr	r2, [pc, #356]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200175e6:	f023 0301 	bic.w	r3, r3, #1
200175ea:	6713      	str	r3, [r2, #112]	; 0x70
200175ec:	4b57      	ldr	r3, [pc, #348]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200175ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200175f0:	4a56      	ldr	r2, [pc, #344]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200175f2:	f023 0304 	bic.w	r3, r3, #4
200175f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
200175f8:	687b      	ldr	r3, [r7, #4]
200175fa:	689b      	ldr	r3, [r3, #8]
200175fc:	2b00      	cmp	r3, #0
200175fe:	d015      	beq.n	2001762c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20017600:	f7f9 fad0 	bl	20010ba4 <HAL_GetTick>
20017604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20017606:	e00a      	b.n	2001761e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20017608:	f7f9 facc 	bl	20010ba4 <HAL_GetTick>
2001760c:	4602      	mov	r2, r0
2001760e:	693b      	ldr	r3, [r7, #16]
20017610:	1ad3      	subs	r3, r2, r3
20017612:	f241 3288 	movw	r2, #5000	; 0x1388
20017616:	4293      	cmp	r3, r2
20017618:	d901      	bls.n	2001761e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
2001761a:	2303      	movs	r3, #3
2001761c:	e092      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2001761e:	4b4b      	ldr	r3, [pc, #300]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
20017620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20017622:	f003 0302 	and.w	r3, r3, #2
20017626:	2b00      	cmp	r3, #0
20017628:	d0ee      	beq.n	20017608 <HAL_RCC_OscConfig+0x364>
2001762a:	e014      	b.n	20017656 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2001762c:	f7f9 faba 	bl	20010ba4 <HAL_GetTick>
20017630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20017632:	e00a      	b.n	2001764a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20017634:	f7f9 fab6 	bl	20010ba4 <HAL_GetTick>
20017638:	4602      	mov	r2, r0
2001763a:	693b      	ldr	r3, [r7, #16]
2001763c:	1ad3      	subs	r3, r2, r3
2001763e:	f241 3288 	movw	r2, #5000	; 0x1388
20017642:	4293      	cmp	r3, r2
20017644:	d901      	bls.n	2001764a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
20017646:	2303      	movs	r3, #3
20017648:	e07c      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2001764a:	4b40      	ldr	r3, [pc, #256]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
2001764c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2001764e:	f003 0302 	and.w	r3, r3, #2
20017652:	2b00      	cmp	r3, #0
20017654:	d1ee      	bne.n	20017634 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
20017656:	7dfb      	ldrb	r3, [r7, #23]
20017658:	2b01      	cmp	r3, #1
2001765a:	d105      	bne.n	20017668 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2001765c:	4b3b      	ldr	r3, [pc, #236]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
2001765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20017660:	4a3a      	ldr	r2, [pc, #232]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
20017662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20017666:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20017668:	687b      	ldr	r3, [r7, #4]
2001766a:	699b      	ldr	r3, [r3, #24]
2001766c:	2b00      	cmp	r3, #0
2001766e:	d068      	beq.n	20017742 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20017670:	4b36      	ldr	r3, [pc, #216]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
20017672:	689b      	ldr	r3, [r3, #8]
20017674:	f003 030c 	and.w	r3, r3, #12
20017678:	2b08      	cmp	r3, #8
2001767a:	d060      	beq.n	2001773e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2001767c:	687b      	ldr	r3, [r7, #4]
2001767e:	699b      	ldr	r3, [r3, #24]
20017680:	2b02      	cmp	r3, #2
20017682:	d145      	bne.n	20017710 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20017684:	4b33      	ldr	r3, [pc, #204]	; (20017754 <HAL_RCC_OscConfig+0x4b0>)
20017686:	2200      	movs	r2, #0
20017688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2001768a:	f7f9 fa8b 	bl	20010ba4 <HAL_GetTick>
2001768e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20017690:	e008      	b.n	200176a4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20017692:	f7f9 fa87 	bl	20010ba4 <HAL_GetTick>
20017696:	4602      	mov	r2, r0
20017698:	693b      	ldr	r3, [r7, #16]
2001769a:	1ad3      	subs	r3, r2, r3
2001769c:	2b02      	cmp	r3, #2
2001769e:	d901      	bls.n	200176a4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
200176a0:	2303      	movs	r3, #3
200176a2:	e04f      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200176a4:	4b29      	ldr	r3, [pc, #164]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200176a6:	681b      	ldr	r3, [r3, #0]
200176a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200176ac:	2b00      	cmp	r3, #0
200176ae:	d1f0      	bne.n	20017692 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
200176b0:	687b      	ldr	r3, [r7, #4]
200176b2:	69da      	ldr	r2, [r3, #28]
200176b4:	687b      	ldr	r3, [r7, #4]
200176b6:	6a1b      	ldr	r3, [r3, #32]
200176b8:	431a      	orrs	r2, r3
200176ba:	687b      	ldr	r3, [r7, #4]
200176bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200176be:	019b      	lsls	r3, r3, #6
200176c0:	431a      	orrs	r2, r3
200176c2:	687b      	ldr	r3, [r7, #4]
200176c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200176c6:	085b      	lsrs	r3, r3, #1
200176c8:	3b01      	subs	r3, #1
200176ca:	041b      	lsls	r3, r3, #16
200176cc:	431a      	orrs	r2, r3
200176ce:	687b      	ldr	r3, [r7, #4]
200176d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200176d2:	061b      	lsls	r3, r3, #24
200176d4:	431a      	orrs	r2, r3
200176d6:	687b      	ldr	r3, [r7, #4]
200176d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200176da:	071b      	lsls	r3, r3, #28
200176dc:	491b      	ldr	r1, [pc, #108]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
200176de:	4313      	orrs	r3, r2
200176e0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
200176e2:	4b1c      	ldr	r3, [pc, #112]	; (20017754 <HAL_RCC_OscConfig+0x4b0>)
200176e4:	2201      	movs	r2, #1
200176e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200176e8:	f7f9 fa5c 	bl	20010ba4 <HAL_GetTick>
200176ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200176ee:	e008      	b.n	20017702 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200176f0:	f7f9 fa58 	bl	20010ba4 <HAL_GetTick>
200176f4:	4602      	mov	r2, r0
200176f6:	693b      	ldr	r3, [r7, #16]
200176f8:	1ad3      	subs	r3, r2, r3
200176fa:	2b02      	cmp	r3, #2
200176fc:	d901      	bls.n	20017702 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
200176fe:	2303      	movs	r3, #3
20017700:	e020      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20017702:	4b12      	ldr	r3, [pc, #72]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
20017704:	681b      	ldr	r3, [r3, #0]
20017706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2001770a:	2b00      	cmp	r3, #0
2001770c:	d0f0      	beq.n	200176f0 <HAL_RCC_OscConfig+0x44c>
2001770e:	e018      	b.n	20017742 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20017710:	4b10      	ldr	r3, [pc, #64]	; (20017754 <HAL_RCC_OscConfig+0x4b0>)
20017712:	2200      	movs	r2, #0
20017714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20017716:	f7f9 fa45 	bl	20010ba4 <HAL_GetTick>
2001771a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2001771c:	e008      	b.n	20017730 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2001771e:	f7f9 fa41 	bl	20010ba4 <HAL_GetTick>
20017722:	4602      	mov	r2, r0
20017724:	693b      	ldr	r3, [r7, #16]
20017726:	1ad3      	subs	r3, r2, r3
20017728:	2b02      	cmp	r3, #2
2001772a:	d901      	bls.n	20017730 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
2001772c:	2303      	movs	r3, #3
2001772e:	e009      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20017730:	4b06      	ldr	r3, [pc, #24]	; (2001774c <HAL_RCC_OscConfig+0x4a8>)
20017732:	681b      	ldr	r3, [r3, #0]
20017734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20017738:	2b00      	cmp	r3, #0
2001773a:	d1f0      	bne.n	2001771e <HAL_RCC_OscConfig+0x47a>
2001773c:	e001      	b.n	20017742 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
2001773e:	2301      	movs	r3, #1
20017740:	e000      	b.n	20017744 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
20017742:	2300      	movs	r3, #0
}
20017744:	4618      	mov	r0, r3
20017746:	3718      	adds	r7, #24
20017748:	46bd      	mov	sp, r7
2001774a:	bd80      	pop	{r7, pc}
2001774c:	40023800 	.word	0x40023800
20017750:	40007000 	.word	0x40007000
20017754:	42470060 	.word	0x42470060

20017758 <HAL_RCC_GetOscConfig>:
  * @note   This function is only available in case of STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices.
  * @note   This function add the PLL/PLLR factor management
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20017758:	b480      	push	{r7}
2001775a:	b083      	sub	sp, #12
2001775c:	af00      	add	r7, sp, #0
2001775e:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
20017760:	687b      	ldr	r3, [r7, #4]
20017762:	220f      	movs	r2, #15
20017764:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
20017766:	4b49      	ldr	r3, [pc, #292]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
20017768:	681b      	ldr	r3, [r3, #0]
2001776a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2001776e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
20017772:	d104      	bne.n	2001777e <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
20017774:	687b      	ldr	r3, [r7, #4]
20017776:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
2001777a:	605a      	str	r2, [r3, #4]
2001777c:	e00e      	b.n	2001779c <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
2001777e:	4b43      	ldr	r3, [pc, #268]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
20017780:	681b      	ldr	r3, [r3, #0]
20017782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20017786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2001778a:	d104      	bne.n	20017796 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
2001778c:	687b      	ldr	r3, [r7, #4]
2001778e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20017792:	605a      	str	r2, [r3, #4]
20017794:	e002      	b.n	2001779c <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
20017796:	687b      	ldr	r3, [r7, #4]
20017798:	2200      	movs	r2, #0
2001779a:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
2001779c:	4b3b      	ldr	r3, [pc, #236]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
2001779e:	681b      	ldr	r3, [r3, #0]
200177a0:	f003 0301 	and.w	r3, r3, #1
200177a4:	2b01      	cmp	r3, #1
200177a6:	d103      	bne.n	200177b0 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
200177a8:	687b      	ldr	r3, [r7, #4]
200177aa:	2201      	movs	r2, #1
200177ac:	60da      	str	r2, [r3, #12]
200177ae:	e002      	b.n	200177b6 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
200177b0:	687b      	ldr	r3, [r7, #4]
200177b2:	2200      	movs	r2, #0
200177b4:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
200177b6:	4b35      	ldr	r3, [pc, #212]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
200177b8:	681b      	ldr	r3, [r3, #0]
200177ba:	08db      	lsrs	r3, r3, #3
200177bc:	f003 021f 	and.w	r2, r3, #31
200177c0:	687b      	ldr	r3, [r7, #4]
200177c2:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
200177c4:	4b31      	ldr	r3, [pc, #196]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
200177c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200177c8:	f003 0304 	and.w	r3, r3, #4
200177cc:	2b04      	cmp	r3, #4
200177ce:	d103      	bne.n	200177d8 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
200177d0:	687b      	ldr	r3, [r7, #4]
200177d2:	2205      	movs	r2, #5
200177d4:	609a      	str	r2, [r3, #8]
200177d6:	e00c      	b.n	200177f2 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
200177d8:	4b2c      	ldr	r3, [pc, #176]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
200177da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200177dc:	f003 0301 	and.w	r3, r3, #1
200177e0:	2b01      	cmp	r3, #1
200177e2:	d103      	bne.n	200177ec <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
200177e4:	687b      	ldr	r3, [r7, #4]
200177e6:	2201      	movs	r2, #1
200177e8:	609a      	str	r2, [r3, #8]
200177ea:	e002      	b.n	200177f2 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
200177ec:	687b      	ldr	r3, [r7, #4]
200177ee:	2200      	movs	r2, #0
200177f0:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
200177f2:	4b26      	ldr	r3, [pc, #152]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
200177f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200177f6:	f003 0301 	and.w	r3, r3, #1
200177fa:	2b01      	cmp	r3, #1
200177fc:	d103      	bne.n	20017806 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
200177fe:	687b      	ldr	r3, [r7, #4]
20017800:	2201      	movs	r2, #1
20017802:	615a      	str	r2, [r3, #20]
20017804:	e002      	b.n	2001780c <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
20017806:	687b      	ldr	r3, [r7, #4]
20017808:	2200      	movs	r2, #0
2001780a:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
2001780c:	4b1f      	ldr	r3, [pc, #124]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
2001780e:	681b      	ldr	r3, [r3, #0]
20017810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20017814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20017818:	d103      	bne.n	20017822 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
2001781a:	687b      	ldr	r3, [r7, #4]
2001781c:	2202      	movs	r2, #2
2001781e:	619a      	str	r2, [r3, #24]
20017820:	e002      	b.n	20017828 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
20017822:	687b      	ldr	r3, [r7, #4]
20017824:	2201      	movs	r2, #1
20017826:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
20017828:	4b18      	ldr	r3, [pc, #96]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
2001782a:	685b      	ldr	r3, [r3, #4]
2001782c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
20017830:	687b      	ldr	r3, [r7, #4]
20017832:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
20017834:	4b15      	ldr	r3, [pc, #84]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
20017836:	685b      	ldr	r3, [r3, #4]
20017838:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2001783c:	687b      	ldr	r3, [r7, #4]
2001783e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
20017840:	4b12      	ldr	r3, [pc, #72]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
20017842:	685b      	ldr	r3, [r3, #4]
20017844:	099b      	lsrs	r3, r3, #6
20017846:	f3c3 0208 	ubfx	r2, r3, #0, #9
2001784a:	687b      	ldr	r3, [r7, #4]
2001784c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
2001784e:	4b0f      	ldr	r3, [pc, #60]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
20017850:	685b      	ldr	r3, [r3, #4]
20017852:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
20017856:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
2001785a:	005b      	lsls	r3, r3, #1
2001785c:	0c1a      	lsrs	r2, r3, #16
2001785e:	687b      	ldr	r3, [r7, #4]
20017860:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
20017862:	4b0a      	ldr	r3, [pc, #40]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
20017864:	685b      	ldr	r3, [r3, #4]
20017866:	0e1b      	lsrs	r3, r3, #24
20017868:	f003 020f 	and.w	r2, r3, #15
2001786c:	687b      	ldr	r3, [r7, #4]
2001786e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
20017870:	4b06      	ldr	r3, [pc, #24]	; (2001788c <HAL_RCC_GetOscConfig+0x134>)
20017872:	685b      	ldr	r3, [r3, #4]
20017874:	0f1b      	lsrs	r3, r3, #28
20017876:	f003 0207 	and.w	r2, r3, #7
2001787a:	687b      	ldr	r3, [r7, #4]
2001787c:	631a      	str	r2, [r3, #48]	; 0x30
}
2001787e:	bf00      	nop
20017880:	370c      	adds	r7, #12
20017882:	46bd      	mov	sp, r7
20017884:	f85d 7b04 	ldr.w	r7, [sp], #4
20017888:	4770      	bx	lr
2001788a:	bf00      	nop
2001788c:	40023800 	.word	0x40023800

20017890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
20017890:	b580      	push	{r7, lr}
20017892:	b082      	sub	sp, #8
20017894:	af00      	add	r7, sp, #0
20017896:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
20017898:	687b      	ldr	r3, [r7, #4]
2001789a:	2b00      	cmp	r3, #0
2001789c:	d101      	bne.n	200178a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
2001789e:	2301      	movs	r3, #1
200178a0:	e056      	b.n	20017950 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200178a2:	687b      	ldr	r3, [r7, #4]
200178a4:	2200      	movs	r2, #0
200178a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
200178a8:	687b      	ldr	r3, [r7, #4]
200178aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200178ae:	b2db      	uxtb	r3, r3
200178b0:	2b00      	cmp	r3, #0
200178b2:	d106      	bne.n	200178c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
200178b4:	687b      	ldr	r3, [r7, #4]
200178b6:	2200      	movs	r2, #0
200178b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
200178bc:	6878      	ldr	r0, [r7, #4]
200178be:	f7f8 fc13 	bl	200100e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
200178c2:	687b      	ldr	r3, [r7, #4]
200178c4:	2202      	movs	r2, #2
200178c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
200178ca:	687b      	ldr	r3, [r7, #4]
200178cc:	681b      	ldr	r3, [r3, #0]
200178ce:	681a      	ldr	r2, [r3, #0]
200178d0:	687b      	ldr	r3, [r7, #4]
200178d2:	681b      	ldr	r3, [r3, #0]
200178d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200178d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
200178da:	687b      	ldr	r3, [r7, #4]
200178dc:	685a      	ldr	r2, [r3, #4]
200178de:	687b      	ldr	r3, [r7, #4]
200178e0:	689b      	ldr	r3, [r3, #8]
200178e2:	431a      	orrs	r2, r3
200178e4:	687b      	ldr	r3, [r7, #4]
200178e6:	68db      	ldr	r3, [r3, #12]
200178e8:	431a      	orrs	r2, r3
200178ea:	687b      	ldr	r3, [r7, #4]
200178ec:	691b      	ldr	r3, [r3, #16]
200178ee:	431a      	orrs	r2, r3
200178f0:	687b      	ldr	r3, [r7, #4]
200178f2:	695b      	ldr	r3, [r3, #20]
200178f4:	431a      	orrs	r2, r3
200178f6:	687b      	ldr	r3, [r7, #4]
200178f8:	699b      	ldr	r3, [r3, #24]
200178fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
200178fe:	431a      	orrs	r2, r3
20017900:	687b      	ldr	r3, [r7, #4]
20017902:	69db      	ldr	r3, [r3, #28]
20017904:	431a      	orrs	r2, r3
20017906:	687b      	ldr	r3, [r7, #4]
20017908:	6a1b      	ldr	r3, [r3, #32]
2001790a:	ea42 0103 	orr.w	r1, r2, r3
2001790e:	687b      	ldr	r3, [r7, #4]
20017910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20017912:	687b      	ldr	r3, [r7, #4]
20017914:	681b      	ldr	r3, [r3, #0]
20017916:	430a      	orrs	r2, r1
20017918:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
2001791a:	687b      	ldr	r3, [r7, #4]
2001791c:	699b      	ldr	r3, [r3, #24]
2001791e:	0c1b      	lsrs	r3, r3, #16
20017920:	f003 0104 	and.w	r1, r3, #4
20017924:	687b      	ldr	r3, [r7, #4]
20017926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20017928:	687b      	ldr	r3, [r7, #4]
2001792a:	681b      	ldr	r3, [r3, #0]
2001792c:	430a      	orrs	r2, r1
2001792e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20017930:	687b      	ldr	r3, [r7, #4]
20017932:	681b      	ldr	r3, [r3, #0]
20017934:	69da      	ldr	r2, [r3, #28]
20017936:	687b      	ldr	r3, [r7, #4]
20017938:	681b      	ldr	r3, [r3, #0]
2001793a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
2001793e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20017940:	687b      	ldr	r3, [r7, #4]
20017942:	2200      	movs	r2, #0
20017944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
20017946:	687b      	ldr	r3, [r7, #4]
20017948:	2201      	movs	r2, #1
2001794a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
2001794e:	2300      	movs	r3, #0
}
20017950:	4618      	mov	r0, r3
20017952:	3708      	adds	r7, #8
20017954:	46bd      	mov	sp, r7
20017956:	bd80      	pop	{r7, pc}

20017958 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
20017958:	b580      	push	{r7, lr}
2001795a:	b082      	sub	sp, #8
2001795c:	af00      	add	r7, sp, #0
2001795e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
20017960:	687b      	ldr	r3, [r7, #4]
20017962:	2b00      	cmp	r3, #0
20017964:	d101      	bne.n	2001796a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
20017966:	2301      	movs	r3, #1
20017968:	e01a      	b.n	200179a0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
2001796a:	687b      	ldr	r3, [r7, #4]
2001796c:	2202      	movs	r2, #2
2001796e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
20017972:	687b      	ldr	r3, [r7, #4]
20017974:	681b      	ldr	r3, [r3, #0]
20017976:	681a      	ldr	r2, [r3, #0]
20017978:	687b      	ldr	r3, [r7, #4]
2001797a:	681b      	ldr	r3, [r3, #0]
2001797c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20017980:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
20017982:	6878      	ldr	r0, [r7, #4]
20017984:	f7f8 fc18 	bl	200101b8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20017988:	687b      	ldr	r3, [r7, #4]
2001798a:	2200      	movs	r2, #0
2001798c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
2001798e:	687b      	ldr	r3, [r7, #4]
20017990:	2200      	movs	r2, #0
20017992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
20017996:	687b      	ldr	r3, [r7, #4]
20017998:	2200      	movs	r2, #0
2001799a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
2001799e:	2300      	movs	r3, #0
}
200179a0:	4618      	mov	r0, r3
200179a2:	3708      	adds	r7, #8
200179a4:	46bd      	mov	sp, r7
200179a6:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
200179a8:	b480      	push	{r7}
200179aa:	b083      	sub	sp, #12
200179ac:	af00      	add	r7, sp, #0
200179ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
200179b0:	bf00      	nop
200179b2:	370c      	adds	r7, #12
200179b4:	46bd      	mov	sp, r7
200179b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200179ba:	4770      	bx	lr
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
200179bc:	b480      	push	{r7}
200179be:	b083      	sub	sp, #12
200179c0:	af00      	add	r7, sp, #0
200179c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
200179c4:	bf00      	nop
200179c6:	370c      	adds	r7, #12
200179c8:	46bd      	mov	sp, r7
200179ca:	f85d 7b04 	ldr.w	r7, [sp], #4
200179ce:	4770      	bx	lr

200179d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
200179d0:	b580      	push	{r7, lr}
200179d2:	b088      	sub	sp, #32
200179d4:	af00      	add	r7, sp, #0
200179d6:	60f8      	str	r0, [r7, #12]
200179d8:	60b9      	str	r1, [r7, #8]
200179da:	603b      	str	r3, [r7, #0]
200179dc:	4613      	mov	r3, r2
200179de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
200179e0:	2300      	movs	r3, #0
200179e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
200179e4:	68fb      	ldr	r3, [r7, #12]
200179e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200179ea:	2b01      	cmp	r3, #1
200179ec:	d101      	bne.n	200179f2 <HAL_SPI_Transmit+0x22>
200179ee:	2302      	movs	r3, #2
200179f0:	e11e      	b.n	20017c30 <HAL_SPI_Transmit+0x260>
200179f2:	68fb      	ldr	r3, [r7, #12]
200179f4:	2201      	movs	r2, #1
200179f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
200179fa:	f7f9 f8d3 	bl	20010ba4 <HAL_GetTick>
200179fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
20017a00:	88fb      	ldrh	r3, [r7, #6]
20017a02:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
20017a04:	68fb      	ldr	r3, [r7, #12]
20017a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20017a0a:	b2db      	uxtb	r3, r3
20017a0c:	2b01      	cmp	r3, #1
20017a0e:	d002      	beq.n	20017a16 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
20017a10:	2302      	movs	r3, #2
20017a12:	77fb      	strb	r3, [r7, #31]
    goto error;
20017a14:	e103      	b.n	20017c1e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
20017a16:	68bb      	ldr	r3, [r7, #8]
20017a18:	2b00      	cmp	r3, #0
20017a1a:	d002      	beq.n	20017a22 <HAL_SPI_Transmit+0x52>
20017a1c:	88fb      	ldrh	r3, [r7, #6]
20017a1e:	2b00      	cmp	r3, #0
20017a20:	d102      	bne.n	20017a28 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
20017a22:	2301      	movs	r3, #1
20017a24:	77fb      	strb	r3, [r7, #31]
    goto error;
20017a26:	e0fa      	b.n	20017c1e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
20017a28:	68fb      	ldr	r3, [r7, #12]
20017a2a:	2203      	movs	r2, #3
20017a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20017a30:	68fb      	ldr	r3, [r7, #12]
20017a32:	2200      	movs	r2, #0
20017a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
20017a36:	68fb      	ldr	r3, [r7, #12]
20017a38:	68ba      	ldr	r2, [r7, #8]
20017a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20017a3c:	68fb      	ldr	r3, [r7, #12]
20017a3e:	88fa      	ldrh	r2, [r7, #6]
20017a40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20017a42:	68fb      	ldr	r3, [r7, #12]
20017a44:	88fa      	ldrh	r2, [r7, #6]
20017a46:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
20017a48:	68fb      	ldr	r3, [r7, #12]
20017a4a:	2200      	movs	r2, #0
20017a4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
20017a4e:	68fb      	ldr	r3, [r7, #12]
20017a50:	2200      	movs	r2, #0
20017a52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
20017a54:	68fb      	ldr	r3, [r7, #12]
20017a56:	2200      	movs	r2, #0
20017a58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
20017a5a:	68fb      	ldr	r3, [r7, #12]
20017a5c:	2200      	movs	r2, #0
20017a5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
20017a60:	68fb      	ldr	r3, [r7, #12]
20017a62:	2200      	movs	r2, #0
20017a64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20017a66:	68fb      	ldr	r3, [r7, #12]
20017a68:	689b      	ldr	r3, [r3, #8]
20017a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20017a6e:	d107      	bne.n	20017a80 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
20017a70:	68fb      	ldr	r3, [r7, #12]
20017a72:	681b      	ldr	r3, [r3, #0]
20017a74:	681a      	ldr	r2, [r3, #0]
20017a76:	68fb      	ldr	r3, [r7, #12]
20017a78:	681b      	ldr	r3, [r3, #0]
20017a7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20017a7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20017a80:	68fb      	ldr	r3, [r7, #12]
20017a82:	681b      	ldr	r3, [r3, #0]
20017a84:	681b      	ldr	r3, [r3, #0]
20017a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
20017a8a:	2b40      	cmp	r3, #64	; 0x40
20017a8c:	d007      	beq.n	20017a9e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20017a8e:	68fb      	ldr	r3, [r7, #12]
20017a90:	681b      	ldr	r3, [r3, #0]
20017a92:	681a      	ldr	r2, [r3, #0]
20017a94:	68fb      	ldr	r3, [r7, #12]
20017a96:	681b      	ldr	r3, [r3, #0]
20017a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20017a9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
20017a9e:	68fb      	ldr	r3, [r7, #12]
20017aa0:	68db      	ldr	r3, [r3, #12]
20017aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20017aa6:	d14b      	bne.n	20017b40 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20017aa8:	68fb      	ldr	r3, [r7, #12]
20017aaa:	685b      	ldr	r3, [r3, #4]
20017aac:	2b00      	cmp	r3, #0
20017aae:	d002      	beq.n	20017ab6 <HAL_SPI_Transmit+0xe6>
20017ab0:	8afb      	ldrh	r3, [r7, #22]
20017ab2:	2b01      	cmp	r3, #1
20017ab4:	d13e      	bne.n	20017b34 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20017ab6:	68fb      	ldr	r3, [r7, #12]
20017ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20017aba:	881a      	ldrh	r2, [r3, #0]
20017abc:	68fb      	ldr	r3, [r7, #12]
20017abe:	681b      	ldr	r3, [r3, #0]
20017ac0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
20017ac2:	68fb      	ldr	r3, [r7, #12]
20017ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20017ac6:	1c9a      	adds	r2, r3, #2
20017ac8:	68fb      	ldr	r3, [r7, #12]
20017aca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
20017acc:	68fb      	ldr	r3, [r7, #12]
20017ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20017ad0:	b29b      	uxth	r3, r3
20017ad2:	3b01      	subs	r3, #1
20017ad4:	b29a      	uxth	r2, r3
20017ad6:	68fb      	ldr	r3, [r7, #12]
20017ad8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
20017ada:	e02b      	b.n	20017b34 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20017adc:	68fb      	ldr	r3, [r7, #12]
20017ade:	681b      	ldr	r3, [r3, #0]
20017ae0:	689b      	ldr	r3, [r3, #8]
20017ae2:	f003 0302 	and.w	r3, r3, #2
20017ae6:	2b02      	cmp	r3, #2
20017ae8:	d112      	bne.n	20017b10 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20017aea:	68fb      	ldr	r3, [r7, #12]
20017aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20017aee:	881a      	ldrh	r2, [r3, #0]
20017af0:	68fb      	ldr	r3, [r7, #12]
20017af2:	681b      	ldr	r3, [r3, #0]
20017af4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20017af6:	68fb      	ldr	r3, [r7, #12]
20017af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20017afa:	1c9a      	adds	r2, r3, #2
20017afc:	68fb      	ldr	r3, [r7, #12]
20017afe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20017b00:	68fb      	ldr	r3, [r7, #12]
20017b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20017b04:	b29b      	uxth	r3, r3
20017b06:	3b01      	subs	r3, #1
20017b08:	b29a      	uxth	r2, r3
20017b0a:	68fb      	ldr	r3, [r7, #12]
20017b0c:	86da      	strh	r2, [r3, #54]	; 0x36
20017b0e:	e011      	b.n	20017b34 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20017b10:	f7f9 f848 	bl	20010ba4 <HAL_GetTick>
20017b14:	4602      	mov	r2, r0
20017b16:	69bb      	ldr	r3, [r7, #24]
20017b18:	1ad3      	subs	r3, r2, r3
20017b1a:	683a      	ldr	r2, [r7, #0]
20017b1c:	429a      	cmp	r2, r3
20017b1e:	d803      	bhi.n	20017b28 <HAL_SPI_Transmit+0x158>
20017b20:	683b      	ldr	r3, [r7, #0]
20017b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20017b26:	d102      	bne.n	20017b2e <HAL_SPI_Transmit+0x15e>
20017b28:	683b      	ldr	r3, [r7, #0]
20017b2a:	2b00      	cmp	r3, #0
20017b2c:	d102      	bne.n	20017b34 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
20017b2e:	2303      	movs	r3, #3
20017b30:	77fb      	strb	r3, [r7, #31]
          goto error;
20017b32:	e074      	b.n	20017c1e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
20017b34:	68fb      	ldr	r3, [r7, #12]
20017b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20017b38:	b29b      	uxth	r3, r3
20017b3a:	2b00      	cmp	r3, #0
20017b3c:	d1ce      	bne.n	20017adc <HAL_SPI_Transmit+0x10c>
20017b3e:	e04c      	b.n	20017bda <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20017b40:	68fb      	ldr	r3, [r7, #12]
20017b42:	685b      	ldr	r3, [r3, #4]
20017b44:	2b00      	cmp	r3, #0
20017b46:	d002      	beq.n	20017b4e <HAL_SPI_Transmit+0x17e>
20017b48:	8afb      	ldrh	r3, [r7, #22]
20017b4a:	2b01      	cmp	r3, #1
20017b4c:	d140      	bne.n	20017bd0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20017b4e:	68fb      	ldr	r3, [r7, #12]
20017b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20017b52:	68fb      	ldr	r3, [r7, #12]
20017b54:	681b      	ldr	r3, [r3, #0]
20017b56:	330c      	adds	r3, #12
20017b58:	7812      	ldrb	r2, [r2, #0]
20017b5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
20017b5c:	68fb      	ldr	r3, [r7, #12]
20017b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20017b60:	1c5a      	adds	r2, r3, #1
20017b62:	68fb      	ldr	r3, [r7, #12]
20017b64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
20017b66:	68fb      	ldr	r3, [r7, #12]
20017b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20017b6a:	b29b      	uxth	r3, r3
20017b6c:	3b01      	subs	r3, #1
20017b6e:	b29a      	uxth	r2, r3
20017b70:	68fb      	ldr	r3, [r7, #12]
20017b72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
20017b74:	e02c      	b.n	20017bd0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20017b76:	68fb      	ldr	r3, [r7, #12]
20017b78:	681b      	ldr	r3, [r3, #0]
20017b7a:	689b      	ldr	r3, [r3, #8]
20017b7c:	f003 0302 	and.w	r3, r3, #2
20017b80:	2b02      	cmp	r3, #2
20017b82:	d113      	bne.n	20017bac <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20017b84:	68fb      	ldr	r3, [r7, #12]
20017b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20017b88:	68fb      	ldr	r3, [r7, #12]
20017b8a:	681b      	ldr	r3, [r3, #0]
20017b8c:	330c      	adds	r3, #12
20017b8e:	7812      	ldrb	r2, [r2, #0]
20017b90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
20017b92:	68fb      	ldr	r3, [r7, #12]
20017b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20017b96:	1c5a      	adds	r2, r3, #1
20017b98:	68fb      	ldr	r3, [r7, #12]
20017b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20017b9c:	68fb      	ldr	r3, [r7, #12]
20017b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20017ba0:	b29b      	uxth	r3, r3
20017ba2:	3b01      	subs	r3, #1
20017ba4:	b29a      	uxth	r2, r3
20017ba6:	68fb      	ldr	r3, [r7, #12]
20017ba8:	86da      	strh	r2, [r3, #54]	; 0x36
20017baa:	e011      	b.n	20017bd0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20017bac:	f7f8 fffa 	bl	20010ba4 <HAL_GetTick>
20017bb0:	4602      	mov	r2, r0
20017bb2:	69bb      	ldr	r3, [r7, #24]
20017bb4:	1ad3      	subs	r3, r2, r3
20017bb6:	683a      	ldr	r2, [r7, #0]
20017bb8:	429a      	cmp	r2, r3
20017bba:	d803      	bhi.n	20017bc4 <HAL_SPI_Transmit+0x1f4>
20017bbc:	683b      	ldr	r3, [r7, #0]
20017bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20017bc2:	d102      	bne.n	20017bca <HAL_SPI_Transmit+0x1fa>
20017bc4:	683b      	ldr	r3, [r7, #0]
20017bc6:	2b00      	cmp	r3, #0
20017bc8:	d102      	bne.n	20017bd0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
20017bca:	2303      	movs	r3, #3
20017bcc:	77fb      	strb	r3, [r7, #31]
          goto error;
20017bce:	e026      	b.n	20017c1e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
20017bd0:	68fb      	ldr	r3, [r7, #12]
20017bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20017bd4:	b29b      	uxth	r3, r3
20017bd6:	2b00      	cmp	r3, #0
20017bd8:	d1cd      	bne.n	20017b76 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20017bda:	69ba      	ldr	r2, [r7, #24]
20017bdc:	6839      	ldr	r1, [r7, #0]
20017bde:	68f8      	ldr	r0, [r7, #12]
20017be0:	f001 fefc 	bl	200199dc <SPI_EndRxTxTransaction>
20017be4:	4603      	mov	r3, r0
20017be6:	2b00      	cmp	r3, #0
20017be8:	d002      	beq.n	20017bf0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20017bea:	68fb      	ldr	r3, [r7, #12]
20017bec:	2220      	movs	r2, #32
20017bee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20017bf0:	68fb      	ldr	r3, [r7, #12]
20017bf2:	689b      	ldr	r3, [r3, #8]
20017bf4:	2b00      	cmp	r3, #0
20017bf6:	d10a      	bne.n	20017c0e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20017bf8:	2300      	movs	r3, #0
20017bfa:	613b      	str	r3, [r7, #16]
20017bfc:	68fb      	ldr	r3, [r7, #12]
20017bfe:	681b      	ldr	r3, [r3, #0]
20017c00:	68db      	ldr	r3, [r3, #12]
20017c02:	613b      	str	r3, [r7, #16]
20017c04:	68fb      	ldr	r3, [r7, #12]
20017c06:	681b      	ldr	r3, [r3, #0]
20017c08:	689b      	ldr	r3, [r3, #8]
20017c0a:	613b      	str	r3, [r7, #16]
20017c0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20017c0e:	68fb      	ldr	r3, [r7, #12]
20017c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20017c12:	2b00      	cmp	r3, #0
20017c14:	d002      	beq.n	20017c1c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
20017c16:	2301      	movs	r3, #1
20017c18:	77fb      	strb	r3, [r7, #31]
20017c1a:	e000      	b.n	20017c1e <HAL_SPI_Transmit+0x24e>
  }

error:
20017c1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
20017c1e:	68fb      	ldr	r3, [r7, #12]
20017c20:	2201      	movs	r2, #1
20017c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20017c26:	68fb      	ldr	r3, [r7, #12]
20017c28:	2200      	movs	r2, #0
20017c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20017c2e:	7ffb      	ldrb	r3, [r7, #31]
}
20017c30:	4618      	mov	r0, r3
20017c32:	3720      	adds	r7, #32
20017c34:	46bd      	mov	sp, r7
20017c36:	bd80      	pop	{r7, pc}

20017c38 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
20017c38:	b580      	push	{r7, lr}
20017c3a:	b088      	sub	sp, #32
20017c3c:	af02      	add	r7, sp, #8
20017c3e:	60f8      	str	r0, [r7, #12]
20017c40:	60b9      	str	r1, [r7, #8]
20017c42:	603b      	str	r3, [r7, #0]
20017c44:	4613      	mov	r3, r2
20017c46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
20017c48:	2300      	movs	r3, #0
20017c4a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
20017c4c:	68fb      	ldr	r3, [r7, #12]
20017c4e:	685b      	ldr	r3, [r3, #4]
20017c50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20017c54:	d112      	bne.n	20017c7c <HAL_SPI_Receive+0x44>
20017c56:	68fb      	ldr	r3, [r7, #12]
20017c58:	689b      	ldr	r3, [r3, #8]
20017c5a:	2b00      	cmp	r3, #0
20017c5c:	d10e      	bne.n	20017c7c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
20017c5e:	68fb      	ldr	r3, [r7, #12]
20017c60:	2204      	movs	r2, #4
20017c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
20017c66:	88fa      	ldrh	r2, [r7, #6]
20017c68:	683b      	ldr	r3, [r7, #0]
20017c6a:	9300      	str	r3, [sp, #0]
20017c6c:	4613      	mov	r3, r2
20017c6e:	68ba      	ldr	r2, [r7, #8]
20017c70:	68b9      	ldr	r1, [r7, #8]
20017c72:	68f8      	ldr	r0, [r7, #12]
20017c74:	f000 f8e9 	bl	20017e4a <HAL_SPI_TransmitReceive>
20017c78:	4603      	mov	r3, r0
20017c7a:	e0e2      	b.n	20017e42 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
20017c7c:	68fb      	ldr	r3, [r7, #12]
20017c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20017c82:	2b01      	cmp	r3, #1
20017c84:	d101      	bne.n	20017c8a <HAL_SPI_Receive+0x52>
20017c86:	2302      	movs	r3, #2
20017c88:	e0db      	b.n	20017e42 <HAL_SPI_Receive+0x20a>
20017c8a:	68fb      	ldr	r3, [r7, #12]
20017c8c:	2201      	movs	r2, #1
20017c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20017c92:	f7f8 ff87 	bl	20010ba4 <HAL_GetTick>
20017c96:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
20017c98:	68fb      	ldr	r3, [r7, #12]
20017c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20017c9e:	b2db      	uxtb	r3, r3
20017ca0:	2b01      	cmp	r3, #1
20017ca2:	d002      	beq.n	20017caa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
20017ca4:	2302      	movs	r3, #2
20017ca6:	75fb      	strb	r3, [r7, #23]
    goto error;
20017ca8:	e0c2      	b.n	20017e30 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
20017caa:	68bb      	ldr	r3, [r7, #8]
20017cac:	2b00      	cmp	r3, #0
20017cae:	d002      	beq.n	20017cb6 <HAL_SPI_Receive+0x7e>
20017cb0:	88fb      	ldrh	r3, [r7, #6]
20017cb2:	2b00      	cmp	r3, #0
20017cb4:	d102      	bne.n	20017cbc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
20017cb6:	2301      	movs	r3, #1
20017cb8:	75fb      	strb	r3, [r7, #23]
    goto error;
20017cba:	e0b9      	b.n	20017e30 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
20017cbc:	68fb      	ldr	r3, [r7, #12]
20017cbe:	2204      	movs	r2, #4
20017cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20017cc4:	68fb      	ldr	r3, [r7, #12]
20017cc6:	2200      	movs	r2, #0
20017cc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
20017cca:	68fb      	ldr	r3, [r7, #12]
20017ccc:	68ba      	ldr	r2, [r7, #8]
20017cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20017cd0:	68fb      	ldr	r3, [r7, #12]
20017cd2:	88fa      	ldrh	r2, [r7, #6]
20017cd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20017cd6:	68fb      	ldr	r3, [r7, #12]
20017cd8:	88fa      	ldrh	r2, [r7, #6]
20017cda:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
20017cdc:	68fb      	ldr	r3, [r7, #12]
20017cde:	2200      	movs	r2, #0
20017ce0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
20017ce2:	68fb      	ldr	r3, [r7, #12]
20017ce4:	2200      	movs	r2, #0
20017ce6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
20017ce8:	68fb      	ldr	r3, [r7, #12]
20017cea:	2200      	movs	r2, #0
20017cec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
20017cee:	68fb      	ldr	r3, [r7, #12]
20017cf0:	2200      	movs	r2, #0
20017cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20017cf4:	68fb      	ldr	r3, [r7, #12]
20017cf6:	2200      	movs	r2, #0
20017cf8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20017cfa:	68fb      	ldr	r3, [r7, #12]
20017cfc:	689b      	ldr	r3, [r3, #8]
20017cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20017d02:	d107      	bne.n	20017d14 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
20017d04:	68fb      	ldr	r3, [r7, #12]
20017d06:	681b      	ldr	r3, [r3, #0]
20017d08:	681a      	ldr	r2, [r3, #0]
20017d0a:	68fb      	ldr	r3, [r7, #12]
20017d0c:	681b      	ldr	r3, [r3, #0]
20017d0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20017d12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20017d14:	68fb      	ldr	r3, [r7, #12]
20017d16:	681b      	ldr	r3, [r3, #0]
20017d18:	681b      	ldr	r3, [r3, #0]
20017d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
20017d1e:	2b40      	cmp	r3, #64	; 0x40
20017d20:	d007      	beq.n	20017d32 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20017d22:	68fb      	ldr	r3, [r7, #12]
20017d24:	681b      	ldr	r3, [r3, #0]
20017d26:	681a      	ldr	r2, [r3, #0]
20017d28:	68fb      	ldr	r3, [r7, #12]
20017d2a:	681b      	ldr	r3, [r3, #0]
20017d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20017d30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
20017d32:	68fb      	ldr	r3, [r7, #12]
20017d34:	68db      	ldr	r3, [r3, #12]
20017d36:	2b00      	cmp	r3, #0
20017d38:	d162      	bne.n	20017e00 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
20017d3a:	e02e      	b.n	20017d9a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
20017d3c:	68fb      	ldr	r3, [r7, #12]
20017d3e:	681b      	ldr	r3, [r3, #0]
20017d40:	689b      	ldr	r3, [r3, #8]
20017d42:	f003 0301 	and.w	r3, r3, #1
20017d46:	2b01      	cmp	r3, #1
20017d48:	d115      	bne.n	20017d76 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
20017d4a:	68fb      	ldr	r3, [r7, #12]
20017d4c:	681b      	ldr	r3, [r3, #0]
20017d4e:	f103 020c 	add.w	r2, r3, #12
20017d52:	68fb      	ldr	r3, [r7, #12]
20017d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20017d56:	7812      	ldrb	r2, [r2, #0]
20017d58:	b2d2      	uxtb	r2, r2
20017d5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
20017d5c:	68fb      	ldr	r3, [r7, #12]
20017d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20017d60:	1c5a      	adds	r2, r3, #1
20017d62:	68fb      	ldr	r3, [r7, #12]
20017d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20017d66:	68fb      	ldr	r3, [r7, #12]
20017d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20017d6a:	b29b      	uxth	r3, r3
20017d6c:	3b01      	subs	r3, #1
20017d6e:	b29a      	uxth	r2, r3
20017d70:	68fb      	ldr	r3, [r7, #12]
20017d72:	87da      	strh	r2, [r3, #62]	; 0x3e
20017d74:	e011      	b.n	20017d9a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20017d76:	f7f8 ff15 	bl	20010ba4 <HAL_GetTick>
20017d7a:	4602      	mov	r2, r0
20017d7c:	693b      	ldr	r3, [r7, #16]
20017d7e:	1ad3      	subs	r3, r2, r3
20017d80:	683a      	ldr	r2, [r7, #0]
20017d82:	429a      	cmp	r2, r3
20017d84:	d803      	bhi.n	20017d8e <HAL_SPI_Receive+0x156>
20017d86:	683b      	ldr	r3, [r7, #0]
20017d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20017d8c:	d102      	bne.n	20017d94 <HAL_SPI_Receive+0x15c>
20017d8e:	683b      	ldr	r3, [r7, #0]
20017d90:	2b00      	cmp	r3, #0
20017d92:	d102      	bne.n	20017d9a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
20017d94:	2303      	movs	r3, #3
20017d96:	75fb      	strb	r3, [r7, #23]
          goto error;
20017d98:	e04a      	b.n	20017e30 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
20017d9a:	68fb      	ldr	r3, [r7, #12]
20017d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20017d9e:	b29b      	uxth	r3, r3
20017da0:	2b00      	cmp	r3, #0
20017da2:	d1cb      	bne.n	20017d3c <HAL_SPI_Receive+0x104>
20017da4:	e031      	b.n	20017e0a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
20017da6:	68fb      	ldr	r3, [r7, #12]
20017da8:	681b      	ldr	r3, [r3, #0]
20017daa:	689b      	ldr	r3, [r3, #8]
20017dac:	f003 0301 	and.w	r3, r3, #1
20017db0:	2b01      	cmp	r3, #1
20017db2:	d113      	bne.n	20017ddc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20017db4:	68fb      	ldr	r3, [r7, #12]
20017db6:	681b      	ldr	r3, [r3, #0]
20017db8:	68da      	ldr	r2, [r3, #12]
20017dba:	68fb      	ldr	r3, [r7, #12]
20017dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20017dbe:	b292      	uxth	r2, r2
20017dc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20017dc2:	68fb      	ldr	r3, [r7, #12]
20017dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20017dc6:	1c9a      	adds	r2, r3, #2
20017dc8:	68fb      	ldr	r3, [r7, #12]
20017dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20017dcc:	68fb      	ldr	r3, [r7, #12]
20017dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20017dd0:	b29b      	uxth	r3, r3
20017dd2:	3b01      	subs	r3, #1
20017dd4:	b29a      	uxth	r2, r3
20017dd6:	68fb      	ldr	r3, [r7, #12]
20017dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
20017dda:	e011      	b.n	20017e00 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20017ddc:	f7f8 fee2 	bl	20010ba4 <HAL_GetTick>
20017de0:	4602      	mov	r2, r0
20017de2:	693b      	ldr	r3, [r7, #16]
20017de4:	1ad3      	subs	r3, r2, r3
20017de6:	683a      	ldr	r2, [r7, #0]
20017de8:	429a      	cmp	r2, r3
20017dea:	d803      	bhi.n	20017df4 <HAL_SPI_Receive+0x1bc>
20017dec:	683b      	ldr	r3, [r7, #0]
20017dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20017df2:	d102      	bne.n	20017dfa <HAL_SPI_Receive+0x1c2>
20017df4:	683b      	ldr	r3, [r7, #0]
20017df6:	2b00      	cmp	r3, #0
20017df8:	d102      	bne.n	20017e00 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
20017dfa:	2303      	movs	r3, #3
20017dfc:	75fb      	strb	r3, [r7, #23]
          goto error;
20017dfe:	e017      	b.n	20017e30 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
20017e00:	68fb      	ldr	r3, [r7, #12]
20017e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20017e04:	b29b      	uxth	r3, r3
20017e06:	2b00      	cmp	r3, #0
20017e08:	d1cd      	bne.n	20017da6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20017e0a:	693a      	ldr	r2, [r7, #16]
20017e0c:	6839      	ldr	r1, [r7, #0]
20017e0e:	68f8      	ldr	r0, [r7, #12]
20017e10:	f001 fd7e 	bl	20019910 <SPI_EndRxTransaction>
20017e14:	4603      	mov	r3, r0
20017e16:	2b00      	cmp	r3, #0
20017e18:	d002      	beq.n	20017e20 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20017e1a:	68fb      	ldr	r3, [r7, #12]
20017e1c:	2220      	movs	r2, #32
20017e1e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20017e20:	68fb      	ldr	r3, [r7, #12]
20017e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20017e24:	2b00      	cmp	r3, #0
20017e26:	d002      	beq.n	20017e2e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
20017e28:	2301      	movs	r3, #1
20017e2a:	75fb      	strb	r3, [r7, #23]
20017e2c:	e000      	b.n	20017e30 <HAL_SPI_Receive+0x1f8>
  }

error :
20017e2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
20017e30:	68fb      	ldr	r3, [r7, #12]
20017e32:	2201      	movs	r2, #1
20017e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
20017e38:	68fb      	ldr	r3, [r7, #12]
20017e3a:	2200      	movs	r2, #0
20017e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20017e40:	7dfb      	ldrb	r3, [r7, #23]
}
20017e42:	4618      	mov	r0, r3
20017e44:	3718      	adds	r7, #24
20017e46:	46bd      	mov	sp, r7
20017e48:	bd80      	pop	{r7, pc}

20017e4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
20017e4a:	b580      	push	{r7, lr}
20017e4c:	b08c      	sub	sp, #48	; 0x30
20017e4e:	af00      	add	r7, sp, #0
20017e50:	60f8      	str	r0, [r7, #12]
20017e52:	60b9      	str	r1, [r7, #8]
20017e54:	607a      	str	r2, [r7, #4]
20017e56:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
20017e58:	2301      	movs	r3, #1
20017e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
20017e5c:	2300      	movs	r3, #0
20017e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
20017e62:	68fb      	ldr	r3, [r7, #12]
20017e64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20017e68:	2b01      	cmp	r3, #1
20017e6a:	d101      	bne.n	20017e70 <HAL_SPI_TransmitReceive+0x26>
20017e6c:	2302      	movs	r3, #2
20017e6e:	e18a      	b.n	20018186 <HAL_SPI_TransmitReceive+0x33c>
20017e70:	68fb      	ldr	r3, [r7, #12]
20017e72:	2201      	movs	r2, #1
20017e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20017e78:	f7f8 fe94 	bl	20010ba4 <HAL_GetTick>
20017e7c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
20017e7e:	68fb      	ldr	r3, [r7, #12]
20017e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20017e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
20017e88:	68fb      	ldr	r3, [r7, #12]
20017e8a:	685b      	ldr	r3, [r3, #4]
20017e8c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
20017e8e:	887b      	ldrh	r3, [r7, #2]
20017e90:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
20017e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
20017e96:	2b01      	cmp	r3, #1
20017e98:	d00f      	beq.n	20017eba <HAL_SPI_TransmitReceive+0x70>
20017e9a:	69fb      	ldr	r3, [r7, #28]
20017e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20017ea0:	d107      	bne.n	20017eb2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
20017ea2:	68fb      	ldr	r3, [r7, #12]
20017ea4:	689b      	ldr	r3, [r3, #8]
20017ea6:	2b00      	cmp	r3, #0
20017ea8:	d103      	bne.n	20017eb2 <HAL_SPI_TransmitReceive+0x68>
20017eaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
20017eae:	2b04      	cmp	r3, #4
20017eb0:	d003      	beq.n	20017eba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
20017eb2:	2302      	movs	r3, #2
20017eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
20017eb8:	e15b      	b.n	20018172 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
20017eba:	68bb      	ldr	r3, [r7, #8]
20017ebc:	2b00      	cmp	r3, #0
20017ebe:	d005      	beq.n	20017ecc <HAL_SPI_TransmitReceive+0x82>
20017ec0:	687b      	ldr	r3, [r7, #4]
20017ec2:	2b00      	cmp	r3, #0
20017ec4:	d002      	beq.n	20017ecc <HAL_SPI_TransmitReceive+0x82>
20017ec6:	887b      	ldrh	r3, [r7, #2]
20017ec8:	2b00      	cmp	r3, #0
20017eca:	d103      	bne.n	20017ed4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
20017ecc:	2301      	movs	r3, #1
20017ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
20017ed2:	e14e      	b.n	20018172 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20017ed4:	68fb      	ldr	r3, [r7, #12]
20017ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20017eda:	b2db      	uxtb	r3, r3
20017edc:	2b04      	cmp	r3, #4
20017ede:	d003      	beq.n	20017ee8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20017ee0:	68fb      	ldr	r3, [r7, #12]
20017ee2:	2205      	movs	r2, #5
20017ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20017ee8:	68fb      	ldr	r3, [r7, #12]
20017eea:	2200      	movs	r2, #0
20017eec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20017eee:	68fb      	ldr	r3, [r7, #12]
20017ef0:	687a      	ldr	r2, [r7, #4]
20017ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
20017ef4:	68fb      	ldr	r3, [r7, #12]
20017ef6:	887a      	ldrh	r2, [r7, #2]
20017ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
20017efa:	68fb      	ldr	r3, [r7, #12]
20017efc:	887a      	ldrh	r2, [r7, #2]
20017efe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
20017f00:	68fb      	ldr	r3, [r7, #12]
20017f02:	68ba      	ldr	r2, [r7, #8]
20017f04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
20017f06:	68fb      	ldr	r3, [r7, #12]
20017f08:	887a      	ldrh	r2, [r7, #2]
20017f0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
20017f0c:	68fb      	ldr	r3, [r7, #12]
20017f0e:	887a      	ldrh	r2, [r7, #2]
20017f10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20017f12:	68fb      	ldr	r3, [r7, #12]
20017f14:	2200      	movs	r2, #0
20017f16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20017f18:	68fb      	ldr	r3, [r7, #12]
20017f1a:	2200      	movs	r2, #0
20017f1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20017f1e:	68fb      	ldr	r3, [r7, #12]
20017f20:	681b      	ldr	r3, [r3, #0]
20017f22:	681b      	ldr	r3, [r3, #0]
20017f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
20017f28:	2b40      	cmp	r3, #64	; 0x40
20017f2a:	d007      	beq.n	20017f3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20017f2c:	68fb      	ldr	r3, [r7, #12]
20017f2e:	681b      	ldr	r3, [r3, #0]
20017f30:	681a      	ldr	r2, [r3, #0]
20017f32:	68fb      	ldr	r3, [r7, #12]
20017f34:	681b      	ldr	r3, [r3, #0]
20017f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20017f3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
20017f3c:	68fb      	ldr	r3, [r7, #12]
20017f3e:	68db      	ldr	r3, [r3, #12]
20017f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20017f44:	d178      	bne.n	20018038 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20017f46:	68fb      	ldr	r3, [r7, #12]
20017f48:	685b      	ldr	r3, [r3, #4]
20017f4a:	2b00      	cmp	r3, #0
20017f4c:	d002      	beq.n	20017f54 <HAL_SPI_TransmitReceive+0x10a>
20017f4e:	8b7b      	ldrh	r3, [r7, #26]
20017f50:	2b01      	cmp	r3, #1
20017f52:	d166      	bne.n	20018022 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20017f54:	68fb      	ldr	r3, [r7, #12]
20017f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20017f58:	881a      	ldrh	r2, [r3, #0]
20017f5a:	68fb      	ldr	r3, [r7, #12]
20017f5c:	681b      	ldr	r3, [r3, #0]
20017f5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
20017f60:	68fb      	ldr	r3, [r7, #12]
20017f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20017f64:	1c9a      	adds	r2, r3, #2
20017f66:	68fb      	ldr	r3, [r7, #12]
20017f68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
20017f6a:	68fb      	ldr	r3, [r7, #12]
20017f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20017f6e:	b29b      	uxth	r3, r3
20017f70:	3b01      	subs	r3, #1
20017f72:	b29a      	uxth	r2, r3
20017f74:	68fb      	ldr	r3, [r7, #12]
20017f76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20017f78:	e053      	b.n	20018022 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
20017f7a:	68fb      	ldr	r3, [r7, #12]
20017f7c:	681b      	ldr	r3, [r3, #0]
20017f7e:	689b      	ldr	r3, [r3, #8]
20017f80:	f003 0302 	and.w	r3, r3, #2
20017f84:	2b02      	cmp	r3, #2
20017f86:	d11b      	bne.n	20017fc0 <HAL_SPI_TransmitReceive+0x176>
20017f88:	68fb      	ldr	r3, [r7, #12]
20017f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20017f8c:	b29b      	uxth	r3, r3
20017f8e:	2b00      	cmp	r3, #0
20017f90:	d016      	beq.n	20017fc0 <HAL_SPI_TransmitReceive+0x176>
20017f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20017f94:	2b01      	cmp	r3, #1
20017f96:	d113      	bne.n	20017fc0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20017f98:	68fb      	ldr	r3, [r7, #12]
20017f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20017f9c:	881a      	ldrh	r2, [r3, #0]
20017f9e:	68fb      	ldr	r3, [r7, #12]
20017fa0:	681b      	ldr	r3, [r3, #0]
20017fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20017fa4:	68fb      	ldr	r3, [r7, #12]
20017fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20017fa8:	1c9a      	adds	r2, r3, #2
20017faa:	68fb      	ldr	r3, [r7, #12]
20017fac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20017fae:	68fb      	ldr	r3, [r7, #12]
20017fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20017fb2:	b29b      	uxth	r3, r3
20017fb4:	3b01      	subs	r3, #1
20017fb6:	b29a      	uxth	r2, r3
20017fb8:	68fb      	ldr	r3, [r7, #12]
20017fba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
20017fbc:	2300      	movs	r3, #0
20017fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
20017fc0:	68fb      	ldr	r3, [r7, #12]
20017fc2:	681b      	ldr	r3, [r3, #0]
20017fc4:	689b      	ldr	r3, [r3, #8]
20017fc6:	f003 0301 	and.w	r3, r3, #1
20017fca:	2b01      	cmp	r3, #1
20017fcc:	d119      	bne.n	20018002 <HAL_SPI_TransmitReceive+0x1b8>
20017fce:	68fb      	ldr	r3, [r7, #12]
20017fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20017fd2:	b29b      	uxth	r3, r3
20017fd4:	2b00      	cmp	r3, #0
20017fd6:	d014      	beq.n	20018002 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20017fd8:	68fb      	ldr	r3, [r7, #12]
20017fda:	681b      	ldr	r3, [r3, #0]
20017fdc:	68da      	ldr	r2, [r3, #12]
20017fde:	68fb      	ldr	r3, [r7, #12]
20017fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20017fe2:	b292      	uxth	r2, r2
20017fe4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20017fe6:	68fb      	ldr	r3, [r7, #12]
20017fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20017fea:	1c9a      	adds	r2, r3, #2
20017fec:	68fb      	ldr	r3, [r7, #12]
20017fee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20017ff0:	68fb      	ldr	r3, [r7, #12]
20017ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20017ff4:	b29b      	uxth	r3, r3
20017ff6:	3b01      	subs	r3, #1
20017ff8:	b29a      	uxth	r2, r3
20017ffa:	68fb      	ldr	r3, [r7, #12]
20017ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20017ffe:	2301      	movs	r3, #1
20018000:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
20018002:	f7f8 fdcf 	bl	20010ba4 <HAL_GetTick>
20018006:	4602      	mov	r2, r0
20018008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2001800a:	1ad3      	subs	r3, r2, r3
2001800c:	6bba      	ldr	r2, [r7, #56]	; 0x38
2001800e:	429a      	cmp	r2, r3
20018010:	d807      	bhi.n	20018022 <HAL_SPI_TransmitReceive+0x1d8>
20018012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20018014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20018018:	d003      	beq.n	20018022 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
2001801a:	2303      	movs	r3, #3
2001801c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
20018020:	e0a7      	b.n	20018172 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20018022:	68fb      	ldr	r3, [r7, #12]
20018024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20018026:	b29b      	uxth	r3, r3
20018028:	2b00      	cmp	r3, #0
2001802a:	d1a6      	bne.n	20017f7a <HAL_SPI_TransmitReceive+0x130>
2001802c:	68fb      	ldr	r3, [r7, #12]
2001802e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20018030:	b29b      	uxth	r3, r3
20018032:	2b00      	cmp	r3, #0
20018034:	d1a1      	bne.n	20017f7a <HAL_SPI_TransmitReceive+0x130>
20018036:	e07c      	b.n	20018132 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20018038:	68fb      	ldr	r3, [r7, #12]
2001803a:	685b      	ldr	r3, [r3, #4]
2001803c:	2b00      	cmp	r3, #0
2001803e:	d002      	beq.n	20018046 <HAL_SPI_TransmitReceive+0x1fc>
20018040:	8b7b      	ldrh	r3, [r7, #26]
20018042:	2b01      	cmp	r3, #1
20018044:	d16b      	bne.n	2001811e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20018046:	68fb      	ldr	r3, [r7, #12]
20018048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2001804a:	68fb      	ldr	r3, [r7, #12]
2001804c:	681b      	ldr	r3, [r3, #0]
2001804e:	330c      	adds	r3, #12
20018050:	7812      	ldrb	r2, [r2, #0]
20018052:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
20018054:	68fb      	ldr	r3, [r7, #12]
20018056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20018058:	1c5a      	adds	r2, r3, #1
2001805a:	68fb      	ldr	r3, [r7, #12]
2001805c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
2001805e:	68fb      	ldr	r3, [r7, #12]
20018060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20018062:	b29b      	uxth	r3, r3
20018064:	3b01      	subs	r3, #1
20018066:	b29a      	uxth	r2, r3
20018068:	68fb      	ldr	r3, [r7, #12]
2001806a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
2001806c:	e057      	b.n	2001811e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
2001806e:	68fb      	ldr	r3, [r7, #12]
20018070:	681b      	ldr	r3, [r3, #0]
20018072:	689b      	ldr	r3, [r3, #8]
20018074:	f003 0302 	and.w	r3, r3, #2
20018078:	2b02      	cmp	r3, #2
2001807a:	d11c      	bne.n	200180b6 <HAL_SPI_TransmitReceive+0x26c>
2001807c:	68fb      	ldr	r3, [r7, #12]
2001807e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20018080:	b29b      	uxth	r3, r3
20018082:	2b00      	cmp	r3, #0
20018084:	d017      	beq.n	200180b6 <HAL_SPI_TransmitReceive+0x26c>
20018086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20018088:	2b01      	cmp	r3, #1
2001808a:	d114      	bne.n	200180b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
2001808c:	68fb      	ldr	r3, [r7, #12]
2001808e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20018090:	68fb      	ldr	r3, [r7, #12]
20018092:	681b      	ldr	r3, [r3, #0]
20018094:	330c      	adds	r3, #12
20018096:	7812      	ldrb	r2, [r2, #0]
20018098:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
2001809a:	68fb      	ldr	r3, [r7, #12]
2001809c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2001809e:	1c5a      	adds	r2, r3, #1
200180a0:	68fb      	ldr	r3, [r7, #12]
200180a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
200180a4:	68fb      	ldr	r3, [r7, #12]
200180a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200180a8:	b29b      	uxth	r3, r3
200180aa:	3b01      	subs	r3, #1
200180ac:	b29a      	uxth	r2, r3
200180ae:	68fb      	ldr	r3, [r7, #12]
200180b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
200180b2:	2300      	movs	r3, #0
200180b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
200180b6:	68fb      	ldr	r3, [r7, #12]
200180b8:	681b      	ldr	r3, [r3, #0]
200180ba:	689b      	ldr	r3, [r3, #8]
200180bc:	f003 0301 	and.w	r3, r3, #1
200180c0:	2b01      	cmp	r3, #1
200180c2:	d119      	bne.n	200180f8 <HAL_SPI_TransmitReceive+0x2ae>
200180c4:	68fb      	ldr	r3, [r7, #12]
200180c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200180c8:	b29b      	uxth	r3, r3
200180ca:	2b00      	cmp	r3, #0
200180cc:	d014      	beq.n	200180f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
200180ce:	68fb      	ldr	r3, [r7, #12]
200180d0:	681b      	ldr	r3, [r3, #0]
200180d2:	68da      	ldr	r2, [r3, #12]
200180d4:	68fb      	ldr	r3, [r7, #12]
200180d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200180d8:	b2d2      	uxtb	r2, r2
200180da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
200180dc:	68fb      	ldr	r3, [r7, #12]
200180de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200180e0:	1c5a      	adds	r2, r3, #1
200180e2:	68fb      	ldr	r3, [r7, #12]
200180e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
200180e6:	68fb      	ldr	r3, [r7, #12]
200180e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200180ea:	b29b      	uxth	r3, r3
200180ec:	3b01      	subs	r3, #1
200180ee:	b29a      	uxth	r2, r3
200180f0:	68fb      	ldr	r3, [r7, #12]
200180f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
200180f4:	2301      	movs	r3, #1
200180f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
200180f8:	f7f8 fd54 	bl	20010ba4 <HAL_GetTick>
200180fc:	4602      	mov	r2, r0
200180fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20018100:	1ad3      	subs	r3, r2, r3
20018102:	6bba      	ldr	r2, [r7, #56]	; 0x38
20018104:	429a      	cmp	r2, r3
20018106:	d803      	bhi.n	20018110 <HAL_SPI_TransmitReceive+0x2c6>
20018108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2001810a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
2001810e:	d102      	bne.n	20018116 <HAL_SPI_TransmitReceive+0x2cc>
20018110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20018112:	2b00      	cmp	r3, #0
20018114:	d103      	bne.n	2001811e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
20018116:	2303      	movs	r3, #3
20018118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
2001811c:	e029      	b.n	20018172 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
2001811e:	68fb      	ldr	r3, [r7, #12]
20018120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20018122:	b29b      	uxth	r3, r3
20018124:	2b00      	cmp	r3, #0
20018126:	d1a2      	bne.n	2001806e <HAL_SPI_TransmitReceive+0x224>
20018128:	68fb      	ldr	r3, [r7, #12]
2001812a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2001812c:	b29b      	uxth	r3, r3
2001812e:	2b00      	cmp	r3, #0
20018130:	d19d      	bne.n	2001806e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20018132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20018134:	6bb9      	ldr	r1, [r7, #56]	; 0x38
20018136:	68f8      	ldr	r0, [r7, #12]
20018138:	f001 fc50 	bl	200199dc <SPI_EndRxTxTransaction>
2001813c:	4603      	mov	r3, r0
2001813e:	2b00      	cmp	r3, #0
20018140:	d006      	beq.n	20018150 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
20018142:	2301      	movs	r3, #1
20018144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20018148:	68fb      	ldr	r3, [r7, #12]
2001814a:	2220      	movs	r2, #32
2001814c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
2001814e:	e010      	b.n	20018172 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20018150:	68fb      	ldr	r3, [r7, #12]
20018152:	689b      	ldr	r3, [r3, #8]
20018154:	2b00      	cmp	r3, #0
20018156:	d10b      	bne.n	20018170 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20018158:	2300      	movs	r3, #0
2001815a:	617b      	str	r3, [r7, #20]
2001815c:	68fb      	ldr	r3, [r7, #12]
2001815e:	681b      	ldr	r3, [r3, #0]
20018160:	68db      	ldr	r3, [r3, #12]
20018162:	617b      	str	r3, [r7, #20]
20018164:	68fb      	ldr	r3, [r7, #12]
20018166:	681b      	ldr	r3, [r3, #0]
20018168:	689b      	ldr	r3, [r3, #8]
2001816a:	617b      	str	r3, [r7, #20]
2001816c:	697b      	ldr	r3, [r7, #20]
2001816e:	e000      	b.n	20018172 <HAL_SPI_TransmitReceive+0x328>
  }

error :
20018170:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
20018172:	68fb      	ldr	r3, [r7, #12]
20018174:	2201      	movs	r2, #1
20018176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
2001817a:	68fb      	ldr	r3, [r7, #12]
2001817c:	2200      	movs	r2, #0
2001817e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20018182:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
20018186:	4618      	mov	r0, r3
20018188:	3730      	adds	r7, #48	; 0x30
2001818a:	46bd      	mov	sp, r7
2001818c:	bd80      	pop	{r7, pc}
	...

20018190 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20018190:	b480      	push	{r7}
20018192:	b087      	sub	sp, #28
20018194:	af00      	add	r7, sp, #0
20018196:	60f8      	str	r0, [r7, #12]
20018198:	60b9      	str	r1, [r7, #8]
2001819a:	4613      	mov	r3, r2
2001819c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
2001819e:	2300      	movs	r3, #0
200181a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
200181a2:	68fb      	ldr	r3, [r7, #12]
200181a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200181a8:	2b01      	cmp	r3, #1
200181aa:	d101      	bne.n	200181b0 <HAL_SPI_Transmit_IT+0x20>
200181ac:	2302      	movs	r3, #2
200181ae:	e067      	b.n	20018280 <HAL_SPI_Transmit_IT+0xf0>
200181b0:	68fb      	ldr	r3, [r7, #12]
200181b2:	2201      	movs	r2, #1
200181b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
200181b8:	68bb      	ldr	r3, [r7, #8]
200181ba:	2b00      	cmp	r3, #0
200181bc:	d002      	beq.n	200181c4 <HAL_SPI_Transmit_IT+0x34>
200181be:	88fb      	ldrh	r3, [r7, #6]
200181c0:	2b00      	cmp	r3, #0
200181c2:	d102      	bne.n	200181ca <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
200181c4:	2301      	movs	r3, #1
200181c6:	75fb      	strb	r3, [r7, #23]
    goto error;
200181c8:	e055      	b.n	20018276 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
200181ca:	68fb      	ldr	r3, [r7, #12]
200181cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200181d0:	b2db      	uxtb	r3, r3
200181d2:	2b01      	cmp	r3, #1
200181d4:	d002      	beq.n	200181dc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
200181d6:	2302      	movs	r3, #2
200181d8:	75fb      	strb	r3, [r7, #23]
    goto error;
200181da:	e04c      	b.n	20018276 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
200181dc:	68fb      	ldr	r3, [r7, #12]
200181de:	2203      	movs	r2, #3
200181e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200181e4:	68fb      	ldr	r3, [r7, #12]
200181e6:	2200      	movs	r2, #0
200181e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
200181ea:	68fb      	ldr	r3, [r7, #12]
200181ec:	68ba      	ldr	r2, [r7, #8]
200181ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
200181f0:	68fb      	ldr	r3, [r7, #12]
200181f2:	88fa      	ldrh	r2, [r7, #6]
200181f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
200181f6:	68fb      	ldr	r3, [r7, #12]
200181f8:	88fa      	ldrh	r2, [r7, #6]
200181fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
200181fc:	68fb      	ldr	r3, [r7, #12]
200181fe:	2200      	movs	r2, #0
20018200:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
20018202:	68fb      	ldr	r3, [r7, #12]
20018204:	2200      	movs	r2, #0
20018206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
20018208:	68fb      	ldr	r3, [r7, #12]
2001820a:	2200      	movs	r2, #0
2001820c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
2001820e:	68fb      	ldr	r3, [r7, #12]
20018210:	2200      	movs	r2, #0
20018212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20018214:	68fb      	ldr	r3, [r7, #12]
20018216:	68db      	ldr	r3, [r3, #12]
20018218:	2b00      	cmp	r3, #0
2001821a:	d003      	beq.n	20018224 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
2001821c:	68fb      	ldr	r3, [r7, #12]
2001821e:	4a1b      	ldr	r2, [pc, #108]	; (2001828c <HAL_SPI_Transmit_IT+0xfc>)
20018220:	645a      	str	r2, [r3, #68]	; 0x44
20018222:	e002      	b.n	2001822a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
20018224:	68fb      	ldr	r3, [r7, #12]
20018226:	4a1a      	ldr	r2, [pc, #104]	; (20018290 <HAL_SPI_Transmit_IT+0x100>)
20018228:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2001822a:	68fb      	ldr	r3, [r7, #12]
2001822c:	689b      	ldr	r3, [r3, #8]
2001822e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20018232:	d107      	bne.n	20018244 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
20018234:	68fb      	ldr	r3, [r7, #12]
20018236:	681b      	ldr	r3, [r3, #0]
20018238:	681a      	ldr	r2, [r3, #0]
2001823a:	68fb      	ldr	r3, [r7, #12]
2001823c:	681b      	ldr	r3, [r3, #0]
2001823e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20018242:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
20018244:	68fb      	ldr	r3, [r7, #12]
20018246:	681b      	ldr	r3, [r3, #0]
20018248:	685a      	ldr	r2, [r3, #4]
2001824a:	68fb      	ldr	r3, [r7, #12]
2001824c:	681b      	ldr	r3, [r3, #0]
2001824e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
20018252:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20018254:	68fb      	ldr	r3, [r7, #12]
20018256:	681b      	ldr	r3, [r3, #0]
20018258:	681b      	ldr	r3, [r3, #0]
2001825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2001825e:	2b40      	cmp	r3, #64	; 0x40
20018260:	d008      	beq.n	20018274 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20018262:	68fb      	ldr	r3, [r7, #12]
20018264:	681b      	ldr	r3, [r3, #0]
20018266:	681a      	ldr	r2, [r3, #0]
20018268:	68fb      	ldr	r3, [r7, #12]
2001826a:	681b      	ldr	r3, [r3, #0]
2001826c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20018270:	601a      	str	r2, [r3, #0]
20018272:	e000      	b.n	20018276 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
20018274:	bf00      	nop
  __HAL_UNLOCK(hspi);
20018276:	68fb      	ldr	r3, [r7, #12]
20018278:	2200      	movs	r2, #0
2001827a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
2001827e:	7dfb      	ldrb	r3, [r7, #23]
}
20018280:	4618      	mov	r0, r3
20018282:	371c      	adds	r7, #28
20018284:	46bd      	mov	sp, r7
20018286:	f85d 7b04 	ldr.w	r7, [sp], #4
2001828a:	4770      	bx	lr
2001828c:	200197f9 	.word	0x200197f9
20018290:	200197b3 	.word	0x200197b3

20018294 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20018294:	b580      	push	{r7, lr}
20018296:	b086      	sub	sp, #24
20018298:	af00      	add	r7, sp, #0
2001829a:	60f8      	str	r0, [r7, #12]
2001829c:	60b9      	str	r1, [r7, #8]
2001829e:	4613      	mov	r3, r2
200182a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
200182a2:	2300      	movs	r3, #0
200182a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
200182a6:	68fb      	ldr	r3, [r7, #12]
200182a8:	689b      	ldr	r3, [r3, #8]
200182aa:	2b00      	cmp	r3, #0
200182ac:	d110      	bne.n	200182d0 <HAL_SPI_Receive_IT+0x3c>
200182ae:	68fb      	ldr	r3, [r7, #12]
200182b0:	685b      	ldr	r3, [r3, #4]
200182b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
200182b6:	d10b      	bne.n	200182d0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
200182b8:	68fb      	ldr	r3, [r7, #12]
200182ba:	2204      	movs	r2, #4
200182bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
200182c0:	88fb      	ldrh	r3, [r7, #6]
200182c2:	68ba      	ldr	r2, [r7, #8]
200182c4:	68b9      	ldr	r1, [r7, #8]
200182c6:	68f8      	ldr	r0, [r7, #12]
200182c8:	f000 f87a 	bl	200183c0 <HAL_SPI_TransmitReceive_IT>
200182cc:	4603      	mov	r3, r0
200182ce:	e06e      	b.n	200183ae <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
200182d0:	68fb      	ldr	r3, [r7, #12]
200182d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200182d6:	2b01      	cmp	r3, #1
200182d8:	d101      	bne.n	200182de <HAL_SPI_Receive_IT+0x4a>
200182da:	2302      	movs	r3, #2
200182dc:	e067      	b.n	200183ae <HAL_SPI_Receive_IT+0x11a>
200182de:	68fb      	ldr	r3, [r7, #12]
200182e0:	2201      	movs	r2, #1
200182e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
200182e6:	68fb      	ldr	r3, [r7, #12]
200182e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200182ec:	b2db      	uxtb	r3, r3
200182ee:	2b01      	cmp	r3, #1
200182f0:	d002      	beq.n	200182f8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
200182f2:	2302      	movs	r3, #2
200182f4:	75fb      	strb	r3, [r7, #23]
    goto error;
200182f6:	e055      	b.n	200183a4 <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
200182f8:	68bb      	ldr	r3, [r7, #8]
200182fa:	2b00      	cmp	r3, #0
200182fc:	d002      	beq.n	20018304 <HAL_SPI_Receive_IT+0x70>
200182fe:	88fb      	ldrh	r3, [r7, #6]
20018300:	2b00      	cmp	r3, #0
20018302:	d102      	bne.n	2001830a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
20018304:	2301      	movs	r3, #1
20018306:	75fb      	strb	r3, [r7, #23]
    goto error;
20018308:	e04c      	b.n	200183a4 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2001830a:	68fb      	ldr	r3, [r7, #12]
2001830c:	2204      	movs	r2, #4
2001830e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20018312:	68fb      	ldr	r3, [r7, #12]
20018314:	2200      	movs	r2, #0
20018316:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
20018318:	68fb      	ldr	r3, [r7, #12]
2001831a:	68ba      	ldr	r2, [r7, #8]
2001831c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
2001831e:	68fb      	ldr	r3, [r7, #12]
20018320:	88fa      	ldrh	r2, [r7, #6]
20018322:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20018324:	68fb      	ldr	r3, [r7, #12]
20018326:	88fa      	ldrh	r2, [r7, #6]
20018328:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
2001832a:	68fb      	ldr	r3, [r7, #12]
2001832c:	2200      	movs	r2, #0
2001832e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
20018330:	68fb      	ldr	r3, [r7, #12]
20018332:	2200      	movs	r2, #0
20018334:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
20018336:	68fb      	ldr	r3, [r7, #12]
20018338:	2200      	movs	r2, #0
2001833a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
2001833c:	68fb      	ldr	r3, [r7, #12]
2001833e:	2200      	movs	r2, #0
20018340:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20018342:	68fb      	ldr	r3, [r7, #12]
20018344:	68db      	ldr	r3, [r3, #12]
20018346:	2b00      	cmp	r3, #0
20018348:	d003      	beq.n	20018352 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
2001834a:	68fb      	ldr	r3, [r7, #12]
2001834c:	4a1a      	ldr	r2, [pc, #104]	; (200183b8 <HAL_SPI_Receive_IT+0x124>)
2001834e:	641a      	str	r2, [r3, #64]	; 0x40
20018350:	e002      	b.n	20018358 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
20018352:	68fb      	ldr	r3, [r7, #12]
20018354:	4a19      	ldr	r2, [pc, #100]	; (200183bc <HAL_SPI_Receive_IT+0x128>)
20018356:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20018358:	68fb      	ldr	r3, [r7, #12]
2001835a:	689b      	ldr	r3, [r3, #8]
2001835c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20018360:	d107      	bne.n	20018372 <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
20018362:	68fb      	ldr	r3, [r7, #12]
20018364:	681b      	ldr	r3, [r3, #0]
20018366:	681a      	ldr	r2, [r3, #0]
20018368:	68fb      	ldr	r3, [r7, #12]
2001836a:	681b      	ldr	r3, [r3, #0]
2001836c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20018370:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
20018372:	68fb      	ldr	r3, [r7, #12]
20018374:	681b      	ldr	r3, [r3, #0]
20018376:	685a      	ldr	r2, [r3, #4]
20018378:	68fb      	ldr	r3, [r7, #12]
2001837a:	681b      	ldr	r3, [r3, #0]
2001837c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
20018380:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20018382:	68fb      	ldr	r3, [r7, #12]
20018384:	681b      	ldr	r3, [r3, #0]
20018386:	681b      	ldr	r3, [r3, #0]
20018388:	f003 0340 	and.w	r3, r3, #64	; 0x40
2001838c:	2b40      	cmp	r3, #64	; 0x40
2001838e:	d008      	beq.n	200183a2 <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20018390:	68fb      	ldr	r3, [r7, #12]
20018392:	681b      	ldr	r3, [r3, #0]
20018394:	681a      	ldr	r2, [r3, #0]
20018396:	68fb      	ldr	r3, [r7, #12]
20018398:	681b      	ldr	r3, [r3, #0]
2001839a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2001839e:	601a      	str	r2, [r3, #0]
200183a0:	e000      	b.n	200183a4 <HAL_SPI_Receive_IT+0x110>
  }

error :
200183a2:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
200183a4:	68fb      	ldr	r3, [r7, #12]
200183a6:	2200      	movs	r2, #0
200183a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200183ac:	7dfb      	ldrb	r3, [r7, #23]
}
200183ae:	4618      	mov	r0, r3
200183b0:	3718      	adds	r7, #24
200183b2:	46bd      	mov	sp, r7
200183b4:	bd80      	pop	{r7, pc}
200183b6:	bf00      	nop
200183b8:	2001976d 	.word	0x2001976d
200183bc:	20019723 	.word	0x20019723

200183c0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
200183c0:	b480      	push	{r7}
200183c2:	b087      	sub	sp, #28
200183c4:	af00      	add	r7, sp, #0
200183c6:	60f8      	str	r0, [r7, #12]
200183c8:	60b9      	str	r1, [r7, #8]
200183ca:	607a      	str	r2, [r7, #4]
200183cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
200183ce:	2300      	movs	r3, #0
200183d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
200183d2:	68fb      	ldr	r3, [r7, #12]
200183d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200183d8:	2b01      	cmp	r3, #1
200183da:	d101      	bne.n	200183e0 <HAL_SPI_TransmitReceive_IT+0x20>
200183dc:	2302      	movs	r3, #2
200183de:	e075      	b.n	200184cc <HAL_SPI_TransmitReceive_IT+0x10c>
200183e0:	68fb      	ldr	r3, [r7, #12]
200183e2:	2201      	movs	r2, #1
200183e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
200183e8:	68fb      	ldr	r3, [r7, #12]
200183ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200183ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
200183f0:	68fb      	ldr	r3, [r7, #12]
200183f2:	685b      	ldr	r3, [r3, #4]
200183f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
200183f6:	7dbb      	ldrb	r3, [r7, #22]
200183f8:	2b01      	cmp	r3, #1
200183fa:	d00d      	beq.n	20018418 <HAL_SPI_TransmitReceive_IT+0x58>
200183fc:	693b      	ldr	r3, [r7, #16]
200183fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20018402:	d106      	bne.n	20018412 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
20018404:	68fb      	ldr	r3, [r7, #12]
20018406:	689b      	ldr	r3, [r3, #8]
20018408:	2b00      	cmp	r3, #0
2001840a:	d102      	bne.n	20018412 <HAL_SPI_TransmitReceive_IT+0x52>
2001840c:	7dbb      	ldrb	r3, [r7, #22]
2001840e:	2b04      	cmp	r3, #4
20018410:	d002      	beq.n	20018418 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
20018412:	2302      	movs	r3, #2
20018414:	75fb      	strb	r3, [r7, #23]
    goto error;
20018416:	e054      	b.n	200184c2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
20018418:	68bb      	ldr	r3, [r7, #8]
2001841a:	2b00      	cmp	r3, #0
2001841c:	d005      	beq.n	2001842a <HAL_SPI_TransmitReceive_IT+0x6a>
2001841e:	687b      	ldr	r3, [r7, #4]
20018420:	2b00      	cmp	r3, #0
20018422:	d002      	beq.n	2001842a <HAL_SPI_TransmitReceive_IT+0x6a>
20018424:	887b      	ldrh	r3, [r7, #2]
20018426:	2b00      	cmp	r3, #0
20018428:	d102      	bne.n	20018430 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
2001842a:	2301      	movs	r3, #1
2001842c:	75fb      	strb	r3, [r7, #23]
    goto error;
2001842e:	e048      	b.n	200184c2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20018430:	68fb      	ldr	r3, [r7, #12]
20018432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20018436:	b2db      	uxtb	r3, r3
20018438:	2b04      	cmp	r3, #4
2001843a:	d003      	beq.n	20018444 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
2001843c:	68fb      	ldr	r3, [r7, #12]
2001843e:	2205      	movs	r2, #5
20018440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20018444:	68fb      	ldr	r3, [r7, #12]
20018446:	2200      	movs	r2, #0
20018448:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
2001844a:	68fb      	ldr	r3, [r7, #12]
2001844c:	68ba      	ldr	r2, [r7, #8]
2001844e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20018450:	68fb      	ldr	r3, [r7, #12]
20018452:	887a      	ldrh	r2, [r7, #2]
20018454:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20018456:	68fb      	ldr	r3, [r7, #12]
20018458:	887a      	ldrh	r2, [r7, #2]
2001845a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2001845c:	68fb      	ldr	r3, [r7, #12]
2001845e:	687a      	ldr	r2, [r7, #4]
20018460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20018462:	68fb      	ldr	r3, [r7, #12]
20018464:	887a      	ldrh	r2, [r7, #2]
20018466:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20018468:	68fb      	ldr	r3, [r7, #12]
2001846a:	887a      	ldrh	r2, [r7, #2]
2001846c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2001846e:	68fb      	ldr	r3, [r7, #12]
20018470:	68db      	ldr	r3, [r3, #12]
20018472:	2b00      	cmp	r3, #0
20018474:	d006      	beq.n	20018484 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
20018476:	68fb      	ldr	r3, [r7, #12]
20018478:	4a17      	ldr	r2, [pc, #92]	; (200184d8 <HAL_SPI_TransmitReceive_IT+0x118>)
2001847a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
2001847c:	68fb      	ldr	r3, [r7, #12]
2001847e:	4a17      	ldr	r2, [pc, #92]	; (200184dc <HAL_SPI_TransmitReceive_IT+0x11c>)
20018480:	645a      	str	r2, [r3, #68]	; 0x44
20018482:	e005      	b.n	20018490 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
20018484:	68fb      	ldr	r3, [r7, #12]
20018486:	4a16      	ldr	r2, [pc, #88]	; (200184e0 <HAL_SPI_TransmitReceive_IT+0x120>)
20018488:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
2001848a:	68fb      	ldr	r3, [r7, #12]
2001848c:	4a15      	ldr	r2, [pc, #84]	; (200184e4 <HAL_SPI_TransmitReceive_IT+0x124>)
2001848e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
20018490:	68fb      	ldr	r3, [r7, #12]
20018492:	681b      	ldr	r3, [r3, #0]
20018494:	685a      	ldr	r2, [r3, #4]
20018496:	68fb      	ldr	r3, [r7, #12]
20018498:	681b      	ldr	r3, [r3, #0]
2001849a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
2001849e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
200184a0:	68fb      	ldr	r3, [r7, #12]
200184a2:	681b      	ldr	r3, [r3, #0]
200184a4:	681b      	ldr	r3, [r3, #0]
200184a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
200184aa:	2b40      	cmp	r3, #64	; 0x40
200184ac:	d008      	beq.n	200184c0 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
200184ae:	68fb      	ldr	r3, [r7, #12]
200184b0:	681b      	ldr	r3, [r3, #0]
200184b2:	681a      	ldr	r2, [r3, #0]
200184b4:	68fb      	ldr	r3, [r7, #12]
200184b6:	681b      	ldr	r3, [r3, #0]
200184b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
200184bc:	601a      	str	r2, [r3, #0]
200184be:	e000      	b.n	200184c2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
200184c0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
200184c2:	68fb      	ldr	r3, [r7, #12]
200184c4:	2200      	movs	r2, #0
200184c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200184ca:	7dfb      	ldrb	r3, [r7, #23]
}
200184cc:	4618      	mov	r0, r3
200184ce:	371c      	adds	r7, #28
200184d0:	46bd      	mov	sp, r7
200184d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200184d6:	4770      	bx	lr
200184d8:	20019665 	.word	0x20019665
200184dc:	200196c5 	.word	0x200196c5
200184e0:	200195a1 	.word	0x200195a1
200184e4:	20019605 	.word	0x20019605

200184e8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
200184e8:	b580      	push	{r7, lr}
200184ea:	b086      	sub	sp, #24
200184ec:	af00      	add	r7, sp, #0
200184ee:	60f8      	str	r0, [r7, #12]
200184f0:	60b9      	str	r1, [r7, #8]
200184f2:	4613      	mov	r3, r2
200184f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
200184f6:	2300      	movs	r3, #0
200184f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
200184fa:	68fb      	ldr	r3, [r7, #12]
200184fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20018500:	2b01      	cmp	r3, #1
20018502:	d101      	bne.n	20018508 <HAL_SPI_Transmit_DMA+0x20>
20018504:	2302      	movs	r3, #2
20018506:	e093      	b.n	20018630 <HAL_SPI_Transmit_DMA+0x148>
20018508:	68fb      	ldr	r3, [r7, #12]
2001850a:	2201      	movs	r2, #1
2001850c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
20018510:	68fb      	ldr	r3, [r7, #12]
20018512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20018516:	b2db      	uxtb	r3, r3
20018518:	2b01      	cmp	r3, #1
2001851a:	d002      	beq.n	20018522 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
2001851c:	2302      	movs	r3, #2
2001851e:	75fb      	strb	r3, [r7, #23]
    goto error;
20018520:	e081      	b.n	20018626 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
20018522:	68bb      	ldr	r3, [r7, #8]
20018524:	2b00      	cmp	r3, #0
20018526:	d002      	beq.n	2001852e <HAL_SPI_Transmit_DMA+0x46>
20018528:	88fb      	ldrh	r3, [r7, #6]
2001852a:	2b00      	cmp	r3, #0
2001852c:	d102      	bne.n	20018534 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
2001852e:	2301      	movs	r3, #1
20018530:	75fb      	strb	r3, [r7, #23]
    goto error;
20018532:	e078      	b.n	20018626 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
20018534:	68fb      	ldr	r3, [r7, #12]
20018536:	2203      	movs	r2, #3
20018538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2001853c:	68fb      	ldr	r3, [r7, #12]
2001853e:	2200      	movs	r2, #0
20018540:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
20018542:	68fb      	ldr	r3, [r7, #12]
20018544:	68ba      	ldr	r2, [r7, #8]
20018546:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20018548:	68fb      	ldr	r3, [r7, #12]
2001854a:	88fa      	ldrh	r2, [r7, #6]
2001854c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
2001854e:	68fb      	ldr	r3, [r7, #12]
20018550:	88fa      	ldrh	r2, [r7, #6]
20018552:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
20018554:	68fb      	ldr	r3, [r7, #12]
20018556:	2200      	movs	r2, #0
20018558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
2001855a:	68fb      	ldr	r3, [r7, #12]
2001855c:	2200      	movs	r2, #0
2001855e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
20018560:	68fb      	ldr	r3, [r7, #12]
20018562:	2200      	movs	r2, #0
20018564:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
20018566:	68fb      	ldr	r3, [r7, #12]
20018568:	2200      	movs	r2, #0
2001856a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
2001856c:	68fb      	ldr	r3, [r7, #12]
2001856e:	2200      	movs	r2, #0
20018570:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20018572:	68fb      	ldr	r3, [r7, #12]
20018574:	689b      	ldr	r3, [r3, #8]
20018576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2001857a:	d107      	bne.n	2001858c <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
2001857c:	68fb      	ldr	r3, [r7, #12]
2001857e:	681b      	ldr	r3, [r3, #0]
20018580:	681a      	ldr	r2, [r3, #0]
20018582:	68fb      	ldr	r3, [r7, #12]
20018584:	681b      	ldr	r3, [r3, #0]
20018586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2001858a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
2001858c:	68fb      	ldr	r3, [r7, #12]
2001858e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018590:	4a29      	ldr	r2, [pc, #164]	; (20018638 <HAL_SPI_Transmit_DMA+0x150>)
20018592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
20018594:	68fb      	ldr	r3, [r7, #12]
20018596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018598:	4a28      	ldr	r2, [pc, #160]	; (2001863c <HAL_SPI_Transmit_DMA+0x154>)
2001859a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
2001859c:	68fb      	ldr	r3, [r7, #12]
2001859e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200185a0:	4a27      	ldr	r2, [pc, #156]	; (20018640 <HAL_SPI_Transmit_DMA+0x158>)
200185a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
200185a4:	68fb      	ldr	r3, [r7, #12]
200185a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200185a8:	2200      	movs	r2, #0
200185aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
200185ac:	68fb      	ldr	r3, [r7, #12]
200185ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
200185b0:	68fb      	ldr	r3, [r7, #12]
200185b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200185b4:	4619      	mov	r1, r3
200185b6:	68fb      	ldr	r3, [r7, #12]
200185b8:	681b      	ldr	r3, [r3, #0]
200185ba:	330c      	adds	r3, #12
200185bc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
200185be:	68fb      	ldr	r3, [r7, #12]
200185c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200185c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
200185c4:	f7f9 f8b5 	bl	20011732 <HAL_DMA_Start_IT>
200185c8:	4603      	mov	r3, r0
200185ca:	2b00      	cmp	r3, #0
200185cc:	d00c      	beq.n	200185e8 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
200185ce:	68fb      	ldr	r3, [r7, #12]
200185d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200185d2:	f043 0210 	orr.w	r2, r3, #16
200185d6:	68fb      	ldr	r3, [r7, #12]
200185d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
200185da:	2301      	movs	r3, #1
200185dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
200185de:	68fb      	ldr	r3, [r7, #12]
200185e0:	2201      	movs	r2, #1
200185e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
200185e6:	e01e      	b.n	20018626 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
200185e8:	68fb      	ldr	r3, [r7, #12]
200185ea:	681b      	ldr	r3, [r3, #0]
200185ec:	681b      	ldr	r3, [r3, #0]
200185ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
200185f2:	2b40      	cmp	r3, #64	; 0x40
200185f4:	d007      	beq.n	20018606 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
200185f6:	68fb      	ldr	r3, [r7, #12]
200185f8:	681b      	ldr	r3, [r3, #0]
200185fa:	681a      	ldr	r2, [r3, #0]
200185fc:	68fb      	ldr	r3, [r7, #12]
200185fe:	681b      	ldr	r3, [r3, #0]
20018600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20018604:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20018606:	68fb      	ldr	r3, [r7, #12]
20018608:	681b      	ldr	r3, [r3, #0]
2001860a:	685a      	ldr	r2, [r3, #4]
2001860c:	68fb      	ldr	r3, [r7, #12]
2001860e:	681b      	ldr	r3, [r3, #0]
20018610:	f042 0220 	orr.w	r2, r2, #32
20018614:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20018616:	68fb      	ldr	r3, [r7, #12]
20018618:	681b      	ldr	r3, [r3, #0]
2001861a:	685a      	ldr	r2, [r3, #4]
2001861c:	68fb      	ldr	r3, [r7, #12]
2001861e:	681b      	ldr	r3, [r3, #0]
20018620:	f042 0202 	orr.w	r2, r2, #2
20018624:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20018626:	68fb      	ldr	r3, [r7, #12]
20018628:	2200      	movs	r2, #0
2001862a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
2001862e:	7dfb      	ldrb	r3, [r7, #23]
}
20018630:	4618      	mov	r0, r3
20018632:	3718      	adds	r7, #24
20018634:	46bd      	mov	sp, r7
20018636:	bd80      	pop	{r7, pc}
20018638:	20019351 	.word	0x20019351
2001863c:	20019171 	.word	0x20019171
20018640:	200193a5 	.word	0x200193a5

20018644 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20018644:	b580      	push	{r7, lr}
20018646:	b086      	sub	sp, #24
20018648:	af00      	add	r7, sp, #0
2001864a:	60f8      	str	r0, [r7, #12]
2001864c:	60b9      	str	r1, [r7, #8]
2001864e:	4613      	mov	r3, r2
20018650:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
20018652:	2300      	movs	r3, #0
20018654:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
20018656:	68fb      	ldr	r3, [r7, #12]
20018658:	689b      	ldr	r3, [r3, #8]
2001865a:	2b00      	cmp	r3, #0
2001865c:	d110      	bne.n	20018680 <HAL_SPI_Receive_DMA+0x3c>
2001865e:	68fb      	ldr	r3, [r7, #12]
20018660:	685b      	ldr	r3, [r3, #4]
20018662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20018666:	d10b      	bne.n	20018680 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
20018668:	68fb      	ldr	r3, [r7, #12]
2001866a:	2204      	movs	r2, #4
2001866c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
20018670:	88fb      	ldrh	r3, [r7, #6]
20018672:	68ba      	ldr	r2, [r7, #8]
20018674:	68b9      	ldr	r1, [r7, #8]
20018676:	68f8      	ldr	r0, [r7, #12]
20018678:	f000 f8a4 	bl	200187c4 <HAL_SPI_TransmitReceive_DMA>
2001867c:	4603      	mov	r3, r0
2001867e:	e097      	b.n	200187b0 <HAL_SPI_Receive_DMA+0x16c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
20018680:	68fb      	ldr	r3, [r7, #12]
20018682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20018686:	2b01      	cmp	r3, #1
20018688:	d101      	bne.n	2001868e <HAL_SPI_Receive_DMA+0x4a>
2001868a:	2302      	movs	r3, #2
2001868c:	e090      	b.n	200187b0 <HAL_SPI_Receive_DMA+0x16c>
2001868e:	68fb      	ldr	r3, [r7, #12]
20018690:	2201      	movs	r2, #1
20018692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
20018696:	68fb      	ldr	r3, [r7, #12]
20018698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2001869c:	b2db      	uxtb	r3, r3
2001869e:	2b01      	cmp	r3, #1
200186a0:	d002      	beq.n	200186a8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
200186a2:	2302      	movs	r3, #2
200186a4:	75fb      	strb	r3, [r7, #23]
    goto error;
200186a6:	e07e      	b.n	200187a6 <HAL_SPI_Receive_DMA+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
200186a8:	68bb      	ldr	r3, [r7, #8]
200186aa:	2b00      	cmp	r3, #0
200186ac:	d002      	beq.n	200186b4 <HAL_SPI_Receive_DMA+0x70>
200186ae:	88fb      	ldrh	r3, [r7, #6]
200186b0:	2b00      	cmp	r3, #0
200186b2:	d102      	bne.n	200186ba <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
200186b4:	2301      	movs	r3, #1
200186b6:	75fb      	strb	r3, [r7, #23]
    goto error;
200186b8:	e075      	b.n	200187a6 <HAL_SPI_Receive_DMA+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
200186ba:	68fb      	ldr	r3, [r7, #12]
200186bc:	2204      	movs	r2, #4
200186be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200186c2:	68fb      	ldr	r3, [r7, #12]
200186c4:	2200      	movs	r2, #0
200186c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
200186c8:	68fb      	ldr	r3, [r7, #12]
200186ca:	68ba      	ldr	r2, [r7, #8]
200186cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
200186ce:	68fb      	ldr	r3, [r7, #12]
200186d0:	88fa      	ldrh	r2, [r7, #6]
200186d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
200186d4:	68fb      	ldr	r3, [r7, #12]
200186d6:	88fa      	ldrh	r2, [r7, #6]
200186d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
200186da:	68fb      	ldr	r3, [r7, #12]
200186dc:	2200      	movs	r2, #0
200186de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
200186e0:	68fb      	ldr	r3, [r7, #12]
200186e2:	2200      	movs	r2, #0
200186e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
200186e6:	68fb      	ldr	r3, [r7, #12]
200186e8:	2200      	movs	r2, #0
200186ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
200186ec:	68fb      	ldr	r3, [r7, #12]
200186ee:	2200      	movs	r2, #0
200186f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
200186f2:	68fb      	ldr	r3, [r7, #12]
200186f4:	689b      	ldr	r3, [r3, #8]
200186f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200186fa:	d107      	bne.n	2001870c <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
200186fc:	68fb      	ldr	r3, [r7, #12]
200186fe:	681b      	ldr	r3, [r3, #0]
20018700:	681a      	ldr	r2, [r3, #0]
20018702:	68fb      	ldr	r3, [r7, #12]
20018704:	681b      	ldr	r3, [r3, #0]
20018706:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2001870a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2001870c:	68fb      	ldr	r3, [r7, #12]
2001870e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018710:	4a29      	ldr	r2, [pc, #164]	; (200187b8 <HAL_SPI_Receive_DMA+0x174>)
20018712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
20018714:	68fb      	ldr	r3, [r7, #12]
20018716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018718:	4a28      	ldr	r2, [pc, #160]	; (200187bc <HAL_SPI_Receive_DMA+0x178>)
2001871a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2001871c:	68fb      	ldr	r3, [r7, #12]
2001871e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018720:	4a27      	ldr	r2, [pc, #156]	; (200187c0 <HAL_SPI_Receive_DMA+0x17c>)
20018722:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
20018724:	68fb      	ldr	r3, [r7, #12]
20018726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018728:	2200      	movs	r2, #0
2001872a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
2001872c:	68fb      	ldr	r3, [r7, #12]
2001872e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
20018730:	68fb      	ldr	r3, [r7, #12]
20018732:	681b      	ldr	r3, [r3, #0]
20018734:	330c      	adds	r3, #12
20018736:	4619      	mov	r1, r3
20018738:	68fb      	ldr	r3, [r7, #12]
2001873a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2001873c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
2001873e:	68fb      	ldr	r3, [r7, #12]
20018740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20018742:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
20018744:	f7f8 fff5 	bl	20011732 <HAL_DMA_Start_IT>
20018748:	4603      	mov	r3, r0
2001874a:	2b00      	cmp	r3, #0
2001874c:	d00c      	beq.n	20018768 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2001874e:	68fb      	ldr	r3, [r7, #12]
20018750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018752:	f043 0210 	orr.w	r2, r3, #16
20018756:	68fb      	ldr	r3, [r7, #12]
20018758:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
2001875a:	2301      	movs	r3, #1
2001875c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
2001875e:	68fb      	ldr	r3, [r7, #12]
20018760:	2201      	movs	r2, #1
20018762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
20018766:	e01e      	b.n	200187a6 <HAL_SPI_Receive_DMA+0x162>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20018768:	68fb      	ldr	r3, [r7, #12]
2001876a:	681b      	ldr	r3, [r3, #0]
2001876c:	681b      	ldr	r3, [r3, #0]
2001876e:	f003 0340 	and.w	r3, r3, #64	; 0x40
20018772:	2b40      	cmp	r3, #64	; 0x40
20018774:	d007      	beq.n	20018786 <HAL_SPI_Receive_DMA+0x142>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20018776:	68fb      	ldr	r3, [r7, #12]
20018778:	681b      	ldr	r3, [r3, #0]
2001877a:	681a      	ldr	r2, [r3, #0]
2001877c:	68fb      	ldr	r3, [r7, #12]
2001877e:	681b      	ldr	r3, [r3, #0]
20018780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20018784:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20018786:	68fb      	ldr	r3, [r7, #12]
20018788:	681b      	ldr	r3, [r3, #0]
2001878a:	685a      	ldr	r2, [r3, #4]
2001878c:	68fb      	ldr	r3, [r7, #12]
2001878e:	681b      	ldr	r3, [r3, #0]
20018790:	f042 0220 	orr.w	r2, r2, #32
20018794:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20018796:	68fb      	ldr	r3, [r7, #12]
20018798:	681b      	ldr	r3, [r3, #0]
2001879a:	685a      	ldr	r2, [r3, #4]
2001879c:	68fb      	ldr	r3, [r7, #12]
2001879e:	681b      	ldr	r3, [r3, #0]
200187a0:	f042 0201 	orr.w	r2, r2, #1
200187a4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
200187a6:	68fb      	ldr	r3, [r7, #12]
200187a8:	2200      	movs	r2, #0
200187aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200187ae:	7dfb      	ldrb	r3, [r7, #23]
}
200187b0:	4618      	mov	r0, r3
200187b2:	3718      	adds	r7, #24
200187b4:	46bd      	mov	sp, r7
200187b6:	bd80      	pop	{r7, pc}
200187b8:	2001936d 	.word	0x2001936d
200187bc:	20019219 	.word	0x20019219
200187c0:	200193a5 	.word	0x200193a5

200187c4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
200187c4:	b580      	push	{r7, lr}
200187c6:	b086      	sub	sp, #24
200187c8:	af00      	add	r7, sp, #0
200187ca:	60f8      	str	r0, [r7, #12]
200187cc:	60b9      	str	r1, [r7, #8]
200187ce:	607a      	str	r2, [r7, #4]
200187d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
200187d2:	2300      	movs	r3, #0
200187d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
200187d6:	68fb      	ldr	r3, [r7, #12]
200187d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200187dc:	2b01      	cmp	r3, #1
200187de:	d101      	bne.n	200187e4 <HAL_SPI_TransmitReceive_DMA+0x20>
200187e0:	2302      	movs	r3, #2
200187e2:	e0e3      	b.n	200189ac <HAL_SPI_TransmitReceive_DMA+0x1e8>
200187e4:	68fb      	ldr	r3, [r7, #12]
200187e6:	2201      	movs	r2, #1
200187e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
200187ec:	68fb      	ldr	r3, [r7, #12]
200187ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200187f2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
200187f4:	68fb      	ldr	r3, [r7, #12]
200187f6:	685b      	ldr	r3, [r3, #4]
200187f8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
200187fa:	7dbb      	ldrb	r3, [r7, #22]
200187fc:	2b01      	cmp	r3, #1
200187fe:	d00d      	beq.n	2001881c <HAL_SPI_TransmitReceive_DMA+0x58>
20018800:	693b      	ldr	r3, [r7, #16]
20018802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20018806:	d106      	bne.n	20018816 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
20018808:	68fb      	ldr	r3, [r7, #12]
2001880a:	689b      	ldr	r3, [r3, #8]
2001880c:	2b00      	cmp	r3, #0
2001880e:	d102      	bne.n	20018816 <HAL_SPI_TransmitReceive_DMA+0x52>
20018810:	7dbb      	ldrb	r3, [r7, #22]
20018812:	2b04      	cmp	r3, #4
20018814:	d002      	beq.n	2001881c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
20018816:	2302      	movs	r3, #2
20018818:	75fb      	strb	r3, [r7, #23]
    goto error;
2001881a:	e0c2      	b.n	200189a2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
2001881c:	68bb      	ldr	r3, [r7, #8]
2001881e:	2b00      	cmp	r3, #0
20018820:	d005      	beq.n	2001882e <HAL_SPI_TransmitReceive_DMA+0x6a>
20018822:	687b      	ldr	r3, [r7, #4]
20018824:	2b00      	cmp	r3, #0
20018826:	d002      	beq.n	2001882e <HAL_SPI_TransmitReceive_DMA+0x6a>
20018828:	887b      	ldrh	r3, [r7, #2]
2001882a:	2b00      	cmp	r3, #0
2001882c:	d102      	bne.n	20018834 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
2001882e:	2301      	movs	r3, #1
20018830:	75fb      	strb	r3, [r7, #23]
    goto error;
20018832:	e0b6      	b.n	200189a2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20018834:	68fb      	ldr	r3, [r7, #12]
20018836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2001883a:	b2db      	uxtb	r3, r3
2001883c:	2b04      	cmp	r3, #4
2001883e:	d003      	beq.n	20018848 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20018840:	68fb      	ldr	r3, [r7, #12]
20018842:	2205      	movs	r2, #5
20018844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20018848:	68fb      	ldr	r3, [r7, #12]
2001884a:	2200      	movs	r2, #0
2001884c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
2001884e:	68fb      	ldr	r3, [r7, #12]
20018850:	68ba      	ldr	r2, [r7, #8]
20018852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20018854:	68fb      	ldr	r3, [r7, #12]
20018856:	887a      	ldrh	r2, [r7, #2]
20018858:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
2001885a:	68fb      	ldr	r3, [r7, #12]
2001885c:	887a      	ldrh	r2, [r7, #2]
2001885e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20018860:	68fb      	ldr	r3, [r7, #12]
20018862:	687a      	ldr	r2, [r7, #4]
20018864:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20018866:	68fb      	ldr	r3, [r7, #12]
20018868:	887a      	ldrh	r2, [r7, #2]
2001886a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
2001886c:	68fb      	ldr	r3, [r7, #12]
2001886e:	887a      	ldrh	r2, [r7, #2]
20018870:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20018872:	68fb      	ldr	r3, [r7, #12]
20018874:	2200      	movs	r2, #0
20018876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20018878:	68fb      	ldr	r3, [r7, #12]
2001887a:	2200      	movs	r2, #0
2001887c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
2001887e:	68fb      	ldr	r3, [r7, #12]
20018880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20018884:	b2db      	uxtb	r3, r3
20018886:	2b04      	cmp	r3, #4
20018888:	d108      	bne.n	2001889c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2001888a:	68fb      	ldr	r3, [r7, #12]
2001888c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2001888e:	4a49      	ldr	r2, [pc, #292]	; (200189b4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
20018890:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
20018892:	68fb      	ldr	r3, [r7, #12]
20018894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018896:	4a48      	ldr	r2, [pc, #288]	; (200189b8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
20018898:	63da      	str	r2, [r3, #60]	; 0x3c
2001889a:	e007      	b.n	200188ac <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2001889c:	68fb      	ldr	r3, [r7, #12]
2001889e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200188a0:	4a46      	ldr	r2, [pc, #280]	; (200189bc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
200188a2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
200188a4:	68fb      	ldr	r3, [r7, #12]
200188a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200188a8:	4a45      	ldr	r2, [pc, #276]	; (200189c0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
200188aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
200188ac:	68fb      	ldr	r3, [r7, #12]
200188ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200188b0:	4a44      	ldr	r2, [pc, #272]	; (200189c4 <HAL_SPI_TransmitReceive_DMA+0x200>)
200188b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
200188b4:	68fb      	ldr	r3, [r7, #12]
200188b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200188b8:	2200      	movs	r2, #0
200188ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
200188bc:	68fb      	ldr	r3, [r7, #12]
200188be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
200188c0:	68fb      	ldr	r3, [r7, #12]
200188c2:	681b      	ldr	r3, [r3, #0]
200188c4:	330c      	adds	r3, #12
200188c6:	4619      	mov	r1, r3
200188c8:	68fb      	ldr	r3, [r7, #12]
200188ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200188cc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
200188ce:	68fb      	ldr	r3, [r7, #12]
200188d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200188d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
200188d4:	f7f8 ff2d 	bl	20011732 <HAL_DMA_Start_IT>
200188d8:	4603      	mov	r3, r0
200188da:	2b00      	cmp	r3, #0
200188dc:	d00c      	beq.n	200188f8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
200188de:	68fb      	ldr	r3, [r7, #12]
200188e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200188e2:	f043 0210 	orr.w	r2, r3, #16
200188e6:	68fb      	ldr	r3, [r7, #12]
200188e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
200188ea:	2301      	movs	r3, #1
200188ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
200188ee:	68fb      	ldr	r3, [r7, #12]
200188f0:	2201      	movs	r2, #1
200188f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
200188f6:	e054      	b.n	200189a2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
200188f8:	68fb      	ldr	r3, [r7, #12]
200188fa:	681b      	ldr	r3, [r3, #0]
200188fc:	685a      	ldr	r2, [r3, #4]
200188fe:	68fb      	ldr	r3, [r7, #12]
20018900:	681b      	ldr	r3, [r3, #0]
20018902:	f042 0201 	orr.w	r2, r2, #1
20018906:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
20018908:	68fb      	ldr	r3, [r7, #12]
2001890a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2001890c:	2200      	movs	r2, #0
2001890e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
20018910:	68fb      	ldr	r3, [r7, #12]
20018912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018914:	2200      	movs	r2, #0
20018916:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
20018918:	68fb      	ldr	r3, [r7, #12]
2001891a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2001891c:	2200      	movs	r2, #0
2001891e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
20018920:	68fb      	ldr	r3, [r7, #12]
20018922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018924:	2200      	movs	r2, #0
20018926:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20018928:	68fb      	ldr	r3, [r7, #12]
2001892a:	6c98      	ldr	r0, [r3, #72]	; 0x48
2001892c:	68fb      	ldr	r3, [r7, #12]
2001892e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20018930:	4619      	mov	r1, r3
20018932:	68fb      	ldr	r3, [r7, #12]
20018934:	681b      	ldr	r3, [r3, #0]
20018936:	330c      	adds	r3, #12
20018938:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
2001893a:	68fb      	ldr	r3, [r7, #12]
2001893c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2001893e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20018940:	f7f8 fef7 	bl	20011732 <HAL_DMA_Start_IT>
20018944:	4603      	mov	r3, r0
20018946:	2b00      	cmp	r3, #0
20018948:	d00c      	beq.n	20018964 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2001894a:	68fb      	ldr	r3, [r7, #12]
2001894c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2001894e:	f043 0210 	orr.w	r2, r3, #16
20018952:	68fb      	ldr	r3, [r7, #12]
20018954:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
20018956:	2301      	movs	r3, #1
20018958:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
2001895a:	68fb      	ldr	r3, [r7, #12]
2001895c:	2201      	movs	r2, #1
2001895e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
20018962:	e01e      	b.n	200189a2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20018964:	68fb      	ldr	r3, [r7, #12]
20018966:	681b      	ldr	r3, [r3, #0]
20018968:	681b      	ldr	r3, [r3, #0]
2001896a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2001896e:	2b40      	cmp	r3, #64	; 0x40
20018970:	d007      	beq.n	20018982 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20018972:	68fb      	ldr	r3, [r7, #12]
20018974:	681b      	ldr	r3, [r3, #0]
20018976:	681a      	ldr	r2, [r3, #0]
20018978:	68fb      	ldr	r3, [r7, #12]
2001897a:	681b      	ldr	r3, [r3, #0]
2001897c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20018980:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20018982:	68fb      	ldr	r3, [r7, #12]
20018984:	681b      	ldr	r3, [r3, #0]
20018986:	685a      	ldr	r2, [r3, #4]
20018988:	68fb      	ldr	r3, [r7, #12]
2001898a:	681b      	ldr	r3, [r3, #0]
2001898c:	f042 0220 	orr.w	r2, r2, #32
20018990:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20018992:	68fb      	ldr	r3, [r7, #12]
20018994:	681b      	ldr	r3, [r3, #0]
20018996:	685a      	ldr	r2, [r3, #4]
20018998:	68fb      	ldr	r3, [r7, #12]
2001899a:	681b      	ldr	r3, [r3, #0]
2001899c:	f042 0202 	orr.w	r2, r2, #2
200189a0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
200189a2:	68fb      	ldr	r3, [r7, #12]
200189a4:	2200      	movs	r2, #0
200189a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200189aa:	7dfb      	ldrb	r3, [r7, #23]
}
200189ac:	4618      	mov	r0, r3
200189ae:	3718      	adds	r7, #24
200189b0:	46bd      	mov	sp, r7
200189b2:	bd80      	pop	{r7, pc}
200189b4:	2001936d 	.word	0x2001936d
200189b8:	20019219 	.word	0x20019219
200189bc:	20019389 	.word	0x20019389
200189c0:	200192c1 	.word	0x200192c1
200189c4:	200193a5 	.word	0x200193a5

200189c8 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
200189c8:	b580      	push	{r7, lr}
200189ca:	b088      	sub	sp, #32
200189cc:	af00      	add	r7, sp, #0
200189ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
200189d0:	2300      	movs	r3, #0
200189d2:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
200189d4:	4b6e      	ldr	r3, [pc, #440]	; (20018b90 <HAL_SPI_Abort+0x1c8>)
200189d6:	681b      	ldr	r3, [r3, #0]
200189d8:	4a6e      	ldr	r2, [pc, #440]	; (20018b94 <HAL_SPI_Abort+0x1cc>)
200189da:	fba2 2303 	umull	r2, r3, r2, r3
200189de:	0a5b      	lsrs	r3, r3, #9
200189e0:	2264      	movs	r2, #100	; 0x64
200189e2:	fb02 f303 	mul.w	r3, r2, r3
200189e6:	617b      	str	r3, [r7, #20]
  count = resetcount;
200189e8:	697b      	ldr	r3, [r7, #20]
200189ea:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
200189ec:	687b      	ldr	r3, [r7, #4]
200189ee:	681b      	ldr	r3, [r3, #0]
200189f0:	685a      	ldr	r2, [r3, #4]
200189f2:	687b      	ldr	r3, [r7, #4]
200189f4:	681b      	ldr	r3, [r3, #0]
200189f6:	f022 0220 	bic.w	r2, r2, #32
200189fa:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
200189fc:	687b      	ldr	r3, [r7, #4]
200189fe:	681b      	ldr	r3, [r3, #0]
20018a00:	685b      	ldr	r3, [r3, #4]
20018a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
20018a06:	2b80      	cmp	r3, #128	; 0x80
20018a08:	d117      	bne.n	20018a3a <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
20018a0a:	687b      	ldr	r3, [r7, #4]
20018a0c:	4a62      	ldr	r2, [pc, #392]	; (20018b98 <HAL_SPI_Abort+0x1d0>)
20018a0e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
20018a10:	69bb      	ldr	r3, [r7, #24]
20018a12:	2b00      	cmp	r3, #0
20018a14:	d106      	bne.n	20018a24 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20018a16:	687b      	ldr	r3, [r7, #4]
20018a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20018a1e:	687b      	ldr	r3, [r7, #4]
20018a20:	655a      	str	r2, [r3, #84]	; 0x54
        break;
20018a22:	e008      	b.n	20018a36 <HAL_SPI_Abort+0x6e>
      }
      count--;
20018a24:	69bb      	ldr	r3, [r7, #24]
20018a26:	3b01      	subs	r3, #1
20018a28:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20018a2a:	687b      	ldr	r3, [r7, #4]
20018a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20018a30:	b2db      	uxtb	r3, r3
20018a32:	2b07      	cmp	r3, #7
20018a34:	d1ec      	bne.n	20018a10 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
20018a36:	697b      	ldr	r3, [r7, #20]
20018a38:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
20018a3a:	687b      	ldr	r3, [r7, #4]
20018a3c:	681b      	ldr	r3, [r3, #0]
20018a3e:	685b      	ldr	r3, [r3, #4]
20018a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
20018a44:	2b40      	cmp	r3, #64	; 0x40
20018a46:	d117      	bne.n	20018a78 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
20018a48:	687b      	ldr	r3, [r7, #4]
20018a4a:	4a54      	ldr	r2, [pc, #336]	; (20018b9c <HAL_SPI_Abort+0x1d4>)
20018a4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
20018a4e:	69bb      	ldr	r3, [r7, #24]
20018a50:	2b00      	cmp	r3, #0
20018a52:	d106      	bne.n	20018a62 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20018a54:	687b      	ldr	r3, [r7, #4]
20018a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018a58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20018a5c:	687b      	ldr	r3, [r7, #4]
20018a5e:	655a      	str	r2, [r3, #84]	; 0x54
        break;
20018a60:	e008      	b.n	20018a74 <HAL_SPI_Abort+0xac>
      }
      count--;
20018a62:	69bb      	ldr	r3, [r7, #24]
20018a64:	3b01      	subs	r3, #1
20018a66:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20018a68:	687b      	ldr	r3, [r7, #4]
20018a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20018a6e:	b2db      	uxtb	r3, r3
20018a70:	2b07      	cmp	r3, #7
20018a72:	d1ec      	bne.n	20018a4e <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
20018a74:	697b      	ldr	r3, [r7, #20]
20018a76:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
20018a78:	687b      	ldr	r3, [r7, #4]
20018a7a:	681b      	ldr	r3, [r3, #0]
20018a7c:	685b      	ldr	r3, [r3, #4]
20018a7e:	f003 0302 	and.w	r3, r3, #2
20018a82:	2b02      	cmp	r3, #2
20018a84:	d12e      	bne.n	20018ae4 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
20018a86:	687b      	ldr	r3, [r7, #4]
20018a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018a8a:	2b00      	cmp	r3, #0
20018a8c:	d02a      	beq.n	20018ae4 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
20018a8e:	687b      	ldr	r3, [r7, #4]
20018a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018a92:	2200      	movs	r2, #0
20018a94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
20018a96:	687b      	ldr	r3, [r7, #4]
20018a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018a9a:	4618      	mov	r0, r3
20018a9c:	f7f8 fea1 	bl	200117e2 <HAL_DMA_Abort>
20018aa0:	4603      	mov	r3, r0
20018aa2:	2b00      	cmp	r3, #0
20018aa4:	d002      	beq.n	20018aac <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20018aa6:	687b      	ldr	r3, [r7, #4]
20018aa8:	2240      	movs	r2, #64	; 0x40
20018aaa:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
20018aac:	687b      	ldr	r3, [r7, #4]
20018aae:	681b      	ldr	r3, [r3, #0]
20018ab0:	685a      	ldr	r2, [r3, #4]
20018ab2:	687b      	ldr	r3, [r7, #4]
20018ab4:	681b      	ldr	r3, [r3, #0]
20018ab6:	f022 0202 	bic.w	r2, r2, #2
20018aba:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
20018abc:	69bb      	ldr	r3, [r7, #24]
20018abe:	2b00      	cmp	r3, #0
20018ac0:	d106      	bne.n	20018ad0 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20018ac2:	687b      	ldr	r3, [r7, #4]
20018ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018ac6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20018aca:	687b      	ldr	r3, [r7, #4]
20018acc:	655a      	str	r2, [r3, #84]	; 0x54
          break;
20018ace:	e009      	b.n	20018ae4 <HAL_SPI_Abort+0x11c>
        }
        count--;
20018ad0:	69bb      	ldr	r3, [r7, #24]
20018ad2:	3b01      	subs	r3, #1
20018ad4:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20018ad6:	687b      	ldr	r3, [r7, #4]
20018ad8:	681b      	ldr	r3, [r3, #0]
20018ada:	689b      	ldr	r3, [r3, #8]
20018adc:	f003 0302 	and.w	r3, r3, #2
20018ae0:	2b00      	cmp	r3, #0
20018ae2:	d0eb      	beq.n	20018abc <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
20018ae4:	687b      	ldr	r3, [r7, #4]
20018ae6:	681b      	ldr	r3, [r3, #0]
20018ae8:	685b      	ldr	r3, [r3, #4]
20018aea:	f003 0301 	and.w	r3, r3, #1
20018aee:	2b01      	cmp	r3, #1
20018af0:	d122      	bne.n	20018b38 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
20018af2:	687b      	ldr	r3, [r7, #4]
20018af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018af6:	2b00      	cmp	r3, #0
20018af8:	d01e      	beq.n	20018b38 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
20018afa:	687b      	ldr	r3, [r7, #4]
20018afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018afe:	2200      	movs	r2, #0
20018b00:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
20018b02:	687b      	ldr	r3, [r7, #4]
20018b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018b06:	4618      	mov	r0, r3
20018b08:	f7f8 fe6b 	bl	200117e2 <HAL_DMA_Abort>
20018b0c:	4603      	mov	r3, r0
20018b0e:	2b00      	cmp	r3, #0
20018b10:	d002      	beq.n	20018b18 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20018b12:	687b      	ldr	r3, [r7, #4]
20018b14:	2240      	movs	r2, #64	; 0x40
20018b16:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
20018b18:	687b      	ldr	r3, [r7, #4]
20018b1a:	681b      	ldr	r3, [r3, #0]
20018b1c:	681a      	ldr	r2, [r3, #0]
20018b1e:	687b      	ldr	r3, [r7, #4]
20018b20:	681b      	ldr	r3, [r3, #0]
20018b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20018b26:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
20018b28:	687b      	ldr	r3, [r7, #4]
20018b2a:	681b      	ldr	r3, [r3, #0]
20018b2c:	685a      	ldr	r2, [r3, #4]
20018b2e:	687b      	ldr	r3, [r7, #4]
20018b30:	681b      	ldr	r3, [r3, #0]
20018b32:	f022 0201 	bic.w	r2, r2, #1
20018b36:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
20018b38:	687b      	ldr	r3, [r7, #4]
20018b3a:	2200      	movs	r2, #0
20018b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
20018b3e:	687b      	ldr	r3, [r7, #4]
20018b40:	2200      	movs	r2, #0
20018b42:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
20018b44:	687b      	ldr	r3, [r7, #4]
20018b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018b48:	2b40      	cmp	r3, #64	; 0x40
20018b4a:	d102      	bne.n	20018b52 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
20018b4c:	2301      	movs	r3, #1
20018b4e:	77fb      	strb	r3, [r7, #31]
20018b50:	e002      	b.n	20018b58 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20018b52:	687b      	ldr	r3, [r7, #4]
20018b54:	2200      	movs	r2, #0
20018b56:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
20018b58:	2300      	movs	r3, #0
20018b5a:	613b      	str	r3, [r7, #16]
20018b5c:	687b      	ldr	r3, [r7, #4]
20018b5e:	681b      	ldr	r3, [r3, #0]
20018b60:	68db      	ldr	r3, [r3, #12]
20018b62:	613b      	str	r3, [r7, #16]
20018b64:	687b      	ldr	r3, [r7, #4]
20018b66:	681b      	ldr	r3, [r3, #0]
20018b68:	689b      	ldr	r3, [r3, #8]
20018b6a:	613b      	str	r3, [r7, #16]
20018b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
20018b6e:	2300      	movs	r3, #0
20018b70:	60fb      	str	r3, [r7, #12]
20018b72:	687b      	ldr	r3, [r7, #4]
20018b74:	681b      	ldr	r3, [r3, #0]
20018b76:	689b      	ldr	r3, [r3, #8]
20018b78:	60fb      	str	r3, [r7, #12]
20018b7a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
20018b7c:	687b      	ldr	r3, [r7, #4]
20018b7e:	2201      	movs	r2, #1
20018b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
20018b84:	7ffb      	ldrb	r3, [r7, #31]
}
20018b86:	4618      	mov	r0, r3
20018b88:	3720      	adds	r7, #32
20018b8a:	46bd      	mov	sp, r7
20018b8c:	bd80      	pop	{r7, pc}
20018b8e:	bf00      	nop
20018b90:	2000e4dc 	.word	0x2000e4dc
20018b94:	057619f1 	.word	0x057619f1
20018b98:	20019d15 	.word	0x20019d15
20018b9c:	20019c8d 	.word	0x20019c8d

20018ba0 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
20018ba0:	b580      	push	{r7, lr}
20018ba2:	b088      	sub	sp, #32
20018ba4:	af00      	add	r7, sp, #0
20018ba6:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
20018ba8:	2300      	movs	r3, #0
20018baa:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
20018bac:	2301      	movs	r3, #1
20018bae:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20018bb0:	4b72      	ldr	r3, [pc, #456]	; (20018d7c <HAL_SPI_Abort_IT+0x1dc>)
20018bb2:	681b      	ldr	r3, [r3, #0]
20018bb4:	4a72      	ldr	r2, [pc, #456]	; (20018d80 <HAL_SPI_Abort_IT+0x1e0>)
20018bb6:	fba2 2303 	umull	r2, r3, r2, r3
20018bba:	0a5b      	lsrs	r3, r3, #9
20018bbc:	2264      	movs	r2, #100	; 0x64
20018bbe:	fb02 f303 	mul.w	r3, r2, r3
20018bc2:	613b      	str	r3, [r7, #16]
  count = resetcount;
20018bc4:	693b      	ldr	r3, [r7, #16]
20018bc6:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
20018bc8:	687b      	ldr	r3, [r7, #4]
20018bca:	681b      	ldr	r3, [r3, #0]
20018bcc:	685a      	ldr	r2, [r3, #4]
20018bce:	687b      	ldr	r3, [r7, #4]
20018bd0:	681b      	ldr	r3, [r3, #0]
20018bd2:	f022 0220 	bic.w	r2, r2, #32
20018bd6:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
20018bd8:	687b      	ldr	r3, [r7, #4]
20018bda:	681b      	ldr	r3, [r3, #0]
20018bdc:	685b      	ldr	r3, [r3, #4]
20018bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
20018be2:	2b80      	cmp	r3, #128	; 0x80
20018be4:	d117      	bne.n	20018c16 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
20018be6:	687b      	ldr	r3, [r7, #4]
20018be8:	4a66      	ldr	r2, [pc, #408]	; (20018d84 <HAL_SPI_Abort_IT+0x1e4>)
20018bea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
20018bec:	697b      	ldr	r3, [r7, #20]
20018bee:	2b00      	cmp	r3, #0
20018bf0:	d106      	bne.n	20018c00 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20018bf2:	687b      	ldr	r3, [r7, #4]
20018bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018bf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20018bfa:	687b      	ldr	r3, [r7, #4]
20018bfc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
20018bfe:	e008      	b.n	20018c12 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
20018c00:	697b      	ldr	r3, [r7, #20]
20018c02:	3b01      	subs	r3, #1
20018c04:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20018c06:	687b      	ldr	r3, [r7, #4]
20018c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20018c0c:	b2db      	uxtb	r3, r3
20018c0e:	2b07      	cmp	r3, #7
20018c10:	d1ec      	bne.n	20018bec <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
20018c12:	693b      	ldr	r3, [r7, #16]
20018c14:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
20018c16:	687b      	ldr	r3, [r7, #4]
20018c18:	681b      	ldr	r3, [r3, #0]
20018c1a:	685b      	ldr	r3, [r3, #4]
20018c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20018c20:	2b40      	cmp	r3, #64	; 0x40
20018c22:	d117      	bne.n	20018c54 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
20018c24:	687b      	ldr	r3, [r7, #4]
20018c26:	4a58      	ldr	r2, [pc, #352]	; (20018d88 <HAL_SPI_Abort_IT+0x1e8>)
20018c28:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
20018c2a:	697b      	ldr	r3, [r7, #20]
20018c2c:	2b00      	cmp	r3, #0
20018c2e:	d106      	bne.n	20018c3e <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20018c30:	687b      	ldr	r3, [r7, #4]
20018c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018c34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20018c38:	687b      	ldr	r3, [r7, #4]
20018c3a:	655a      	str	r2, [r3, #84]	; 0x54
        break;
20018c3c:	e008      	b.n	20018c50 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
20018c3e:	697b      	ldr	r3, [r7, #20]
20018c40:	3b01      	subs	r3, #1
20018c42:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20018c44:	687b      	ldr	r3, [r7, #4]
20018c46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20018c4a:	b2db      	uxtb	r3, r3
20018c4c:	2b07      	cmp	r3, #7
20018c4e:	d1ec      	bne.n	20018c2a <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
20018c50:	693b      	ldr	r3, [r7, #16]
20018c52:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
20018c54:	687b      	ldr	r3, [r7, #4]
20018c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018c58:	2b00      	cmp	r3, #0
20018c5a:	d00f      	beq.n	20018c7c <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
20018c5c:	687b      	ldr	r3, [r7, #4]
20018c5e:	681b      	ldr	r3, [r3, #0]
20018c60:	685b      	ldr	r3, [r3, #4]
20018c62:	f003 0302 	and.w	r3, r3, #2
20018c66:	2b02      	cmp	r3, #2
20018c68:	d104      	bne.n	20018c74 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
20018c6a:	687b      	ldr	r3, [r7, #4]
20018c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018c6e:	4a47      	ldr	r2, [pc, #284]	; (20018d8c <HAL_SPI_Abort_IT+0x1ec>)
20018c70:	651a      	str	r2, [r3, #80]	; 0x50
20018c72:	e003      	b.n	20018c7c <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
20018c74:	687b      	ldr	r3, [r7, #4]
20018c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018c78:	2200      	movs	r2, #0
20018c7a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
20018c7c:	687b      	ldr	r3, [r7, #4]
20018c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018c80:	2b00      	cmp	r3, #0
20018c82:	d00f      	beq.n	20018ca4 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
20018c84:	687b      	ldr	r3, [r7, #4]
20018c86:	681b      	ldr	r3, [r3, #0]
20018c88:	685b      	ldr	r3, [r3, #4]
20018c8a:	f003 0301 	and.w	r3, r3, #1
20018c8e:	2b01      	cmp	r3, #1
20018c90:	d104      	bne.n	20018c9c <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
20018c92:	687b      	ldr	r3, [r7, #4]
20018c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018c96:	4a3e      	ldr	r2, [pc, #248]	; (20018d90 <HAL_SPI_Abort_IT+0x1f0>)
20018c98:	651a      	str	r2, [r3, #80]	; 0x50
20018c9a:	e003      	b.n	20018ca4 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
20018c9c:	687b      	ldr	r3, [r7, #4]
20018c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018ca0:	2200      	movs	r2, #0
20018ca2:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
20018ca4:	687b      	ldr	r3, [r7, #4]
20018ca6:	681b      	ldr	r3, [r3, #0]
20018ca8:	685b      	ldr	r3, [r3, #4]
20018caa:	f003 0302 	and.w	r3, r3, #2
20018cae:	2b02      	cmp	r3, #2
20018cb0:	d115      	bne.n	20018cde <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
20018cb2:	687b      	ldr	r3, [r7, #4]
20018cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018cb6:	2b00      	cmp	r3, #0
20018cb8:	d011      	beq.n	20018cde <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
20018cba:	687b      	ldr	r3, [r7, #4]
20018cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018cbe:	4618      	mov	r0, r3
20018cc0:	f7f8 fdff 	bl	200118c2 <HAL_DMA_Abort_IT>
20018cc4:	4603      	mov	r3, r0
20018cc6:	2b00      	cmp	r3, #0
20018cc8:	d007      	beq.n	20018cda <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
20018cca:	687b      	ldr	r3, [r7, #4]
20018ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018cce:	2200      	movs	r2, #0
20018cd0:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20018cd2:	687b      	ldr	r3, [r7, #4]
20018cd4:	2240      	movs	r2, #64	; 0x40
20018cd6:	655a      	str	r2, [r3, #84]	; 0x54
20018cd8:	e001      	b.n	20018cde <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
20018cda:	2300      	movs	r3, #0
20018cdc:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
20018cde:	687b      	ldr	r3, [r7, #4]
20018ce0:	681b      	ldr	r3, [r3, #0]
20018ce2:	685b      	ldr	r3, [r3, #4]
20018ce4:	f003 0301 	and.w	r3, r3, #1
20018ce8:	2b01      	cmp	r3, #1
20018cea:	d115      	bne.n	20018d18 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
20018cec:	687b      	ldr	r3, [r7, #4]
20018cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018cf0:	2b00      	cmp	r3, #0
20018cf2:	d011      	beq.n	20018d18 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
20018cf4:	687b      	ldr	r3, [r7, #4]
20018cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018cf8:	4618      	mov	r0, r3
20018cfa:	f7f8 fde2 	bl	200118c2 <HAL_DMA_Abort_IT>
20018cfe:	4603      	mov	r3, r0
20018d00:	2b00      	cmp	r3, #0
20018d02:	d007      	beq.n	20018d14 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
20018d04:	687b      	ldr	r3, [r7, #4]
20018d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018d08:	2200      	movs	r2, #0
20018d0a:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20018d0c:	687b      	ldr	r3, [r7, #4]
20018d0e:	2240      	movs	r2, #64	; 0x40
20018d10:	655a      	str	r2, [r3, #84]	; 0x54
20018d12:	e001      	b.n	20018d18 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
20018d14:	2300      	movs	r3, #0
20018d16:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
20018d18:	69bb      	ldr	r3, [r7, #24]
20018d1a:	2b01      	cmp	r3, #1
20018d1c:	d128      	bne.n	20018d70 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
20018d1e:	687b      	ldr	r3, [r7, #4]
20018d20:	2200      	movs	r2, #0
20018d22:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
20018d24:	687b      	ldr	r3, [r7, #4]
20018d26:	2200      	movs	r2, #0
20018d28:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
20018d2a:	687b      	ldr	r3, [r7, #4]
20018d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018d2e:	2b40      	cmp	r3, #64	; 0x40
20018d30:	d102      	bne.n	20018d38 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
20018d32:	2301      	movs	r3, #1
20018d34:	77fb      	strb	r3, [r7, #31]
20018d36:	e002      	b.n	20018d3e <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20018d38:	687b      	ldr	r3, [r7, #4]
20018d3a:	2200      	movs	r2, #0
20018d3c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20018d3e:	2300      	movs	r3, #0
20018d40:	60fb      	str	r3, [r7, #12]
20018d42:	687b      	ldr	r3, [r7, #4]
20018d44:	681b      	ldr	r3, [r3, #0]
20018d46:	68db      	ldr	r3, [r3, #12]
20018d48:	60fb      	str	r3, [r7, #12]
20018d4a:	687b      	ldr	r3, [r7, #4]
20018d4c:	681b      	ldr	r3, [r3, #0]
20018d4e:	689b      	ldr	r3, [r3, #8]
20018d50:	60fb      	str	r3, [r7, #12]
20018d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
20018d54:	2300      	movs	r3, #0
20018d56:	60bb      	str	r3, [r7, #8]
20018d58:	687b      	ldr	r3, [r7, #4]
20018d5a:	681b      	ldr	r3, [r3, #0]
20018d5c:	689b      	ldr	r3, [r3, #8]
20018d5e:	60bb      	str	r3, [r7, #8]
20018d60:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
20018d62:	687b      	ldr	r3, [r7, #4]
20018d64:	2201      	movs	r2, #1
20018d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
20018d6a:	6878      	ldr	r0, [r7, #4]
20018d6c:	f000 f9dc 	bl	20019128 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
20018d70:	7ffb      	ldrb	r3, [r7, #31]
}
20018d72:	4618      	mov	r0, r3
20018d74:	3720      	adds	r7, #32
20018d76:	46bd      	mov	sp, r7
20018d78:	bd80      	pop	{r7, pc}
20018d7a:	bf00      	nop
20018d7c:	2000e4dc 	.word	0x2000e4dc
20018d80:	057619f1 	.word	0x057619f1
20018d84:	20019d15 	.word	0x20019d15
20018d88:	20019c8d 	.word	0x20019c8d
20018d8c:	2001940d 	.word	0x2001940d
20018d90:	200194e1 	.word	0x200194e1

20018d94 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
20018d94:	b480      	push	{r7}
20018d96:	b083      	sub	sp, #12
20018d98:	af00      	add	r7, sp, #0
20018d9a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
20018d9c:	687b      	ldr	r3, [r7, #4]
20018d9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20018da2:	2b01      	cmp	r3, #1
20018da4:	d101      	bne.n	20018daa <HAL_SPI_DMAPause+0x16>
20018da6:	2302      	movs	r3, #2
20018da8:	e010      	b.n	20018dcc <HAL_SPI_DMAPause+0x38>
20018daa:	687b      	ldr	r3, [r7, #4]
20018dac:	2201      	movs	r2, #1
20018dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20018db2:	687b      	ldr	r3, [r7, #4]
20018db4:	681b      	ldr	r3, [r3, #0]
20018db6:	685a      	ldr	r2, [r3, #4]
20018db8:	687b      	ldr	r3, [r7, #4]
20018dba:	681b      	ldr	r3, [r3, #0]
20018dbc:	f022 0203 	bic.w	r2, r2, #3
20018dc0:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20018dc2:	687b      	ldr	r3, [r7, #4]
20018dc4:	2200      	movs	r2, #0
20018dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
20018dca:	2300      	movs	r3, #0
}
20018dcc:	4618      	mov	r0, r3
20018dce:	370c      	adds	r7, #12
20018dd0:	46bd      	mov	sp, r7
20018dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
20018dd6:	4770      	bx	lr

20018dd8 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
20018dd8:	b480      	push	{r7}
20018dda:	b083      	sub	sp, #12
20018ddc:	af00      	add	r7, sp, #0
20018dde:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
20018de0:	687b      	ldr	r3, [r7, #4]
20018de2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20018de6:	2b01      	cmp	r3, #1
20018de8:	d101      	bne.n	20018dee <HAL_SPI_DMAResume+0x16>
20018dea:	2302      	movs	r3, #2
20018dec:	e010      	b.n	20018e10 <HAL_SPI_DMAResume+0x38>
20018dee:	687b      	ldr	r3, [r7, #4]
20018df0:	2201      	movs	r2, #1
20018df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20018df6:	687b      	ldr	r3, [r7, #4]
20018df8:	681b      	ldr	r3, [r3, #0]
20018dfa:	685a      	ldr	r2, [r3, #4]
20018dfc:	687b      	ldr	r3, [r7, #4]
20018dfe:	681b      	ldr	r3, [r3, #0]
20018e00:	f042 0203 	orr.w	r2, r2, #3
20018e04:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20018e06:	687b      	ldr	r3, [r7, #4]
20018e08:	2200      	movs	r2, #0
20018e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
20018e0e:	2300      	movs	r3, #0
}
20018e10:	4618      	mov	r0, r3
20018e12:	370c      	adds	r7, #12
20018e14:	46bd      	mov	sp, r7
20018e16:	f85d 7b04 	ldr.w	r7, [sp], #4
20018e1a:	4770      	bx	lr

20018e1c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
20018e1c:	b580      	push	{r7, lr}
20018e1e:	b084      	sub	sp, #16
20018e20:	af00      	add	r7, sp, #0
20018e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
20018e24:	2300      	movs	r3, #0
20018e26:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
20018e28:	687b      	ldr	r3, [r7, #4]
20018e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018e2c:	2b00      	cmp	r3, #0
20018e2e:	d00f      	beq.n	20018e50 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
20018e30:	687b      	ldr	r3, [r7, #4]
20018e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20018e34:	4618      	mov	r0, r3
20018e36:	f7f8 fcd4 	bl	200117e2 <HAL_DMA_Abort>
20018e3a:	4603      	mov	r3, r0
20018e3c:	2b00      	cmp	r3, #0
20018e3e:	d007      	beq.n	20018e50 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20018e40:	687b      	ldr	r3, [r7, #4]
20018e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018e44:	f043 0210 	orr.w	r2, r3, #16
20018e48:	687b      	ldr	r3, [r7, #4]
20018e4a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
20018e4c:	2301      	movs	r3, #1
20018e4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
20018e50:	687b      	ldr	r3, [r7, #4]
20018e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018e54:	2b00      	cmp	r3, #0
20018e56:	d00f      	beq.n	20018e78 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
20018e58:	687b      	ldr	r3, [r7, #4]
20018e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20018e5c:	4618      	mov	r0, r3
20018e5e:	f7f8 fcc0 	bl	200117e2 <HAL_DMA_Abort>
20018e62:	4603      	mov	r3, r0
20018e64:	2b00      	cmp	r3, #0
20018e66:	d007      	beq.n	20018e78 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20018e68:	687b      	ldr	r3, [r7, #4]
20018e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018e6c:	f043 0210 	orr.w	r2, r3, #16
20018e70:	687b      	ldr	r3, [r7, #4]
20018e72:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
20018e74:	2301      	movs	r3, #1
20018e76:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20018e78:	687b      	ldr	r3, [r7, #4]
20018e7a:	681b      	ldr	r3, [r3, #0]
20018e7c:	685a      	ldr	r2, [r3, #4]
20018e7e:	687b      	ldr	r3, [r7, #4]
20018e80:	681b      	ldr	r3, [r3, #0]
20018e82:	f022 0203 	bic.w	r2, r2, #3
20018e86:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
20018e88:	687b      	ldr	r3, [r7, #4]
20018e8a:	2201      	movs	r2, #1
20018e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
20018e90:	7bfb      	ldrb	r3, [r7, #15]
}
20018e92:	4618      	mov	r0, r3
20018e94:	3710      	adds	r7, #16
20018e96:	46bd      	mov	sp, r7
20018e98:	bd80      	pop	{r7, pc}
	...

20018e9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
20018e9c:	b580      	push	{r7, lr}
20018e9e:	b088      	sub	sp, #32
20018ea0:	af00      	add	r7, sp, #0
20018ea2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
20018ea4:	687b      	ldr	r3, [r7, #4]
20018ea6:	681b      	ldr	r3, [r3, #0]
20018ea8:	685b      	ldr	r3, [r3, #4]
20018eaa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
20018eac:	687b      	ldr	r3, [r7, #4]
20018eae:	681b      	ldr	r3, [r3, #0]
20018eb0:	689b      	ldr	r3, [r3, #8]
20018eb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
20018eb4:	69bb      	ldr	r3, [r7, #24]
20018eb6:	099b      	lsrs	r3, r3, #6
20018eb8:	f003 0301 	and.w	r3, r3, #1
20018ebc:	2b00      	cmp	r3, #0
20018ebe:	d10f      	bne.n	20018ee0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
20018ec0:	69bb      	ldr	r3, [r7, #24]
20018ec2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
20018ec6:	2b00      	cmp	r3, #0
20018ec8:	d00a      	beq.n	20018ee0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
20018eca:	69fb      	ldr	r3, [r7, #28]
20018ecc:	099b      	lsrs	r3, r3, #6
20018ece:	f003 0301 	and.w	r3, r3, #1
20018ed2:	2b00      	cmp	r3, #0
20018ed4:	d004      	beq.n	20018ee0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
20018ed6:	687b      	ldr	r3, [r7, #4]
20018ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20018eda:	6878      	ldr	r0, [r7, #4]
20018edc:	4798      	blx	r3
    return;
20018ede:	e0d8      	b.n	20019092 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
20018ee0:	69bb      	ldr	r3, [r7, #24]
20018ee2:	085b      	lsrs	r3, r3, #1
20018ee4:	f003 0301 	and.w	r3, r3, #1
20018ee8:	2b00      	cmp	r3, #0
20018eea:	d00a      	beq.n	20018f02 <HAL_SPI_IRQHandler+0x66>
20018eec:	69fb      	ldr	r3, [r7, #28]
20018eee:	09db      	lsrs	r3, r3, #7
20018ef0:	f003 0301 	and.w	r3, r3, #1
20018ef4:	2b00      	cmp	r3, #0
20018ef6:	d004      	beq.n	20018f02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
20018ef8:	687b      	ldr	r3, [r7, #4]
20018efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20018efc:	6878      	ldr	r0, [r7, #4]
20018efe:	4798      	blx	r3
    return;
20018f00:	e0c7      	b.n	20019092 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
20018f02:	69bb      	ldr	r3, [r7, #24]
20018f04:	095b      	lsrs	r3, r3, #5
20018f06:	f003 0301 	and.w	r3, r3, #1
20018f0a:	2b00      	cmp	r3, #0
20018f0c:	d10c      	bne.n	20018f28 <HAL_SPI_IRQHandler+0x8c>
20018f0e:	69bb      	ldr	r3, [r7, #24]
20018f10:	099b      	lsrs	r3, r3, #6
20018f12:	f003 0301 	and.w	r3, r3, #1
20018f16:	2b00      	cmp	r3, #0
20018f18:	d106      	bne.n	20018f28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
20018f1a:	69bb      	ldr	r3, [r7, #24]
20018f1c:	0a1b      	lsrs	r3, r3, #8
20018f1e:	f003 0301 	and.w	r3, r3, #1
20018f22:	2b00      	cmp	r3, #0
20018f24:	f000 80b5 	beq.w	20019092 <HAL_SPI_IRQHandler+0x1f6>
20018f28:	69fb      	ldr	r3, [r7, #28]
20018f2a:	095b      	lsrs	r3, r3, #5
20018f2c:	f003 0301 	and.w	r3, r3, #1
20018f30:	2b00      	cmp	r3, #0
20018f32:	f000 80ae 	beq.w	20019092 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
20018f36:	69bb      	ldr	r3, [r7, #24]
20018f38:	099b      	lsrs	r3, r3, #6
20018f3a:	f003 0301 	and.w	r3, r3, #1
20018f3e:	2b00      	cmp	r3, #0
20018f40:	d023      	beq.n	20018f8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
20018f42:	687b      	ldr	r3, [r7, #4]
20018f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20018f48:	b2db      	uxtb	r3, r3
20018f4a:	2b03      	cmp	r3, #3
20018f4c:	d011      	beq.n	20018f72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
20018f4e:	687b      	ldr	r3, [r7, #4]
20018f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018f52:	f043 0204 	orr.w	r2, r3, #4
20018f56:	687b      	ldr	r3, [r7, #4]
20018f58:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
20018f5a:	2300      	movs	r3, #0
20018f5c:	617b      	str	r3, [r7, #20]
20018f5e:	687b      	ldr	r3, [r7, #4]
20018f60:	681b      	ldr	r3, [r3, #0]
20018f62:	68db      	ldr	r3, [r3, #12]
20018f64:	617b      	str	r3, [r7, #20]
20018f66:	687b      	ldr	r3, [r7, #4]
20018f68:	681b      	ldr	r3, [r3, #0]
20018f6a:	689b      	ldr	r3, [r3, #8]
20018f6c:	617b      	str	r3, [r7, #20]
20018f6e:	697b      	ldr	r3, [r7, #20]
20018f70:	e00b      	b.n	20018f8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
20018f72:	2300      	movs	r3, #0
20018f74:	613b      	str	r3, [r7, #16]
20018f76:	687b      	ldr	r3, [r7, #4]
20018f78:	681b      	ldr	r3, [r3, #0]
20018f7a:	68db      	ldr	r3, [r3, #12]
20018f7c:	613b      	str	r3, [r7, #16]
20018f7e:	687b      	ldr	r3, [r7, #4]
20018f80:	681b      	ldr	r3, [r3, #0]
20018f82:	689b      	ldr	r3, [r3, #8]
20018f84:	613b      	str	r3, [r7, #16]
20018f86:	693b      	ldr	r3, [r7, #16]
        return;
20018f88:	e083      	b.n	20019092 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
20018f8a:	69bb      	ldr	r3, [r7, #24]
20018f8c:	095b      	lsrs	r3, r3, #5
20018f8e:	f003 0301 	and.w	r3, r3, #1
20018f92:	2b00      	cmp	r3, #0
20018f94:	d014      	beq.n	20018fc0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
20018f96:	687b      	ldr	r3, [r7, #4]
20018f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018f9a:	f043 0201 	orr.w	r2, r3, #1
20018f9e:	687b      	ldr	r3, [r7, #4]
20018fa0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
20018fa2:	2300      	movs	r3, #0
20018fa4:	60fb      	str	r3, [r7, #12]
20018fa6:	687b      	ldr	r3, [r7, #4]
20018fa8:	681b      	ldr	r3, [r3, #0]
20018faa:	689b      	ldr	r3, [r3, #8]
20018fac:	60fb      	str	r3, [r7, #12]
20018fae:	687b      	ldr	r3, [r7, #4]
20018fb0:	681b      	ldr	r3, [r3, #0]
20018fb2:	681a      	ldr	r2, [r3, #0]
20018fb4:	687b      	ldr	r3, [r7, #4]
20018fb6:	681b      	ldr	r3, [r3, #0]
20018fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20018fbc:	601a      	str	r2, [r3, #0]
20018fbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
20018fc0:	69bb      	ldr	r3, [r7, #24]
20018fc2:	0a1b      	lsrs	r3, r3, #8
20018fc4:	f003 0301 	and.w	r3, r3, #1
20018fc8:	2b00      	cmp	r3, #0
20018fca:	d00c      	beq.n	20018fe6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
20018fcc:	687b      	ldr	r3, [r7, #4]
20018fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018fd0:	f043 0208 	orr.w	r2, r3, #8
20018fd4:	687b      	ldr	r3, [r7, #4]
20018fd6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
20018fd8:	2300      	movs	r3, #0
20018fda:	60bb      	str	r3, [r7, #8]
20018fdc:	687b      	ldr	r3, [r7, #4]
20018fde:	681b      	ldr	r3, [r3, #0]
20018fe0:	689b      	ldr	r3, [r3, #8]
20018fe2:	60bb      	str	r3, [r7, #8]
20018fe4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20018fe6:	687b      	ldr	r3, [r7, #4]
20018fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20018fea:	2b00      	cmp	r3, #0
20018fec:	d050      	beq.n	20019090 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
20018fee:	687b      	ldr	r3, [r7, #4]
20018ff0:	681b      	ldr	r3, [r3, #0]
20018ff2:	685a      	ldr	r2, [r3, #4]
20018ff4:	687b      	ldr	r3, [r7, #4]
20018ff6:	681b      	ldr	r3, [r3, #0]
20018ff8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
20018ffc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
20018ffe:	687b      	ldr	r3, [r7, #4]
20019000:	2201      	movs	r2, #1
20019002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
20019006:	69fb      	ldr	r3, [r7, #28]
20019008:	f003 0302 	and.w	r3, r3, #2
2001900c:	2b00      	cmp	r3, #0
2001900e:	d104      	bne.n	2001901a <HAL_SPI_IRQHandler+0x17e>
20019010:	69fb      	ldr	r3, [r7, #28]
20019012:	f003 0301 	and.w	r3, r3, #1
20019016:	2b00      	cmp	r3, #0
20019018:	d034      	beq.n	20019084 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
2001901a:	687b      	ldr	r3, [r7, #4]
2001901c:	681b      	ldr	r3, [r3, #0]
2001901e:	685a      	ldr	r2, [r3, #4]
20019020:	687b      	ldr	r3, [r7, #4]
20019022:	681b      	ldr	r3, [r3, #0]
20019024:	f022 0203 	bic.w	r2, r2, #3
20019028:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
2001902a:	687b      	ldr	r3, [r7, #4]
2001902c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2001902e:	2b00      	cmp	r3, #0
20019030:	d011      	beq.n	20019056 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
20019032:	687b      	ldr	r3, [r7, #4]
20019034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20019036:	4a18      	ldr	r2, [pc, #96]	; (20019098 <HAL_SPI_IRQHandler+0x1fc>)
20019038:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2001903a:	687b      	ldr	r3, [r7, #4]
2001903c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2001903e:	4618      	mov	r0, r3
20019040:	f7f8 fc3f 	bl	200118c2 <HAL_DMA_Abort_IT>
20019044:	4603      	mov	r3, r0
20019046:	2b00      	cmp	r3, #0
20019048:	d005      	beq.n	20019056 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2001904a:	687b      	ldr	r3, [r7, #4]
2001904c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2001904e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20019052:	687b      	ldr	r3, [r7, #4]
20019054:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
20019056:	687b      	ldr	r3, [r7, #4]
20019058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2001905a:	2b00      	cmp	r3, #0
2001905c:	d016      	beq.n	2001908c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2001905e:	687b      	ldr	r3, [r7, #4]
20019060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20019062:	4a0d      	ldr	r2, [pc, #52]	; (20019098 <HAL_SPI_IRQHandler+0x1fc>)
20019064:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
20019066:	687b      	ldr	r3, [r7, #4]
20019068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2001906a:	4618      	mov	r0, r3
2001906c:	f7f8 fc29 	bl	200118c2 <HAL_DMA_Abort_IT>
20019070:	4603      	mov	r3, r0
20019072:	2b00      	cmp	r3, #0
20019074:	d00a      	beq.n	2001908c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20019076:	687b      	ldr	r3, [r7, #4]
20019078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2001907a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2001907e:	687b      	ldr	r3, [r7, #4]
20019080:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
20019082:	e003      	b.n	2001908c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
20019084:	6878      	ldr	r0, [r7, #4]
20019086:	f000 f845 	bl	20019114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
2001908a:	e000      	b.n	2001908e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
2001908c:	bf00      	nop
    return;
2001908e:	bf00      	nop
20019090:	bf00      	nop
  }
}
20019092:	3720      	adds	r7, #32
20019094:	46bd      	mov	sp, r7
20019096:	bd80      	pop	{r7, pc}
20019098:	200193e5 	.word	0x200193e5

2001909c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
2001909c:	b480      	push	{r7}
2001909e:	b083      	sub	sp, #12
200190a0:	af00      	add	r7, sp, #0
200190a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
200190a4:	bf00      	nop
200190a6:	370c      	adds	r7, #12
200190a8:	46bd      	mov	sp, r7
200190aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200190ae:	4770      	bx	lr

200190b0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
200190b0:	b480      	push	{r7}
200190b2:	b083      	sub	sp, #12
200190b4:	af00      	add	r7, sp, #0
200190b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
200190b8:	bf00      	nop
200190ba:	370c      	adds	r7, #12
200190bc:	46bd      	mov	sp, r7
200190be:	f85d 7b04 	ldr.w	r7, [sp], #4
200190c2:	4770      	bx	lr

200190c4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
200190c4:	b480      	push	{r7}
200190c6:	b083      	sub	sp, #12
200190c8:	af00      	add	r7, sp, #0
200190ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
200190cc:	bf00      	nop
200190ce:	370c      	adds	r7, #12
200190d0:	46bd      	mov	sp, r7
200190d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200190d6:	4770      	bx	lr

200190d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
200190d8:	b480      	push	{r7}
200190da:	b083      	sub	sp, #12
200190dc:	af00      	add	r7, sp, #0
200190de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
200190e0:	bf00      	nop
200190e2:	370c      	adds	r7, #12
200190e4:	46bd      	mov	sp, r7
200190e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200190ea:	4770      	bx	lr

200190ec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
200190ec:	b480      	push	{r7}
200190ee:	b083      	sub	sp, #12
200190f0:	af00      	add	r7, sp, #0
200190f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
200190f4:	bf00      	nop
200190f6:	370c      	adds	r7, #12
200190f8:	46bd      	mov	sp, r7
200190fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200190fe:	4770      	bx	lr

20019100 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
20019100:	b480      	push	{r7}
20019102:	b083      	sub	sp, #12
20019104:	af00      	add	r7, sp, #0
20019106:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
20019108:	bf00      	nop
2001910a:	370c      	adds	r7, #12
2001910c:	46bd      	mov	sp, r7
2001910e:	f85d 7b04 	ldr.w	r7, [sp], #4
20019112:	4770      	bx	lr

20019114 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
20019114:	b480      	push	{r7}
20019116:	b083      	sub	sp, #12
20019118:	af00      	add	r7, sp, #0
2001911a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
2001911c:	bf00      	nop
2001911e:	370c      	adds	r7, #12
20019120:	46bd      	mov	sp, r7
20019122:	f85d 7b04 	ldr.w	r7, [sp], #4
20019126:	4770      	bx	lr

20019128 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
20019128:	b480      	push	{r7}
2001912a:	b083      	sub	sp, #12
2001912c:	af00      	add	r7, sp, #0
2001912e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
20019130:	bf00      	nop
20019132:	370c      	adds	r7, #12
20019134:	46bd      	mov	sp, r7
20019136:	f85d 7b04 	ldr.w	r7, [sp], #4
2001913a:	4770      	bx	lr

2001913c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
2001913c:	b480      	push	{r7}
2001913e:	b083      	sub	sp, #12
20019140:	af00      	add	r7, sp, #0
20019142:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
20019144:	687b      	ldr	r3, [r7, #4]
20019146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2001914a:	b2db      	uxtb	r3, r3
}
2001914c:	4618      	mov	r0, r3
2001914e:	370c      	adds	r7, #12
20019150:	46bd      	mov	sp, r7
20019152:	f85d 7b04 	ldr.w	r7, [sp], #4
20019156:	4770      	bx	lr

20019158 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
20019158:	b480      	push	{r7}
2001915a:	b083      	sub	sp, #12
2001915c:	af00      	add	r7, sp, #0
2001915e:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
20019160:	687b      	ldr	r3, [r7, #4]
20019162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
20019164:	4618      	mov	r0, r3
20019166:	370c      	adds	r7, #12
20019168:	46bd      	mov	sp, r7
2001916a:	f85d 7b04 	ldr.w	r7, [sp], #4
2001916e:	4770      	bx	lr

20019170 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
20019170:	b580      	push	{r7, lr}
20019172:	b086      	sub	sp, #24
20019174:	af00      	add	r7, sp, #0
20019176:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20019178:	687b      	ldr	r3, [r7, #4]
2001917a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2001917c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2001917e:	f7f7 fd11 	bl	20010ba4 <HAL_GetTick>
20019182:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
20019184:	687b      	ldr	r3, [r7, #4]
20019186:	681b      	ldr	r3, [r3, #0]
20019188:	681b      	ldr	r3, [r3, #0]
2001918a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2001918e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
20019192:	d03b      	beq.n	2001920c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
20019194:	697b      	ldr	r3, [r7, #20]
20019196:	681b      	ldr	r3, [r3, #0]
20019198:	685a      	ldr	r2, [r3, #4]
2001919a:	697b      	ldr	r3, [r7, #20]
2001919c:	681b      	ldr	r3, [r3, #0]
2001919e:	f022 0220 	bic.w	r2, r2, #32
200191a2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
200191a4:	697b      	ldr	r3, [r7, #20]
200191a6:	681b      	ldr	r3, [r3, #0]
200191a8:	685a      	ldr	r2, [r3, #4]
200191aa:	697b      	ldr	r3, [r7, #20]
200191ac:	681b      	ldr	r3, [r3, #0]
200191ae:	f022 0202 	bic.w	r2, r2, #2
200191b2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
200191b4:	693a      	ldr	r2, [r7, #16]
200191b6:	2164      	movs	r1, #100	; 0x64
200191b8:	6978      	ldr	r0, [r7, #20]
200191ba:	f000 fc0f 	bl	200199dc <SPI_EndRxTxTransaction>
200191be:	4603      	mov	r3, r0
200191c0:	2b00      	cmp	r3, #0
200191c2:	d005      	beq.n	200191d0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200191c4:	697b      	ldr	r3, [r7, #20]
200191c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200191c8:	f043 0220 	orr.w	r2, r3, #32
200191cc:	697b      	ldr	r3, [r7, #20]
200191ce:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
200191d0:	697b      	ldr	r3, [r7, #20]
200191d2:	689b      	ldr	r3, [r3, #8]
200191d4:	2b00      	cmp	r3, #0
200191d6:	d10a      	bne.n	200191ee <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
200191d8:	2300      	movs	r3, #0
200191da:	60fb      	str	r3, [r7, #12]
200191dc:	697b      	ldr	r3, [r7, #20]
200191de:	681b      	ldr	r3, [r3, #0]
200191e0:	68db      	ldr	r3, [r3, #12]
200191e2:	60fb      	str	r3, [r7, #12]
200191e4:	697b      	ldr	r3, [r7, #20]
200191e6:	681b      	ldr	r3, [r3, #0]
200191e8:	689b      	ldr	r3, [r3, #8]
200191ea:	60fb      	str	r3, [r7, #12]
200191ec:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
200191ee:	697b      	ldr	r3, [r7, #20]
200191f0:	2200      	movs	r2, #0
200191f2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
200191f4:	697b      	ldr	r3, [r7, #20]
200191f6:	2201      	movs	r2, #1
200191f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
200191fc:	697b      	ldr	r3, [r7, #20]
200191fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019200:	2b00      	cmp	r3, #0
20019202:	d003      	beq.n	2001920c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
20019204:	6978      	ldr	r0, [r7, #20]
20019206:	f7ff ff85 	bl	20019114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
2001920a:	e002      	b.n	20019212 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
2001920c:	6978      	ldr	r0, [r7, #20]
2001920e:	f7ff ff45 	bl	2001909c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20019212:	3718      	adds	r7, #24
20019214:	46bd      	mov	sp, r7
20019216:	bd80      	pop	{r7, pc}

20019218 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
20019218:	b580      	push	{r7, lr}
2001921a:	b084      	sub	sp, #16
2001921c:	af00      	add	r7, sp, #0
2001921e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20019220:	687b      	ldr	r3, [r7, #4]
20019222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20019224:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20019226:	f7f7 fcbd 	bl	20010ba4 <HAL_GetTick>
2001922a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
2001922c:	687b      	ldr	r3, [r7, #4]
2001922e:	681b      	ldr	r3, [r3, #0]
20019230:	681b      	ldr	r3, [r3, #0]
20019232:	f403 7380 	and.w	r3, r3, #256	; 0x100
20019236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2001923a:	d03b      	beq.n	200192b4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2001923c:	68fb      	ldr	r3, [r7, #12]
2001923e:	681b      	ldr	r3, [r3, #0]
20019240:	685a      	ldr	r2, [r3, #4]
20019242:	68fb      	ldr	r3, [r7, #12]
20019244:	681b      	ldr	r3, [r3, #0]
20019246:	f022 0220 	bic.w	r2, r2, #32
2001924a:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
2001924c:	68fb      	ldr	r3, [r7, #12]
2001924e:	689b      	ldr	r3, [r3, #8]
20019250:	2b00      	cmp	r3, #0
20019252:	d10d      	bne.n	20019270 <SPI_DMAReceiveCplt+0x58>
20019254:	68fb      	ldr	r3, [r7, #12]
20019256:	685b      	ldr	r3, [r3, #4]
20019258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2001925c:	d108      	bne.n	20019270 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2001925e:	68fb      	ldr	r3, [r7, #12]
20019260:	681b      	ldr	r3, [r3, #0]
20019262:	685a      	ldr	r2, [r3, #4]
20019264:	68fb      	ldr	r3, [r7, #12]
20019266:	681b      	ldr	r3, [r3, #0]
20019268:	f022 0203 	bic.w	r2, r2, #3
2001926c:	605a      	str	r2, [r3, #4]
2001926e:	e007      	b.n	20019280 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20019270:	68fb      	ldr	r3, [r7, #12]
20019272:	681b      	ldr	r3, [r3, #0]
20019274:	685a      	ldr	r2, [r3, #4]
20019276:	68fb      	ldr	r3, [r7, #12]
20019278:	681b      	ldr	r3, [r3, #0]
2001927a:	f022 0201 	bic.w	r2, r2, #1
2001927e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
20019280:	68ba      	ldr	r2, [r7, #8]
20019282:	2164      	movs	r1, #100	; 0x64
20019284:	68f8      	ldr	r0, [r7, #12]
20019286:	f000 fb43 	bl	20019910 <SPI_EndRxTransaction>
2001928a:	4603      	mov	r3, r0
2001928c:	2b00      	cmp	r3, #0
2001928e:	d002      	beq.n	20019296 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20019290:	68fb      	ldr	r3, [r7, #12]
20019292:	2220      	movs	r2, #32
20019294:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
20019296:	68fb      	ldr	r3, [r7, #12]
20019298:	2200      	movs	r2, #0
2001929a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
2001929c:	68fb      	ldr	r3, [r7, #12]
2001929e:	2201      	movs	r2, #1
200192a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
200192a4:	68fb      	ldr	r3, [r7, #12]
200192a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200192a8:	2b00      	cmp	r3, #0
200192aa:	d003      	beq.n	200192b4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
200192ac:	68f8      	ldr	r0, [r7, #12]
200192ae:	f7ff ff31 	bl	20019114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
200192b2:	e002      	b.n	200192ba <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
200192b4:	68f8      	ldr	r0, [r7, #12]
200192b6:	f7ff fefb 	bl	200190b0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
200192ba:	3710      	adds	r7, #16
200192bc:	46bd      	mov	sp, r7
200192be:	bd80      	pop	{r7, pc}

200192c0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
200192c0:	b580      	push	{r7, lr}
200192c2:	b084      	sub	sp, #16
200192c4:	af00      	add	r7, sp, #0
200192c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
200192c8:	687b      	ldr	r3, [r7, #4]
200192ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200192cc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
200192ce:	f7f7 fc69 	bl	20010ba4 <HAL_GetTick>
200192d2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
200192d4:	687b      	ldr	r3, [r7, #4]
200192d6:	681b      	ldr	r3, [r3, #0]
200192d8:	681b      	ldr	r3, [r3, #0]
200192da:	f403 7380 	and.w	r3, r3, #256	; 0x100
200192de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
200192e2:	d02f      	beq.n	20019344 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
200192e4:	68fb      	ldr	r3, [r7, #12]
200192e6:	681b      	ldr	r3, [r3, #0]
200192e8:	685a      	ldr	r2, [r3, #4]
200192ea:	68fb      	ldr	r3, [r7, #12]
200192ec:	681b      	ldr	r3, [r3, #0]
200192ee:	f022 0220 	bic.w	r2, r2, #32
200192f2:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
200192f4:	68ba      	ldr	r2, [r7, #8]
200192f6:	2164      	movs	r1, #100	; 0x64
200192f8:	68f8      	ldr	r0, [r7, #12]
200192fa:	f000 fb6f 	bl	200199dc <SPI_EndRxTxTransaction>
200192fe:	4603      	mov	r3, r0
20019300:	2b00      	cmp	r3, #0
20019302:	d005      	beq.n	20019310 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20019304:	68fb      	ldr	r3, [r7, #12]
20019306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019308:	f043 0220 	orr.w	r2, r3, #32
2001930c:	68fb      	ldr	r3, [r7, #12]
2001930e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20019310:	68fb      	ldr	r3, [r7, #12]
20019312:	681b      	ldr	r3, [r3, #0]
20019314:	685a      	ldr	r2, [r3, #4]
20019316:	68fb      	ldr	r3, [r7, #12]
20019318:	681b      	ldr	r3, [r3, #0]
2001931a:	f022 0203 	bic.w	r2, r2, #3
2001931e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
20019320:	68fb      	ldr	r3, [r7, #12]
20019322:	2200      	movs	r2, #0
20019324:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
20019326:	68fb      	ldr	r3, [r7, #12]
20019328:	2200      	movs	r2, #0
2001932a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
2001932c:	68fb      	ldr	r3, [r7, #12]
2001932e:	2201      	movs	r2, #1
20019330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20019334:	68fb      	ldr	r3, [r7, #12]
20019336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019338:	2b00      	cmp	r3, #0
2001933a:	d003      	beq.n	20019344 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
2001933c:	68f8      	ldr	r0, [r7, #12]
2001933e:	f7ff fee9 	bl	20019114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
20019342:	e002      	b.n	2001934a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
20019344:	68f8      	ldr	r0, [r7, #12]
20019346:	f7ff febd 	bl	200190c4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2001934a:	3710      	adds	r7, #16
2001934c:	46bd      	mov	sp, r7
2001934e:	bd80      	pop	{r7, pc}

20019350 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
20019350:	b580      	push	{r7, lr}
20019352:	b084      	sub	sp, #16
20019354:	af00      	add	r7, sp, #0
20019356:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20019358:	687b      	ldr	r3, [r7, #4]
2001935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2001935c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
2001935e:	68f8      	ldr	r0, [r7, #12]
20019360:	f7ff feba 	bl	200190d8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20019364:	bf00      	nop
20019366:	3710      	adds	r7, #16
20019368:	46bd      	mov	sp, r7
2001936a:	bd80      	pop	{r7, pc}

2001936c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
2001936c:	b580      	push	{r7, lr}
2001936e:	b084      	sub	sp, #16
20019370:	af00      	add	r7, sp, #0
20019372:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20019374:	687b      	ldr	r3, [r7, #4]
20019376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20019378:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
2001937a:	68f8      	ldr	r0, [r7, #12]
2001937c:	f7ff feb6 	bl	200190ec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20019380:	bf00      	nop
20019382:	3710      	adds	r7, #16
20019384:	46bd      	mov	sp, r7
20019386:	bd80      	pop	{r7, pc}

20019388 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
20019388:	b580      	push	{r7, lr}
2001938a:	b084      	sub	sp, #16
2001938c:	af00      	add	r7, sp, #0
2001938e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20019390:	687b      	ldr	r3, [r7, #4]
20019392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20019394:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
20019396:	68f8      	ldr	r0, [r7, #12]
20019398:	f7ff feb2 	bl	20019100 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2001939c:	bf00      	nop
2001939e:	3710      	adds	r7, #16
200193a0:	46bd      	mov	sp, r7
200193a2:	bd80      	pop	{r7, pc}

200193a4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
200193a4:	b580      	push	{r7, lr}
200193a6:	b084      	sub	sp, #16
200193a8:	af00      	add	r7, sp, #0
200193aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
200193ac:	687b      	ldr	r3, [r7, #4]
200193ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200193b0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
200193b2:	68fb      	ldr	r3, [r7, #12]
200193b4:	681b      	ldr	r3, [r3, #0]
200193b6:	685a      	ldr	r2, [r3, #4]
200193b8:	68fb      	ldr	r3, [r7, #12]
200193ba:	681b      	ldr	r3, [r3, #0]
200193bc:	f022 0203 	bic.w	r2, r2, #3
200193c0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
200193c2:	68fb      	ldr	r3, [r7, #12]
200193c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200193c6:	f043 0210 	orr.w	r2, r3, #16
200193ca:	68fb      	ldr	r3, [r7, #12]
200193cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
200193ce:	68fb      	ldr	r3, [r7, #12]
200193d0:	2201      	movs	r2, #1
200193d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
200193d6:	68f8      	ldr	r0, [r7, #12]
200193d8:	f7ff fe9c 	bl	20019114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
200193dc:	bf00      	nop
200193de:	3710      	adds	r7, #16
200193e0:	46bd      	mov	sp, r7
200193e2:	bd80      	pop	{r7, pc}

200193e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
200193e4:	b580      	push	{r7, lr}
200193e6:	b084      	sub	sp, #16
200193e8:	af00      	add	r7, sp, #0
200193ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
200193ec:	687b      	ldr	r3, [r7, #4]
200193ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200193f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
200193f2:	68fb      	ldr	r3, [r7, #12]
200193f4:	2200      	movs	r2, #0
200193f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
200193f8:	68fb      	ldr	r3, [r7, #12]
200193fa:	2200      	movs	r2, #0
200193fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
200193fe:	68f8      	ldr	r0, [r7, #12]
20019400:	f7ff fe88 	bl	20019114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20019404:	bf00      	nop
20019406:	3710      	adds	r7, #16
20019408:	46bd      	mov	sp, r7
2001940a:	bd80      	pop	{r7, pc}

2001940c <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
2001940c:	b580      	push	{r7, lr}
2001940e:	b086      	sub	sp, #24
20019410:	af00      	add	r7, sp, #0
20019412:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20019414:	687b      	ldr	r3, [r7, #4]
20019416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20019418:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
2001941a:	697b      	ldr	r3, [r7, #20]
2001941c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2001941e:	2200      	movs	r2, #0
20019420:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20019422:	4b2d      	ldr	r3, [pc, #180]	; (200194d8 <SPI_DMATxAbortCallback+0xcc>)
20019424:	681b      	ldr	r3, [r3, #0]
20019426:	4a2d      	ldr	r2, [pc, #180]	; (200194dc <SPI_DMATxAbortCallback+0xd0>)
20019428:	fba2 2303 	umull	r2, r3, r2, r3
2001942c:	0a5b      	lsrs	r3, r3, #9
2001942e:	2264      	movs	r2, #100	; 0x64
20019430:	fb02 f303 	mul.w	r3, r2, r3
20019434:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20019436:	697b      	ldr	r3, [r7, #20]
20019438:	681b      	ldr	r3, [r3, #0]
2001943a:	685a      	ldr	r2, [r3, #4]
2001943c:	697b      	ldr	r3, [r7, #20]
2001943e:	681b      	ldr	r3, [r3, #0]
20019440:	f022 0202 	bic.w	r2, r2, #2
20019444:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
20019446:	693b      	ldr	r3, [r7, #16]
20019448:	2b00      	cmp	r3, #0
2001944a:	d106      	bne.n	2001945a <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2001944c:	697b      	ldr	r3, [r7, #20]
2001944e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019450:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20019454:	697b      	ldr	r3, [r7, #20]
20019456:	655a      	str	r2, [r3, #84]	; 0x54
      break;
20019458:	e009      	b.n	2001946e <SPI_DMATxAbortCallback+0x62>
    }
    count--;
2001945a:	693b      	ldr	r3, [r7, #16]
2001945c:	3b01      	subs	r3, #1
2001945e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20019460:	697b      	ldr	r3, [r7, #20]
20019462:	681b      	ldr	r3, [r3, #0]
20019464:	689b      	ldr	r3, [r3, #8]
20019466:	f003 0302 	and.w	r3, r3, #2
2001946a:	2b00      	cmp	r3, #0
2001946c:	d0eb      	beq.n	20019446 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
2001946e:	697b      	ldr	r3, [r7, #20]
20019470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20019472:	2b00      	cmp	r3, #0
20019474:	d004      	beq.n	20019480 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
20019476:	697b      	ldr	r3, [r7, #20]
20019478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2001947a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2001947c:	2b00      	cmp	r3, #0
2001947e:	d126      	bne.n	200194ce <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
20019480:	697b      	ldr	r3, [r7, #20]
20019482:	2200      	movs	r2, #0
20019484:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
20019486:	697b      	ldr	r3, [r7, #20]
20019488:	2200      	movs	r2, #0
2001948a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
2001948c:	697b      	ldr	r3, [r7, #20]
2001948e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019490:	2b40      	cmp	r3, #64	; 0x40
20019492:	d002      	beq.n	2001949a <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20019494:	697b      	ldr	r3, [r7, #20]
20019496:	2200      	movs	r2, #0
20019498:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
2001949a:	2300      	movs	r3, #0
2001949c:	60fb      	str	r3, [r7, #12]
2001949e:	697b      	ldr	r3, [r7, #20]
200194a0:	681b      	ldr	r3, [r3, #0]
200194a2:	68db      	ldr	r3, [r3, #12]
200194a4:	60fb      	str	r3, [r7, #12]
200194a6:	697b      	ldr	r3, [r7, #20]
200194a8:	681b      	ldr	r3, [r3, #0]
200194aa:	689b      	ldr	r3, [r3, #8]
200194ac:	60fb      	str	r3, [r7, #12]
200194ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
200194b0:	2300      	movs	r3, #0
200194b2:	60bb      	str	r3, [r7, #8]
200194b4:	697b      	ldr	r3, [r7, #20]
200194b6:	681b      	ldr	r3, [r3, #0]
200194b8:	689b      	ldr	r3, [r3, #8]
200194ba:	60bb      	str	r3, [r7, #8]
200194bc:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
200194be:	697b      	ldr	r3, [r7, #20]
200194c0:	2201      	movs	r2, #1
200194c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
200194c6:	6978      	ldr	r0, [r7, #20]
200194c8:	f7ff fe2e 	bl	20019128 <HAL_SPI_AbortCpltCallback>
200194cc:	e000      	b.n	200194d0 <SPI_DMATxAbortCallback+0xc4>
      return;
200194ce:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
200194d0:	3718      	adds	r7, #24
200194d2:	46bd      	mov	sp, r7
200194d4:	bd80      	pop	{r7, pc}
200194d6:	bf00      	nop
200194d8:	2000e4dc 	.word	0x2000e4dc
200194dc:	057619f1 	.word	0x057619f1

200194e0 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
200194e0:	b580      	push	{r7, lr}
200194e2:	b086      	sub	sp, #24
200194e4:	af00      	add	r7, sp, #0
200194e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
200194e8:	687b      	ldr	r3, [r7, #4]
200194ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200194ec:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
200194ee:	697b      	ldr	r3, [r7, #20]
200194f0:	681b      	ldr	r3, [r3, #0]
200194f2:	681a      	ldr	r2, [r3, #0]
200194f4:	697b      	ldr	r3, [r7, #20]
200194f6:	681b      	ldr	r3, [r3, #0]
200194f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200194fc:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
200194fe:	697b      	ldr	r3, [r7, #20]
20019500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20019502:	2200      	movs	r2, #0
20019504:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20019506:	697b      	ldr	r3, [r7, #20]
20019508:	681b      	ldr	r3, [r3, #0]
2001950a:	685a      	ldr	r2, [r3, #4]
2001950c:	697b      	ldr	r3, [r7, #20]
2001950e:	681b      	ldr	r3, [r3, #0]
20019510:	f022 0201 	bic.w	r2, r2, #1
20019514:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
20019516:	f7f7 fb45 	bl	20010ba4 <HAL_GetTick>
2001951a:	4603      	mov	r3, r0
2001951c:	461a      	mov	r2, r3
2001951e:	2164      	movs	r1, #100	; 0x64
20019520:	6978      	ldr	r0, [r7, #20]
20019522:	f000 fa5b 	bl	200199dc <SPI_EndRxTxTransaction>
20019526:	4603      	mov	r3, r0
20019528:	2b00      	cmp	r3, #0
2001952a:	d005      	beq.n	20019538 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2001952c:	697b      	ldr	r3, [r7, #20]
2001952e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019530:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20019534:	697b      	ldr	r3, [r7, #20]
20019536:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
20019538:	697b      	ldr	r3, [r7, #20]
2001953a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2001953c:	2b00      	cmp	r3, #0
2001953e:	d004      	beq.n	2001954a <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
20019540:	697b      	ldr	r3, [r7, #20]
20019542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20019544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20019546:	2b00      	cmp	r3, #0
20019548:	d126      	bne.n	20019598 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
2001954a:	697b      	ldr	r3, [r7, #20]
2001954c:	2200      	movs	r2, #0
2001954e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
20019550:	697b      	ldr	r3, [r7, #20]
20019552:	2200      	movs	r2, #0
20019554:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
20019556:	697b      	ldr	r3, [r7, #20]
20019558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2001955a:	2b40      	cmp	r3, #64	; 0x40
2001955c:	d002      	beq.n	20019564 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2001955e:	697b      	ldr	r3, [r7, #20]
20019560:	2200      	movs	r2, #0
20019562:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
20019564:	2300      	movs	r3, #0
20019566:	613b      	str	r3, [r7, #16]
20019568:	697b      	ldr	r3, [r7, #20]
2001956a:	681b      	ldr	r3, [r3, #0]
2001956c:	68db      	ldr	r3, [r3, #12]
2001956e:	613b      	str	r3, [r7, #16]
20019570:	697b      	ldr	r3, [r7, #20]
20019572:	681b      	ldr	r3, [r3, #0]
20019574:	689b      	ldr	r3, [r3, #8]
20019576:	613b      	str	r3, [r7, #16]
20019578:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
2001957a:	2300      	movs	r3, #0
2001957c:	60fb      	str	r3, [r7, #12]
2001957e:	697b      	ldr	r3, [r7, #20]
20019580:	681b      	ldr	r3, [r3, #0]
20019582:	689b      	ldr	r3, [r3, #8]
20019584:	60fb      	str	r3, [r7, #12]
20019586:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
20019588:	697b      	ldr	r3, [r7, #20]
2001958a:	2201      	movs	r2, #1
2001958c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
20019590:	6978      	ldr	r0, [r7, #20]
20019592:	f7ff fdc9 	bl	20019128 <HAL_SPI_AbortCpltCallback>
20019596:	e000      	b.n	2001959a <SPI_DMARxAbortCallback+0xba>
      return;
20019598:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2001959a:	3718      	adds	r7, #24
2001959c:	46bd      	mov	sp, r7
2001959e:	bd80      	pop	{r7, pc}

200195a0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
200195a0:	b580      	push	{r7, lr}
200195a2:	b082      	sub	sp, #8
200195a4:	af00      	add	r7, sp, #0
200195a6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
200195a8:	687b      	ldr	r3, [r7, #4]
200195aa:	681b      	ldr	r3, [r3, #0]
200195ac:	f103 020c 	add.w	r2, r3, #12
200195b0:	687b      	ldr	r3, [r7, #4]
200195b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200195b4:	7812      	ldrb	r2, [r2, #0]
200195b6:	b2d2      	uxtb	r2, r2
200195b8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
200195ba:	687b      	ldr	r3, [r7, #4]
200195bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200195be:	1c5a      	adds	r2, r3, #1
200195c0:	687b      	ldr	r3, [r7, #4]
200195c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
200195c4:	687b      	ldr	r3, [r7, #4]
200195c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200195c8:	b29b      	uxth	r3, r3
200195ca:	3b01      	subs	r3, #1
200195cc:	b29a      	uxth	r2, r3
200195ce:	687b      	ldr	r3, [r7, #4]
200195d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
200195d2:	687b      	ldr	r3, [r7, #4]
200195d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200195d6:	b29b      	uxth	r3, r3
200195d8:	2b00      	cmp	r3, #0
200195da:	d10f      	bne.n	200195fc <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
200195dc:	687b      	ldr	r3, [r7, #4]
200195de:	681b      	ldr	r3, [r3, #0]
200195e0:	685a      	ldr	r2, [r3, #4]
200195e2:	687b      	ldr	r3, [r7, #4]
200195e4:	681b      	ldr	r3, [r3, #0]
200195e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
200195ea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
200195ec:	687b      	ldr	r3, [r7, #4]
200195ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200195f0:	b29b      	uxth	r3, r3
200195f2:	2b00      	cmp	r3, #0
200195f4:	d102      	bne.n	200195fc <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
200195f6:	6878      	ldr	r0, [r7, #4]
200195f8:	f000 fa32 	bl	20019a60 <SPI_CloseRxTx_ISR>
    }
  }
}
200195fc:	bf00      	nop
200195fe:	3708      	adds	r7, #8
20019600:	46bd      	mov	sp, r7
20019602:	bd80      	pop	{r7, pc}

20019604 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
20019604:	b580      	push	{r7, lr}
20019606:	b082      	sub	sp, #8
20019608:	af00      	add	r7, sp, #0
2001960a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
2001960c:	687b      	ldr	r3, [r7, #4]
2001960e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20019610:	687b      	ldr	r3, [r7, #4]
20019612:	681b      	ldr	r3, [r3, #0]
20019614:	330c      	adds	r3, #12
20019616:	7812      	ldrb	r2, [r2, #0]
20019618:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
2001961a:	687b      	ldr	r3, [r7, #4]
2001961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2001961e:	1c5a      	adds	r2, r3, #1
20019620:	687b      	ldr	r3, [r7, #4]
20019622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
20019624:	687b      	ldr	r3, [r7, #4]
20019626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20019628:	b29b      	uxth	r3, r3
2001962a:	3b01      	subs	r3, #1
2001962c:	b29a      	uxth	r2, r3
2001962e:	687b      	ldr	r3, [r7, #4]
20019630:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
20019632:	687b      	ldr	r3, [r7, #4]
20019634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20019636:	b29b      	uxth	r3, r3
20019638:	2b00      	cmp	r3, #0
2001963a:	d10f      	bne.n	2001965c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
2001963c:	687b      	ldr	r3, [r7, #4]
2001963e:	681b      	ldr	r3, [r3, #0]
20019640:	685a      	ldr	r2, [r3, #4]
20019642:	687b      	ldr	r3, [r7, #4]
20019644:	681b      	ldr	r3, [r3, #0]
20019646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2001964a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
2001964c:	687b      	ldr	r3, [r7, #4]
2001964e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20019650:	b29b      	uxth	r3, r3
20019652:	2b00      	cmp	r3, #0
20019654:	d102      	bne.n	2001965c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
20019656:	6878      	ldr	r0, [r7, #4]
20019658:	f000 fa02 	bl	20019a60 <SPI_CloseRxTx_ISR>
    }
  }
}
2001965c:	bf00      	nop
2001965e:	3708      	adds	r7, #8
20019660:	46bd      	mov	sp, r7
20019662:	bd80      	pop	{r7, pc}

20019664 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
20019664:	b580      	push	{r7, lr}
20019666:	b082      	sub	sp, #8
20019668:	af00      	add	r7, sp, #0
2001966a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
2001966c:	687b      	ldr	r3, [r7, #4]
2001966e:	681b      	ldr	r3, [r3, #0]
20019670:	68da      	ldr	r2, [r3, #12]
20019672:	687b      	ldr	r3, [r7, #4]
20019674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20019676:	b292      	uxth	r2, r2
20019678:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
2001967a:	687b      	ldr	r3, [r7, #4]
2001967c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2001967e:	1c9a      	adds	r2, r3, #2
20019680:	687b      	ldr	r3, [r7, #4]
20019682:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
20019684:	687b      	ldr	r3, [r7, #4]
20019686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20019688:	b29b      	uxth	r3, r3
2001968a:	3b01      	subs	r3, #1
2001968c:	b29a      	uxth	r2, r3
2001968e:	687b      	ldr	r3, [r7, #4]
20019690:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
20019692:	687b      	ldr	r3, [r7, #4]
20019694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20019696:	b29b      	uxth	r3, r3
20019698:	2b00      	cmp	r3, #0
2001969a:	d10f      	bne.n	200196bc <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
2001969c:	687b      	ldr	r3, [r7, #4]
2001969e:	681b      	ldr	r3, [r3, #0]
200196a0:	685a      	ldr	r2, [r3, #4]
200196a2:	687b      	ldr	r3, [r7, #4]
200196a4:	681b      	ldr	r3, [r3, #0]
200196a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200196aa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
200196ac:	687b      	ldr	r3, [r7, #4]
200196ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200196b0:	b29b      	uxth	r3, r3
200196b2:	2b00      	cmp	r3, #0
200196b4:	d102      	bne.n	200196bc <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
200196b6:	6878      	ldr	r0, [r7, #4]
200196b8:	f000 f9d2 	bl	20019a60 <SPI_CloseRxTx_ISR>
    }
  }
}
200196bc:	bf00      	nop
200196be:	3708      	adds	r7, #8
200196c0:	46bd      	mov	sp, r7
200196c2:	bd80      	pop	{r7, pc}

200196c4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
200196c4:	b580      	push	{r7, lr}
200196c6:	b082      	sub	sp, #8
200196c8:	af00      	add	r7, sp, #0
200196ca:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
200196cc:	687b      	ldr	r3, [r7, #4]
200196ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200196d0:	881a      	ldrh	r2, [r3, #0]
200196d2:	687b      	ldr	r3, [r7, #4]
200196d4:	681b      	ldr	r3, [r3, #0]
200196d6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
200196d8:	687b      	ldr	r3, [r7, #4]
200196da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200196dc:	1c9a      	adds	r2, r3, #2
200196de:	687b      	ldr	r3, [r7, #4]
200196e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
200196e2:	687b      	ldr	r3, [r7, #4]
200196e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200196e6:	b29b      	uxth	r3, r3
200196e8:	3b01      	subs	r3, #1
200196ea:	b29a      	uxth	r2, r3
200196ec:	687b      	ldr	r3, [r7, #4]
200196ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
200196f0:	687b      	ldr	r3, [r7, #4]
200196f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200196f4:	b29b      	uxth	r3, r3
200196f6:	2b00      	cmp	r3, #0
200196f8:	d10f      	bne.n	2001971a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
200196fa:	687b      	ldr	r3, [r7, #4]
200196fc:	681b      	ldr	r3, [r3, #0]
200196fe:	685a      	ldr	r2, [r3, #4]
20019700:	687b      	ldr	r3, [r7, #4]
20019702:	681b      	ldr	r3, [r3, #0]
20019704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20019708:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
2001970a:	687b      	ldr	r3, [r7, #4]
2001970c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2001970e:	b29b      	uxth	r3, r3
20019710:	2b00      	cmp	r3, #0
20019712:	d102      	bne.n	2001971a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
20019714:	6878      	ldr	r0, [r7, #4]
20019716:	f000 f9a3 	bl	20019a60 <SPI_CloseRxTx_ISR>
    }
  }
}
2001971a:	bf00      	nop
2001971c:	3708      	adds	r7, #8
2001971e:	46bd      	mov	sp, r7
20019720:	bd80      	pop	{r7, pc}

20019722 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
20019722:	b580      	push	{r7, lr}
20019724:	b082      	sub	sp, #8
20019726:	af00      	add	r7, sp, #0
20019728:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
2001972a:	687b      	ldr	r3, [r7, #4]
2001972c:	681b      	ldr	r3, [r3, #0]
2001972e:	f103 020c 	add.w	r2, r3, #12
20019732:	687b      	ldr	r3, [r7, #4]
20019734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20019736:	7812      	ldrb	r2, [r2, #0]
20019738:	b2d2      	uxtb	r2, r2
2001973a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
2001973c:	687b      	ldr	r3, [r7, #4]
2001973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20019740:	1c5a      	adds	r2, r3, #1
20019742:	687b      	ldr	r3, [r7, #4]
20019744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
20019746:	687b      	ldr	r3, [r7, #4]
20019748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2001974a:	b29b      	uxth	r3, r3
2001974c:	3b01      	subs	r3, #1
2001974e:	b29a      	uxth	r2, r3
20019750:	687b      	ldr	r3, [r7, #4]
20019752:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
20019754:	687b      	ldr	r3, [r7, #4]
20019756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20019758:	b29b      	uxth	r3, r3
2001975a:	2b00      	cmp	r3, #0
2001975c:	d102      	bne.n	20019764 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
2001975e:	6878      	ldr	r0, [r7, #4]
20019760:	f000 f9f2 	bl	20019b48 <SPI_CloseRx_ISR>
  }
}
20019764:	bf00      	nop
20019766:	3708      	adds	r7, #8
20019768:	46bd      	mov	sp, r7
2001976a:	bd80      	pop	{r7, pc}

2001976c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
2001976c:	b580      	push	{r7, lr}
2001976e:	b082      	sub	sp, #8
20019770:	af00      	add	r7, sp, #0
20019772:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
20019774:	687b      	ldr	r3, [r7, #4]
20019776:	681b      	ldr	r3, [r3, #0]
20019778:	68da      	ldr	r2, [r3, #12]
2001977a:	687b      	ldr	r3, [r7, #4]
2001977c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2001977e:	b292      	uxth	r2, r2
20019780:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
20019782:	687b      	ldr	r3, [r7, #4]
20019784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20019786:	1c9a      	adds	r2, r3, #2
20019788:	687b      	ldr	r3, [r7, #4]
2001978a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
2001978c:	687b      	ldr	r3, [r7, #4]
2001978e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20019790:	b29b      	uxth	r3, r3
20019792:	3b01      	subs	r3, #1
20019794:	b29a      	uxth	r2, r3
20019796:	687b      	ldr	r3, [r7, #4]
20019798:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
2001979a:	687b      	ldr	r3, [r7, #4]
2001979c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2001979e:	b29b      	uxth	r3, r3
200197a0:	2b00      	cmp	r3, #0
200197a2:	d102      	bne.n	200197aa <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
200197a4:	6878      	ldr	r0, [r7, #4]
200197a6:	f000 f9cf 	bl	20019b48 <SPI_CloseRx_ISR>
  }
}
200197aa:	bf00      	nop
200197ac:	3708      	adds	r7, #8
200197ae:	46bd      	mov	sp, r7
200197b0:	bd80      	pop	{r7, pc}

200197b2 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
200197b2:	b580      	push	{r7, lr}
200197b4:	b082      	sub	sp, #8
200197b6:	af00      	add	r7, sp, #0
200197b8:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
200197ba:	687b      	ldr	r3, [r7, #4]
200197bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200197be:	687b      	ldr	r3, [r7, #4]
200197c0:	681b      	ldr	r3, [r3, #0]
200197c2:	330c      	adds	r3, #12
200197c4:	7812      	ldrb	r2, [r2, #0]
200197c6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
200197c8:	687b      	ldr	r3, [r7, #4]
200197ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200197cc:	1c5a      	adds	r2, r3, #1
200197ce:	687b      	ldr	r3, [r7, #4]
200197d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
200197d2:	687b      	ldr	r3, [r7, #4]
200197d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200197d6:	b29b      	uxth	r3, r3
200197d8:	3b01      	subs	r3, #1
200197da:	b29a      	uxth	r2, r3
200197dc:	687b      	ldr	r3, [r7, #4]
200197de:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
200197e0:	687b      	ldr	r3, [r7, #4]
200197e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200197e4:	b29b      	uxth	r3, r3
200197e6:	2b00      	cmp	r3, #0
200197e8:	d102      	bne.n	200197f0 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
200197ea:	6878      	ldr	r0, [r7, #4]
200197ec:	f000 f9ec 	bl	20019bc8 <SPI_CloseTx_ISR>
  }
}
200197f0:	bf00      	nop
200197f2:	3708      	adds	r7, #8
200197f4:	46bd      	mov	sp, r7
200197f6:	bd80      	pop	{r7, pc}

200197f8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
200197f8:	b580      	push	{r7, lr}
200197fa:	b082      	sub	sp, #8
200197fc:	af00      	add	r7, sp, #0
200197fe:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20019800:	687b      	ldr	r3, [r7, #4]
20019802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20019804:	881a      	ldrh	r2, [r3, #0]
20019806:	687b      	ldr	r3, [r7, #4]
20019808:	681b      	ldr	r3, [r3, #0]
2001980a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
2001980c:	687b      	ldr	r3, [r7, #4]
2001980e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20019810:	1c9a      	adds	r2, r3, #2
20019812:	687b      	ldr	r3, [r7, #4]
20019814:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
20019816:	687b      	ldr	r3, [r7, #4]
20019818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2001981a:	b29b      	uxth	r3, r3
2001981c:	3b01      	subs	r3, #1
2001981e:	b29a      	uxth	r2, r3
20019820:	687b      	ldr	r3, [r7, #4]
20019822:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
20019824:	687b      	ldr	r3, [r7, #4]
20019826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20019828:	b29b      	uxth	r3, r3
2001982a:	2b00      	cmp	r3, #0
2001982c:	d102      	bne.n	20019834 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
2001982e:	6878      	ldr	r0, [r7, #4]
20019830:	f000 f9ca 	bl	20019bc8 <SPI_CloseTx_ISR>
  }
}
20019834:	bf00      	nop
20019836:	3708      	adds	r7, #8
20019838:	46bd      	mov	sp, r7
2001983a:	bd80      	pop	{r7, pc}

2001983c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
2001983c:	b580      	push	{r7, lr}
2001983e:	b084      	sub	sp, #16
20019840:	af00      	add	r7, sp, #0
20019842:	60f8      	str	r0, [r7, #12]
20019844:	60b9      	str	r1, [r7, #8]
20019846:	603b      	str	r3, [r7, #0]
20019848:	4613      	mov	r3, r2
2001984a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
2001984c:	e04c      	b.n	200198e8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
2001984e:	683b      	ldr	r3, [r7, #0]
20019850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20019854:	d048      	beq.n	200198e8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
20019856:	f7f7 f9a5 	bl	20010ba4 <HAL_GetTick>
2001985a:	4602      	mov	r2, r0
2001985c:	69bb      	ldr	r3, [r7, #24]
2001985e:	1ad3      	subs	r3, r2, r3
20019860:	683a      	ldr	r2, [r7, #0]
20019862:	429a      	cmp	r2, r3
20019864:	d902      	bls.n	2001986c <SPI_WaitFlagStateUntilTimeout+0x30>
20019866:	683b      	ldr	r3, [r7, #0]
20019868:	2b00      	cmp	r3, #0
2001986a:	d13d      	bne.n	200198e8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
2001986c:	68fb      	ldr	r3, [r7, #12]
2001986e:	681b      	ldr	r3, [r3, #0]
20019870:	685a      	ldr	r2, [r3, #4]
20019872:	68fb      	ldr	r3, [r7, #12]
20019874:	681b      	ldr	r3, [r3, #0]
20019876:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
2001987a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
2001987c:	68fb      	ldr	r3, [r7, #12]
2001987e:	685b      	ldr	r3, [r3, #4]
20019880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20019884:	d111      	bne.n	200198aa <SPI_WaitFlagStateUntilTimeout+0x6e>
20019886:	68fb      	ldr	r3, [r7, #12]
20019888:	689b      	ldr	r3, [r3, #8]
2001988a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2001988e:	d004      	beq.n	2001989a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
20019890:	68fb      	ldr	r3, [r7, #12]
20019892:	689b      	ldr	r3, [r3, #8]
20019894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20019898:	d107      	bne.n	200198aa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
2001989a:	68fb      	ldr	r3, [r7, #12]
2001989c:	681b      	ldr	r3, [r3, #0]
2001989e:	681a      	ldr	r2, [r3, #0]
200198a0:	68fb      	ldr	r3, [r7, #12]
200198a2:	681b      	ldr	r3, [r3, #0]
200198a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200198a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
200198aa:	68fb      	ldr	r3, [r7, #12]
200198ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200198ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
200198b2:	d10f      	bne.n	200198d4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
200198b4:	68fb      	ldr	r3, [r7, #12]
200198b6:	681b      	ldr	r3, [r3, #0]
200198b8:	681a      	ldr	r2, [r3, #0]
200198ba:	68fb      	ldr	r3, [r7, #12]
200198bc:	681b      	ldr	r3, [r3, #0]
200198be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
200198c2:	601a      	str	r2, [r3, #0]
200198c4:	68fb      	ldr	r3, [r7, #12]
200198c6:	681b      	ldr	r3, [r3, #0]
200198c8:	681a      	ldr	r2, [r3, #0]
200198ca:	68fb      	ldr	r3, [r7, #12]
200198cc:	681b      	ldr	r3, [r3, #0]
200198ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
200198d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
200198d4:	68fb      	ldr	r3, [r7, #12]
200198d6:	2201      	movs	r2, #1
200198d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
200198dc:	68fb      	ldr	r3, [r7, #12]
200198de:	2200      	movs	r2, #0
200198e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
200198e4:	2303      	movs	r3, #3
200198e6:	e00f      	b.n	20019908 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
200198e8:	68fb      	ldr	r3, [r7, #12]
200198ea:	681b      	ldr	r3, [r3, #0]
200198ec:	689a      	ldr	r2, [r3, #8]
200198ee:	68bb      	ldr	r3, [r7, #8]
200198f0:	4013      	ands	r3, r2
200198f2:	68ba      	ldr	r2, [r7, #8]
200198f4:	429a      	cmp	r2, r3
200198f6:	bf0c      	ite	eq
200198f8:	2301      	moveq	r3, #1
200198fa:	2300      	movne	r3, #0
200198fc:	b2db      	uxtb	r3, r3
200198fe:	461a      	mov	r2, r3
20019900:	79fb      	ldrb	r3, [r7, #7]
20019902:	429a      	cmp	r2, r3
20019904:	d1a3      	bne.n	2001984e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
20019906:	2300      	movs	r3, #0
}
20019908:	4618      	mov	r0, r3
2001990a:	3710      	adds	r7, #16
2001990c:	46bd      	mov	sp, r7
2001990e:	bd80      	pop	{r7, pc}

20019910 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
20019910:	b580      	push	{r7, lr}
20019912:	b086      	sub	sp, #24
20019914:	af02      	add	r7, sp, #8
20019916:	60f8      	str	r0, [r7, #12]
20019918:	60b9      	str	r1, [r7, #8]
2001991a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
2001991c:	68fb      	ldr	r3, [r7, #12]
2001991e:	685b      	ldr	r3, [r3, #4]
20019920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20019924:	d111      	bne.n	2001994a <SPI_EndRxTransaction+0x3a>
20019926:	68fb      	ldr	r3, [r7, #12]
20019928:	689b      	ldr	r3, [r3, #8]
2001992a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2001992e:	d004      	beq.n	2001993a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
20019930:	68fb      	ldr	r3, [r7, #12]
20019932:	689b      	ldr	r3, [r3, #8]
20019934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20019938:	d107      	bne.n	2001994a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
2001993a:	68fb      	ldr	r3, [r7, #12]
2001993c:	681b      	ldr	r3, [r3, #0]
2001993e:	681a      	ldr	r2, [r3, #0]
20019940:	68fb      	ldr	r3, [r7, #12]
20019942:	681b      	ldr	r3, [r3, #0]
20019944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20019948:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2001994a:	68fb      	ldr	r3, [r7, #12]
2001994c:	685b      	ldr	r3, [r3, #4]
2001994e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20019952:	d12a      	bne.n	200199aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
20019954:	68fb      	ldr	r3, [r7, #12]
20019956:	689b      	ldr	r3, [r3, #8]
20019958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2001995c:	d012      	beq.n	20019984 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
2001995e:	687b      	ldr	r3, [r7, #4]
20019960:	9300      	str	r3, [sp, #0]
20019962:	68bb      	ldr	r3, [r7, #8]
20019964:	2200      	movs	r2, #0
20019966:	2180      	movs	r1, #128	; 0x80
20019968:	68f8      	ldr	r0, [r7, #12]
2001996a:	f7ff ff67 	bl	2001983c <SPI_WaitFlagStateUntilTimeout>
2001996e:	4603      	mov	r3, r0
20019970:	2b00      	cmp	r3, #0
20019972:	d02d      	beq.n	200199d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20019974:	68fb      	ldr	r3, [r7, #12]
20019976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019978:	f043 0220 	orr.w	r2, r3, #32
2001997c:	68fb      	ldr	r3, [r7, #12]
2001997e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
20019980:	2303      	movs	r3, #3
20019982:	e026      	b.n	200199d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
20019984:	687b      	ldr	r3, [r7, #4]
20019986:	9300      	str	r3, [sp, #0]
20019988:	68bb      	ldr	r3, [r7, #8]
2001998a:	2200      	movs	r2, #0
2001998c:	2101      	movs	r1, #1
2001998e:	68f8      	ldr	r0, [r7, #12]
20019990:	f7ff ff54 	bl	2001983c <SPI_WaitFlagStateUntilTimeout>
20019994:	4603      	mov	r3, r0
20019996:	2b00      	cmp	r3, #0
20019998:	d01a      	beq.n	200199d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2001999a:	68fb      	ldr	r3, [r7, #12]
2001999c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2001999e:	f043 0220 	orr.w	r2, r3, #32
200199a2:	68fb      	ldr	r3, [r7, #12]
200199a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
200199a6:	2303      	movs	r3, #3
200199a8:	e013      	b.n	200199d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
200199aa:	687b      	ldr	r3, [r7, #4]
200199ac:	9300      	str	r3, [sp, #0]
200199ae:	68bb      	ldr	r3, [r7, #8]
200199b0:	2200      	movs	r2, #0
200199b2:	2101      	movs	r1, #1
200199b4:	68f8      	ldr	r0, [r7, #12]
200199b6:	f7ff ff41 	bl	2001983c <SPI_WaitFlagStateUntilTimeout>
200199ba:	4603      	mov	r3, r0
200199bc:	2b00      	cmp	r3, #0
200199be:	d007      	beq.n	200199d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200199c0:	68fb      	ldr	r3, [r7, #12]
200199c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200199c4:	f043 0220 	orr.w	r2, r3, #32
200199c8:	68fb      	ldr	r3, [r7, #12]
200199ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
200199cc:	2303      	movs	r3, #3
200199ce:	e000      	b.n	200199d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
200199d0:	2300      	movs	r3, #0
}
200199d2:	4618      	mov	r0, r3
200199d4:	3710      	adds	r7, #16
200199d6:	46bd      	mov	sp, r7
200199d8:	bd80      	pop	{r7, pc}
	...

200199dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
200199dc:	b580      	push	{r7, lr}
200199de:	b088      	sub	sp, #32
200199e0:	af02      	add	r7, sp, #8
200199e2:	60f8      	str	r0, [r7, #12]
200199e4:	60b9      	str	r1, [r7, #8]
200199e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
200199e8:	4b1b      	ldr	r3, [pc, #108]	; (20019a58 <SPI_EndRxTxTransaction+0x7c>)
200199ea:	681b      	ldr	r3, [r3, #0]
200199ec:	4a1b      	ldr	r2, [pc, #108]	; (20019a5c <SPI_EndRxTxTransaction+0x80>)
200199ee:	fba2 2303 	umull	r2, r3, r2, r3
200199f2:	0d5b      	lsrs	r3, r3, #21
200199f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
200199f8:	fb02 f303 	mul.w	r3, r2, r3
200199fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
200199fe:	68fb      	ldr	r3, [r7, #12]
20019a00:	685b      	ldr	r3, [r3, #4]
20019a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20019a06:	d112      	bne.n	20019a2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
20019a08:	687b      	ldr	r3, [r7, #4]
20019a0a:	9300      	str	r3, [sp, #0]
20019a0c:	68bb      	ldr	r3, [r7, #8]
20019a0e:	2200      	movs	r2, #0
20019a10:	2180      	movs	r1, #128	; 0x80
20019a12:	68f8      	ldr	r0, [r7, #12]
20019a14:	f7ff ff12 	bl	2001983c <SPI_WaitFlagStateUntilTimeout>
20019a18:	4603      	mov	r3, r0
20019a1a:	2b00      	cmp	r3, #0
20019a1c:	d016      	beq.n	20019a4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20019a1e:	68fb      	ldr	r3, [r7, #12]
20019a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019a22:	f043 0220 	orr.w	r2, r3, #32
20019a26:	68fb      	ldr	r3, [r7, #12]
20019a28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
20019a2a:	2303      	movs	r3, #3
20019a2c:	e00f      	b.n	20019a4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
20019a2e:	697b      	ldr	r3, [r7, #20]
20019a30:	2b00      	cmp	r3, #0
20019a32:	d00a      	beq.n	20019a4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
20019a34:	697b      	ldr	r3, [r7, #20]
20019a36:	3b01      	subs	r3, #1
20019a38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
20019a3a:	68fb      	ldr	r3, [r7, #12]
20019a3c:	681b      	ldr	r3, [r3, #0]
20019a3e:	689b      	ldr	r3, [r3, #8]
20019a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
20019a44:	2b80      	cmp	r3, #128	; 0x80
20019a46:	d0f2      	beq.n	20019a2e <SPI_EndRxTxTransaction+0x52>
20019a48:	e000      	b.n	20019a4c <SPI_EndRxTxTransaction+0x70>
        break;
20019a4a:	bf00      	nop
  }

  return HAL_OK;
20019a4c:	2300      	movs	r3, #0
}
20019a4e:	4618      	mov	r0, r3
20019a50:	3718      	adds	r7, #24
20019a52:	46bd      	mov	sp, r7
20019a54:	bd80      	pop	{r7, pc}
20019a56:	bf00      	nop
20019a58:	2000e4dc 	.word	0x2000e4dc
20019a5c:	165e9f81 	.word	0x165e9f81

20019a60 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
20019a60:	b580      	push	{r7, lr}
20019a62:	b086      	sub	sp, #24
20019a64:	af00      	add	r7, sp, #0
20019a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20019a68:	4b35      	ldr	r3, [pc, #212]	; (20019b40 <SPI_CloseRxTx_ISR+0xe0>)
20019a6a:	681b      	ldr	r3, [r3, #0]
20019a6c:	4a35      	ldr	r2, [pc, #212]	; (20019b44 <SPI_CloseRxTx_ISR+0xe4>)
20019a6e:	fba2 2303 	umull	r2, r3, r2, r3
20019a72:	0a5b      	lsrs	r3, r3, #9
20019a74:	2264      	movs	r2, #100	; 0x64
20019a76:	fb02 f303 	mul.w	r3, r2, r3
20019a7a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
20019a7c:	f7f7 f892 	bl	20010ba4 <HAL_GetTick>
20019a80:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
20019a82:	687b      	ldr	r3, [r7, #4]
20019a84:	681b      	ldr	r3, [r3, #0]
20019a86:	685a      	ldr	r2, [r3, #4]
20019a88:	687b      	ldr	r3, [r7, #4]
20019a8a:	681b      	ldr	r3, [r3, #0]
20019a8c:	f022 0220 	bic.w	r2, r2, #32
20019a90:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
20019a92:	693b      	ldr	r3, [r7, #16]
20019a94:	2b00      	cmp	r3, #0
20019a96:	d106      	bne.n	20019aa6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20019a98:	687b      	ldr	r3, [r7, #4]
20019a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019a9c:	f043 0220 	orr.w	r2, r3, #32
20019aa0:	687b      	ldr	r3, [r7, #4]
20019aa2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
20019aa4:	e009      	b.n	20019aba <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
20019aa6:	693b      	ldr	r3, [r7, #16]
20019aa8:	3b01      	subs	r3, #1
20019aaa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20019aac:	687b      	ldr	r3, [r7, #4]
20019aae:	681b      	ldr	r3, [r3, #0]
20019ab0:	689b      	ldr	r3, [r3, #8]
20019ab2:	f003 0302 	and.w	r3, r3, #2
20019ab6:	2b00      	cmp	r3, #0
20019ab8:	d0eb      	beq.n	20019a92 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
20019aba:	697a      	ldr	r2, [r7, #20]
20019abc:	2164      	movs	r1, #100	; 0x64
20019abe:	6878      	ldr	r0, [r7, #4]
20019ac0:	f7ff ff8c 	bl	200199dc <SPI_EndRxTxTransaction>
20019ac4:	4603      	mov	r3, r0
20019ac6:	2b00      	cmp	r3, #0
20019ac8:	d005      	beq.n	20019ad6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20019aca:	687b      	ldr	r3, [r7, #4]
20019acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019ace:	f043 0220 	orr.w	r2, r3, #32
20019ad2:	687b      	ldr	r3, [r7, #4]
20019ad4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20019ad6:	687b      	ldr	r3, [r7, #4]
20019ad8:	689b      	ldr	r3, [r3, #8]
20019ada:	2b00      	cmp	r3, #0
20019adc:	d10a      	bne.n	20019af4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20019ade:	2300      	movs	r3, #0
20019ae0:	60fb      	str	r3, [r7, #12]
20019ae2:	687b      	ldr	r3, [r7, #4]
20019ae4:	681b      	ldr	r3, [r3, #0]
20019ae6:	68db      	ldr	r3, [r3, #12]
20019ae8:	60fb      	str	r3, [r7, #12]
20019aea:	687b      	ldr	r3, [r7, #4]
20019aec:	681b      	ldr	r3, [r3, #0]
20019aee:	689b      	ldr	r3, [r3, #8]
20019af0:	60fb      	str	r3, [r7, #12]
20019af2:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
20019af4:	687b      	ldr	r3, [r7, #4]
20019af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019af8:	2b00      	cmp	r3, #0
20019afa:	d115      	bne.n	20019b28 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
20019afc:	687b      	ldr	r3, [r7, #4]
20019afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20019b02:	b2db      	uxtb	r3, r3
20019b04:	2b04      	cmp	r3, #4
20019b06:	d107      	bne.n	20019b18 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
20019b08:	687b      	ldr	r3, [r7, #4]
20019b0a:	2201      	movs	r2, #1
20019b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
20019b10:	6878      	ldr	r0, [r7, #4]
20019b12:	f7ff facd 	bl	200190b0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
20019b16:	e00e      	b.n	20019b36 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
20019b18:	687b      	ldr	r3, [r7, #4]
20019b1a:	2201      	movs	r2, #1
20019b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
20019b20:	6878      	ldr	r0, [r7, #4]
20019b22:	f7ff facf 	bl	200190c4 <HAL_SPI_TxRxCpltCallback>
}
20019b26:	e006      	b.n	20019b36 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
20019b28:	687b      	ldr	r3, [r7, #4]
20019b2a:	2201      	movs	r2, #1
20019b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
20019b30:	6878      	ldr	r0, [r7, #4]
20019b32:	f7ff faef 	bl	20019114 <HAL_SPI_ErrorCallback>
}
20019b36:	bf00      	nop
20019b38:	3718      	adds	r7, #24
20019b3a:	46bd      	mov	sp, r7
20019b3c:	bd80      	pop	{r7, pc}
20019b3e:	bf00      	nop
20019b40:	2000e4dc 	.word	0x2000e4dc
20019b44:	057619f1 	.word	0x057619f1

20019b48 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
20019b48:	b580      	push	{r7, lr}
20019b4a:	b084      	sub	sp, #16
20019b4c:	af00      	add	r7, sp, #0
20019b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
20019b50:	687b      	ldr	r3, [r7, #4]
20019b52:	681b      	ldr	r3, [r3, #0]
20019b54:	685a      	ldr	r2, [r3, #4]
20019b56:	687b      	ldr	r3, [r7, #4]
20019b58:	681b      	ldr	r3, [r3, #0]
20019b5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
20019b5e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
20019b60:	f7f7 f820 	bl	20010ba4 <HAL_GetTick>
20019b64:	4603      	mov	r3, r0
20019b66:	461a      	mov	r2, r3
20019b68:	2164      	movs	r1, #100	; 0x64
20019b6a:	6878      	ldr	r0, [r7, #4]
20019b6c:	f7ff fed0 	bl	20019910 <SPI_EndRxTransaction>
20019b70:	4603      	mov	r3, r0
20019b72:	2b00      	cmp	r3, #0
20019b74:	d005      	beq.n	20019b82 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20019b76:	687b      	ldr	r3, [r7, #4]
20019b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019b7a:	f043 0220 	orr.w	r2, r3, #32
20019b7e:	687b      	ldr	r3, [r7, #4]
20019b80:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20019b82:	687b      	ldr	r3, [r7, #4]
20019b84:	689b      	ldr	r3, [r3, #8]
20019b86:	2b00      	cmp	r3, #0
20019b88:	d10a      	bne.n	20019ba0 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20019b8a:	2300      	movs	r3, #0
20019b8c:	60fb      	str	r3, [r7, #12]
20019b8e:	687b      	ldr	r3, [r7, #4]
20019b90:	681b      	ldr	r3, [r3, #0]
20019b92:	68db      	ldr	r3, [r3, #12]
20019b94:	60fb      	str	r3, [r7, #12]
20019b96:	687b      	ldr	r3, [r7, #4]
20019b98:	681b      	ldr	r3, [r3, #0]
20019b9a:	689b      	ldr	r3, [r3, #8]
20019b9c:	60fb      	str	r3, [r7, #12]
20019b9e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
20019ba0:	687b      	ldr	r3, [r7, #4]
20019ba2:	2201      	movs	r2, #1
20019ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
20019ba8:	687b      	ldr	r3, [r7, #4]
20019baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019bac:	2b00      	cmp	r3, #0
20019bae:	d103      	bne.n	20019bb8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
20019bb0:	6878      	ldr	r0, [r7, #4]
20019bb2:	f7ff fa7d 	bl	200190b0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
20019bb6:	e002      	b.n	20019bbe <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
20019bb8:	6878      	ldr	r0, [r7, #4]
20019bba:	f7ff faab 	bl	20019114 <HAL_SPI_ErrorCallback>
}
20019bbe:	bf00      	nop
20019bc0:	3710      	adds	r7, #16
20019bc2:	46bd      	mov	sp, r7
20019bc4:	bd80      	pop	{r7, pc}
	...

20019bc8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
20019bc8:	b580      	push	{r7, lr}
20019bca:	b086      	sub	sp, #24
20019bcc:	af00      	add	r7, sp, #0
20019bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20019bd0:	4b2c      	ldr	r3, [pc, #176]	; (20019c84 <SPI_CloseTx_ISR+0xbc>)
20019bd2:	681b      	ldr	r3, [r3, #0]
20019bd4:	4a2c      	ldr	r2, [pc, #176]	; (20019c88 <SPI_CloseTx_ISR+0xc0>)
20019bd6:	fba2 2303 	umull	r2, r3, r2, r3
20019bda:	0a5b      	lsrs	r3, r3, #9
20019bdc:	2264      	movs	r2, #100	; 0x64
20019bde:	fb02 f303 	mul.w	r3, r2, r3
20019be2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20019be4:	f7f6 ffde 	bl	20010ba4 <HAL_GetTick>
20019be8:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
20019bea:	693b      	ldr	r3, [r7, #16]
20019bec:	2b00      	cmp	r3, #0
20019bee:	d106      	bne.n	20019bfe <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20019bf0:	687b      	ldr	r3, [r7, #4]
20019bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019bf4:	f043 0220 	orr.w	r2, r3, #32
20019bf8:	687b      	ldr	r3, [r7, #4]
20019bfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
20019bfc:	e009      	b.n	20019c12 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
20019bfe:	693b      	ldr	r3, [r7, #16]
20019c00:	3b01      	subs	r3, #1
20019c02:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20019c04:	687b      	ldr	r3, [r7, #4]
20019c06:	681b      	ldr	r3, [r3, #0]
20019c08:	689b      	ldr	r3, [r3, #8]
20019c0a:	f003 0302 	and.w	r3, r3, #2
20019c0e:	2b00      	cmp	r3, #0
20019c10:	d0eb      	beq.n	20019bea <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
20019c12:	687b      	ldr	r3, [r7, #4]
20019c14:	681b      	ldr	r3, [r3, #0]
20019c16:	685a      	ldr	r2, [r3, #4]
20019c18:	687b      	ldr	r3, [r7, #4]
20019c1a:	681b      	ldr	r3, [r3, #0]
20019c1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
20019c20:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
20019c22:	697a      	ldr	r2, [r7, #20]
20019c24:	2164      	movs	r1, #100	; 0x64
20019c26:	6878      	ldr	r0, [r7, #4]
20019c28:	f7ff fed8 	bl	200199dc <SPI_EndRxTxTransaction>
20019c2c:	4603      	mov	r3, r0
20019c2e:	2b00      	cmp	r3, #0
20019c30:	d005      	beq.n	20019c3e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20019c32:	687b      	ldr	r3, [r7, #4]
20019c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019c36:	f043 0220 	orr.w	r2, r3, #32
20019c3a:	687b      	ldr	r3, [r7, #4]
20019c3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20019c3e:	687b      	ldr	r3, [r7, #4]
20019c40:	689b      	ldr	r3, [r3, #8]
20019c42:	2b00      	cmp	r3, #0
20019c44:	d10a      	bne.n	20019c5c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20019c46:	2300      	movs	r3, #0
20019c48:	60fb      	str	r3, [r7, #12]
20019c4a:	687b      	ldr	r3, [r7, #4]
20019c4c:	681b      	ldr	r3, [r3, #0]
20019c4e:	68db      	ldr	r3, [r3, #12]
20019c50:	60fb      	str	r3, [r7, #12]
20019c52:	687b      	ldr	r3, [r7, #4]
20019c54:	681b      	ldr	r3, [r3, #0]
20019c56:	689b      	ldr	r3, [r3, #8]
20019c58:	60fb      	str	r3, [r7, #12]
20019c5a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
20019c5c:	687b      	ldr	r3, [r7, #4]
20019c5e:	2201      	movs	r2, #1
20019c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20019c64:	687b      	ldr	r3, [r7, #4]
20019c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019c68:	2b00      	cmp	r3, #0
20019c6a:	d003      	beq.n	20019c74 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
20019c6c:	6878      	ldr	r0, [r7, #4]
20019c6e:	f7ff fa51 	bl	20019114 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
20019c72:	e002      	b.n	20019c7a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
20019c74:	6878      	ldr	r0, [r7, #4]
20019c76:	f7ff fa11 	bl	2001909c <HAL_SPI_TxCpltCallback>
}
20019c7a:	bf00      	nop
20019c7c:	3718      	adds	r7, #24
20019c7e:	46bd      	mov	sp, r7
20019c80:	bd80      	pop	{r7, pc}
20019c82:	bf00      	nop
20019c84:	2000e4dc 	.word	0x2000e4dc
20019c88:	057619f1 	.word	0x057619f1

20019c8c <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
20019c8c:	b480      	push	{r7}
20019c8e:	b085      	sub	sp, #20
20019c90:	af00      	add	r7, sp, #0
20019c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20019c94:	4b1d      	ldr	r3, [pc, #116]	; (20019d0c <SPI_AbortRx_ISR+0x80>)
20019c96:	681b      	ldr	r3, [r3, #0]
20019c98:	4a1d      	ldr	r2, [pc, #116]	; (20019d10 <SPI_AbortRx_ISR+0x84>)
20019c9a:	fba2 2303 	umull	r2, r3, r2, r3
20019c9e:	0a5b      	lsrs	r3, r3, #9
20019ca0:	2264      	movs	r2, #100	; 0x64
20019ca2:	fb02 f303 	mul.w	r3, r2, r3
20019ca6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
20019ca8:	68fb      	ldr	r3, [r7, #12]
20019caa:	2b00      	cmp	r3, #0
20019cac:	d106      	bne.n	20019cbc <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20019cae:	687b      	ldr	r3, [r7, #4]
20019cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20019cb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20019cb6:	687b      	ldr	r3, [r7, #4]
20019cb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
20019cba:	e009      	b.n	20019cd0 <SPI_AbortRx_ISR+0x44>
    }
    count--;
20019cbc:	68fb      	ldr	r3, [r7, #12]
20019cbe:	3b01      	subs	r3, #1
20019cc0:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20019cc2:	687b      	ldr	r3, [r7, #4]
20019cc4:	681b      	ldr	r3, [r3, #0]
20019cc6:	689b      	ldr	r3, [r3, #8]
20019cc8:	f003 0302 	and.w	r3, r3, #2
20019ccc:	2b00      	cmp	r3, #0
20019cce:	d0eb      	beq.n	20019ca8 <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
20019cd0:	687b      	ldr	r3, [r7, #4]
20019cd2:	681b      	ldr	r3, [r3, #0]
20019cd4:	681a      	ldr	r2, [r3, #0]
20019cd6:	687b      	ldr	r3, [r7, #4]
20019cd8:	681b      	ldr	r3, [r3, #0]
20019cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20019cde:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
20019ce0:	687b      	ldr	r3, [r7, #4]
20019ce2:	681b      	ldr	r3, [r3, #0]
20019ce4:	685a      	ldr	r2, [r3, #4]
20019ce6:	687b      	ldr	r3, [r7, #4]
20019ce8:	681b      	ldr	r3, [r3, #0]
20019cea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
20019cee:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
20019cf0:	687b      	ldr	r3, [r7, #4]
20019cf2:	681b      	ldr	r3, [r3, #0]
20019cf4:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
20019cf6:	687b      	ldr	r3, [r7, #4]
20019cf8:	2207      	movs	r2, #7
20019cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
20019cfe:	bf00      	nop
20019d00:	3714      	adds	r7, #20
20019d02:	46bd      	mov	sp, r7
20019d04:	f85d 7b04 	ldr.w	r7, [sp], #4
20019d08:	4770      	bx	lr
20019d0a:	bf00      	nop
20019d0c:	2000e4dc 	.word	0x2000e4dc
20019d10:	057619f1 	.word	0x057619f1

20019d14 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
20019d14:	b480      	push	{r7}
20019d16:	b083      	sub	sp, #12
20019d18:	af00      	add	r7, sp, #0
20019d1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
20019d1c:	687b      	ldr	r3, [r7, #4]
20019d1e:	681b      	ldr	r3, [r3, #0]
20019d20:	685a      	ldr	r2, [r3, #4]
20019d22:	687b      	ldr	r3, [r7, #4]
20019d24:	681b      	ldr	r3, [r3, #0]
20019d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20019d2a:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
20019d2c:	687b      	ldr	r3, [r7, #4]
20019d2e:	681b      	ldr	r3, [r3, #0]
20019d30:	681a      	ldr	r2, [r3, #0]
20019d32:	687b      	ldr	r3, [r7, #4]
20019d34:	681b      	ldr	r3, [r3, #0]
20019d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20019d3a:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
20019d3c:	687b      	ldr	r3, [r7, #4]
20019d3e:	2207      	movs	r2, #7
20019d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
20019d44:	bf00      	nop
20019d46:	370c      	adds	r7, #12
20019d48:	46bd      	mov	sp, r7
20019d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
20019d4e:	4770      	bx	lr

20019d50 <__errno>:
20019d50:	4b01      	ldr	r3, [pc, #4]	; (20019d58 <__errno+0x8>)
20019d52:	6818      	ldr	r0, [r3, #0]
20019d54:	4770      	bx	lr
20019d56:	bf00      	nop
20019d58:	2000e4e8 	.word	0x2000e4e8

20019d5c <exit>:
20019d5c:	b508      	push	{r3, lr}
20019d5e:	4b07      	ldr	r3, [pc, #28]	; (20019d7c <exit+0x20>)
20019d60:	4604      	mov	r4, r0
20019d62:	b113      	cbz	r3, 20019d6a <exit+0xe>
20019d64:	2100      	movs	r1, #0
20019d66:	f3af 8000 	nop.w
20019d6a:	4b05      	ldr	r3, [pc, #20]	; (20019d80 <exit+0x24>)
20019d6c:	6818      	ldr	r0, [r3, #0]
20019d6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
20019d70:	b103      	cbz	r3, 20019d74 <exit+0x18>
20019d72:	4798      	blx	r3
20019d74:	4620      	mov	r0, r4
20019d76:	f7f6 fc9a 	bl	200106ae <_exit>
20019d7a:	bf00      	nop
20019d7c:	00000000 	.word	0x00000000
20019d80:	20019ff0 	.word	0x20019ff0

20019d84 <__libc_init_array>:
20019d84:	b570      	push	{r4, r5, r6, lr}
20019d86:	4e0d      	ldr	r6, [pc, #52]	; (20019dbc <__libc_init_array+0x38>)
20019d88:	4c0d      	ldr	r4, [pc, #52]	; (20019dc0 <__libc_init_array+0x3c>)
20019d8a:	1ba4      	subs	r4, r4, r6
20019d8c:	10a4      	asrs	r4, r4, #2
20019d8e:	2500      	movs	r5, #0
20019d90:	42a5      	cmp	r5, r4
20019d92:	d109      	bne.n	20019da8 <__libc_init_array+0x24>
20019d94:	4e0b      	ldr	r6, [pc, #44]	; (20019dc4 <__libc_init_array+0x40>)
20019d96:	4c0c      	ldr	r4, [pc, #48]	; (20019dc8 <__libc_init_array+0x44>)
20019d98:	f000 f822 	bl	20019de0 <_init>
20019d9c:	1ba4      	subs	r4, r4, r6
20019d9e:	10a4      	asrs	r4, r4, #2
20019da0:	2500      	movs	r5, #0
20019da2:	42a5      	cmp	r5, r4
20019da4:	d105      	bne.n	20019db2 <__libc_init_array+0x2e>
20019da6:	bd70      	pop	{r4, r5, r6, pc}
20019da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
20019dac:	4798      	blx	r3
20019dae:	3501      	adds	r5, #1
20019db0:	e7ee      	b.n	20019d90 <__libc_init_array+0xc>
20019db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
20019db6:	4798      	blx	r3
20019db8:	3501      	adds	r5, #1
20019dba:	e7f2      	b.n	20019da2 <__libc_init_array+0x1e>
20019dbc:	200003cc 	.word	0x200003cc
20019dc0:	200003cc 	.word	0x200003cc
20019dc4:	200003cc 	.word	0x200003cc
20019dc8:	200003d0 	.word	0x200003d0

20019dcc <memset>:
20019dcc:	4402      	add	r2, r0
20019dce:	4603      	mov	r3, r0
20019dd0:	4293      	cmp	r3, r2
20019dd2:	d100      	bne.n	20019dd6 <memset+0xa>
20019dd4:	4770      	bx	lr
20019dd6:	f803 1b01 	strb.w	r1, [r3], #1
20019dda:	e7f9      	b.n	20019dd0 <memset+0x4>

20019ddc <__EH_FRAME_BEGIN__>:
20019ddc:	0000 0000                                   ....

20019de0 <_init>:
20019de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20019de2:	bf00      	nop
20019de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
20019de6:	bc08      	pop	{r3}
20019de8:	469e      	mov	lr, r3
20019dea:	4770      	bx	lr

20019dec <_fini>:
20019dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20019dee:	bf00      	nop
20019df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
20019df2:	bc08      	pop	{r3}
20019df4:	469e      	mov	lr, r3
20019df6:	4770      	bx	lr

Disassembly of section .RamFunc:

20019df8 <HAL_FLASHEx_StopFlashInterfaceClk>:
  * @note  This mode couldn't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_StopFlashInterfaceClk(void)
{
20019df8:	b480      	push	{r7}
20019dfa:	b083      	sub	sp, #12
20019dfc:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
20019dfe:	2300      	movs	r3, #0
20019e00:	607b      	str	r3, [r7, #4]
20019e02:	4b0c      	ldr	r3, [pc, #48]	; (20019e34 <_etext+0x3c>)
20019e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20019e06:	4a0b      	ldr	r2, [pc, #44]	; (20019e34 <_etext+0x3c>)
20019e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20019e0c:	6413      	str	r3, [r2, #64]	; 0x40
20019e0e:	4b09      	ldr	r3, [pc, #36]	; (20019e34 <_etext+0x3c>)
20019e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20019e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20019e16:	607b      	str	r3, [r7, #4]
20019e18:	687b      	ldr	r3, [r7, #4]
  /* Stop the flash interface while System Run */  
  SET_BIT(PWR->CR, PWR_CR_FISSR);
20019e1a:	4b07      	ldr	r3, [pc, #28]	; (20019e38 <_etext+0x40>)
20019e1c:	681b      	ldr	r3, [r3, #0]
20019e1e:	4a06      	ldr	r2, [pc, #24]	; (20019e38 <_etext+0x40>)
20019e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
20019e24:	6013      	str	r3, [r2, #0]
   
  return HAL_OK;
20019e26:	2300      	movs	r3, #0
}
20019e28:	4618      	mov	r0, r3
20019e2a:	370c      	adds	r7, #12
20019e2c:	46bd      	mov	sp, r7
20019e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
20019e32:	4770      	bx	lr
20019e34:	40023800 	.word	0x40023800
20019e38:	40007000 	.word	0x40007000

20019e3c <HAL_FLASHEx_StartFlashInterfaceClk>:
  * @note  This mode couldn't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_StartFlashInterfaceClk(void)
{
20019e3c:	b480      	push	{r7}
20019e3e:	b083      	sub	sp, #12
20019e40:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
20019e42:	2300      	movs	r3, #0
20019e44:	607b      	str	r3, [r7, #4]
20019e46:	4b0c      	ldr	r3, [pc, #48]	; (20019e78 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
20019e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20019e4a:	4a0b      	ldr	r2, [pc, #44]	; (20019e78 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
20019e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20019e50:	6413      	str	r3, [r2, #64]	; 0x40
20019e52:	4b09      	ldr	r3, [pc, #36]	; (20019e78 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
20019e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20019e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20019e5a:	607b      	str	r3, [r7, #4]
20019e5c:	687b      	ldr	r3, [r7, #4]
  /* Start the flash interface while System Run */
  CLEAR_BIT(PWR->CR, PWR_CR_FISSR);
20019e5e:	4b07      	ldr	r3, [pc, #28]	; (20019e7c <HAL_FLASHEx_StartFlashInterfaceClk+0x40>)
20019e60:	681b      	ldr	r3, [r3, #0]
20019e62:	4a06      	ldr	r2, [pc, #24]	; (20019e7c <HAL_FLASHEx_StartFlashInterfaceClk+0x40>)
20019e64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
20019e68:	6013      	str	r3, [r2, #0]

  return HAL_OK;
20019e6a:	2300      	movs	r3, #0
}
20019e6c:	4618      	mov	r0, r3
20019e6e:	370c      	adds	r7, #12
20019e70:	46bd      	mov	sp, r7
20019e72:	f85d 7b04 	ldr.w	r7, [sp], #4
20019e76:	4770      	bx	lr
20019e78:	40023800 	.word	0x40023800
20019e7c:	40007000 	.word	0x40007000

20019e80 <HAL_FLASHEx_EnableFlashSleepMode>:
  * @note  This mode could n't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_EnableFlashSleepMode(void)
{
20019e80:	b480      	push	{r7}
20019e82:	b083      	sub	sp, #12
20019e84:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
20019e86:	2300      	movs	r3, #0
20019e88:	607b      	str	r3, [r7, #4]
20019e8a:	4b0c      	ldr	r3, [pc, #48]	; (20019ebc <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
20019e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20019e8e:	4a0b      	ldr	r2, [pc, #44]	; (20019ebc <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
20019e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20019e94:	6413      	str	r3, [r2, #64]	; 0x40
20019e96:	4b09      	ldr	r3, [pc, #36]	; (20019ebc <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
20019e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20019e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20019e9e:	607b      	str	r3, [r7, #4]
20019ea0:	687b      	ldr	r3, [r7, #4]
  /* Enable the flash sleep while System Run */
  SET_BIT(PWR->CR, PWR_CR_FMSSR);
20019ea2:	4b07      	ldr	r3, [pc, #28]	; (20019ec0 <HAL_FLASHEx_EnableFlashSleepMode+0x40>)
20019ea4:	681b      	ldr	r3, [r3, #0]
20019ea6:	4a06      	ldr	r2, [pc, #24]	; (20019ec0 <HAL_FLASHEx_EnableFlashSleepMode+0x40>)
20019ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20019eac:	6013      	str	r3, [r2, #0]

  return HAL_OK;
20019eae:	2300      	movs	r3, #0
}
20019eb0:	4618      	mov	r0, r3
20019eb2:	370c      	adds	r7, #12
20019eb4:	46bd      	mov	sp, r7
20019eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
20019eba:	4770      	bx	lr
20019ebc:	40023800 	.word	0x40023800
20019ec0:	40007000 	.word	0x40007000

20019ec4 <HAL_FLASHEx_DisableFlashSleepMode>:
  * @note  This mode couldn't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_DisableFlashSleepMode(void)
{
20019ec4:	b480      	push	{r7}
20019ec6:	b083      	sub	sp, #12
20019ec8:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
20019eca:	2300      	movs	r3, #0
20019ecc:	607b      	str	r3, [r7, #4]
20019ece:	4b0c      	ldr	r3, [pc, #48]	; (20019f00 <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
20019ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20019ed2:	4a0b      	ldr	r2, [pc, #44]	; (20019f00 <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
20019ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20019ed8:	6413      	str	r3, [r2, #64]	; 0x40
20019eda:	4b09      	ldr	r3, [pc, #36]	; (20019f00 <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
20019edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20019ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20019ee2:	607b      	str	r3, [r7, #4]
20019ee4:	687b      	ldr	r3, [r7, #4]
  /* Disable the flash sleep while System Run */
  CLEAR_BIT(PWR->CR, PWR_CR_FMSSR);
20019ee6:	4b07      	ldr	r3, [pc, #28]	; (20019f04 <HAL_FLASHEx_DisableFlashSleepMode+0x40>)
20019ee8:	681b      	ldr	r3, [r3, #0]
20019eea:	4a06      	ldr	r2, [pc, #24]	; (20019f04 <HAL_FLASHEx_DisableFlashSleepMode+0x40>)
20019eec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
20019ef0:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;
20019ef2:	2300      	movs	r3, #0
}
20019ef4:	4618      	mov	r0, r3
20019ef6:	370c      	adds	r7, #12
20019ef8:	46bd      	mov	sp, r7
20019efa:	f85d 7b04 	ldr.w	r7, [sp], #4
20019efe:	4770      	bx	lr
20019f00:	40023800 	.word	0x40023800
20019f04:	40007000 	.word	0x40007000
